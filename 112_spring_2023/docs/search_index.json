[["index.html", "COMP/STAT 112: Introduction to Data Science Welcome!", " COMP/STAT 112: Introduction to Data Science Welcome! Data icons created by Kiranshastry - Flaticon Note: This site is still in construction! This is the day-to-day course site for Introduction to Data Science (COMP/STAT 112) taught by Professor Brianna Heggeseth at Macalester College for Fall 2022. The activities here were developed by a variety of faculty in the MSCS Department at Macalester College. This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License. "],["course-schedule.html", "Course Schedule", " Course Schedule The schedule below is a tentative outline of our plans for the semester. For each class period, please start by actively reviewing the associated Learning Goals, review/finish the daily activity (turn in by deadline), and watch/read the indicated videos/readings to supplement your understanding. Week 1 Date Activity Topic & Assignments Optional Readings/Videos 8/31 1 Intro to R, RStudio, and R Markdown Slides for Today Assignment 1 Due Tuesday, September 6 at 11:59pm Readings: Introduction to R Markdown, by Wickham and Grolemund Tidy Data, by Wickham Tidy Data (12.1, 12.2), by Wickham and Grolemund Quarto, a VERY new alternative to R Markdown Videos: Setting up for success in the course, by Lisa Lendway Introduction to RStudio, by Alicia Johnson Check version of R and RStudio, by Lisa Lendway RStudio tour, by Lisa Lendway R Markdown introduction, by Lisa Lendway 9/2 Friday Fun: Community Building Scavenger Hunt Finish Assignment 1 (due 9/6). Week 2 Date Activity Topic & Assignments Optional Readings/Videos 9/7 2 Introduction to Data Visualization Set up NY Times Subscription (Free to you through Macalester) Slides for Today Assignment 2 Due Tuesday, September 13 at 11:59pm Readings: Data visualization, by Wickham and Grolemund Layered grammar of graphics, by Wickham and Grolemund A grammar for graphics (Chp 3), by Baumer, Kaplan, and Horton Aesthetic mapping (Chp 2), by Wilke Visualizing distributions (Chp 7), by Wilke Videos: Intro to ggplot , by Lisa Lendway 9/9 Friday Fun: Tidy Tuesday Slides for Today Readings: Telling a Story (Chp 29), by Wilke Finish Assignment 2 (due 9/13). Week 3 Date Activity Topic & Assignments Optional Readings/Videos 9/12 3 Effective Viz Slides for Today Readings: Equity Awareness for Data Visualizations, by Urban Institute Telling a story (Chp 29), by Wilke 9/14 4 Bivariate Viz Slides for Today Assignment 3 Due Tuesday, September 20 at 11:59pm FYC Library Tutorial (only FYC Section) Due Friday, September 16 at 9am Pre-Class Activity (only FYC Section) Due Friday, September 16 at 9am Readings: Visualizing amounts (Chp 6), by Wilke Videos: ggplot demo, Lisa Lendway Common ggplot mistakes, Lisa Lendway 9/16 Friday Fun: Meet in Idea Lab (Section 1 & 2), Meet in Library 206 for Library Session (Section F1) Finish Assignment 3 (due 9/20) Week 4 Date Activity Topic & Assignments Optional Readings/Videos 9/19 5 Multivariate Viz Slides for Today Assignment 4 Due Sunday, September 25 at 11:59pm Readings: Visualize This (Chp 7), by Yau Videos: More ggplot, Lisa Lendway 9/21 6 Spatial Viz Slides for Today Assignment 5 Due Tuesday, September 27 at 11:59pm Readings: Visualize This (Chp 8), by Yau Spatial data visualization (Chp 17, intro and 17.1), by Baumer et al. Videos: Plotting data on a map with ggmap, Lisa Lendway Glamour of graphics, Will Chase (slides here 9/23 Friday Fun: Introduction to Iterative Viz Slides for Today Finish Assignment 4 (due 9/25) and Assignment 5 (due 9/27) Week 5 Date Activity Topic & Assignments Optional Readings/Videos 9/26 7 Six Main Verbs Slides for Today Assignment 6 Due Tuesday, October 4 at 11:59pm Readings: Data transformation, by Wickham and Grolemund Data wrangling on one table, by Baumer, Kaplan, and Horton Videos: Intro to dplyr, Lisa Lendway Demonstration of dplyr, Lisa Lendway 9/28 8 Reshaping Data Slides for Today Assignment 7 Due Tuesday, October 4 at 11:59pm Readings: Pivoting and narrow v. wide formats, by Wickham and Grolemund Reshaping data, by Baumer, Kaplan, and Horton Videos: Demonstration of pivoting, Lisa Lendway 9/30 Friday Fun: TBD (Section 1 & 2); CC & C (FYC Section) Slides for Today Finish Assignment 6 (due 10/4) and Assignment 7 (due 10/4) Week 6 Date Activity Topic & Assignments Optional Readings/Videos 10/3 9 Joining Slides for Today Assignment 8 Due Sunday, October 9 at 11:59pm Readings: Relational data, by Wickham and Grolemund Data wrangling on multiple table, by Baumer, Kaplan, and Horton Videos: Demonstration of joining data, Lisa Lendway 10/5 10 Factors Slides for Today Assignment 9 Completed in groups in class on Weds, October 5 - submit to Moodle by 11:59pm Readings: Factors, by Wickham and Grolemund Videos: Working with factors using forcats, Lisa Lendway 10/7 Friday Fun: Joins and Maps, FYC: + Guest Speaker Slides for Today Finish Assignment 8 (due 10/9) Week 7 Date Activity Topic & Assignments Optional Readings/Videos 10/10 11 Mini Project Slides for Today 10/12 Continued Mini Project Work Slides for Today 10/14 Midterm Review Slides for Today Study for Exam on 10/17! Week 8 Date Activity Topic & Assignments Optional Readings/Videos 10/17 Midterm 10/19 Midterm Revisions & Project Brainstorming Slides for Today Brainstorm Activity (due next Friday) Midterm Part 2 Revisions & Reflection (due next Friday) 10/21 FALL BREAK (NO CLASS) Week 9 Date Activity Topic & Assignments Optional Readings/Videos 10/24 12 EDA Slides for Today Assignment 11 Due Sunday, October 30 at 11:59pm Readings: Exploratory Data Analysis, by Wickham and Grolemund Exploratory Data Analysis Checklist, by Peng 10/26 13 Data Import Slides for Today Assignment 12 Due Tuesday, November 1 at 11:59pm Readings: Data import, by Wickham and Grolemund Missing data, by Wickham and Grolemund Data intake, by Baumer, Kaplan, and Horton Videos: Using the import wizard, Lisa Lendway 10/28 Fun Friday: Deep Dive in Project Ideas! Slides for Today Finish Assignment 11 (due 10/30) and Assignment 12 (due 11/1). Week 10 Date Activity Topic & Assignments Optional Readings/Videos 10/31 14 Regular Expressions Slides for Today Assignment 13 Due Tuesday, November 8 at 11:59pm Reading: Strings, by Wickham and Grolemund Regular expressions, by Baumer, Kaplan, and Horton Tutorials and tools: Working with strings, by Lisa Lendway RegExplain RStudio addin by Garrick Aden-Buie regexr exploration tool 11/2 Project Narrow Focus Slides for Today If you would like to use Github for collaboration on the project, here are some resources github video tutorial, Lisa Lendway Instructions that accompany the video tutorial above Happy Git with R by Jenny Bryan 11/4 Fun Friday: Project Work! Slides for Today Finish Assignment 13 (due 11/8). Week 11 Date Activity Topic & Assignments Optional Readings/Videos 11/7 Written Communication: Crafting Sentences Slides for Today 11/9 Written Communication: One Number Story Slides for Today 11/11 Fun Friday: Peer Review Slides for Today Other Resources: JSON: A Non-Programmer's Introduction to JSON Chp 15 and 16, by Baumer, Kaplan, Horton Text Mining with R, by Julia Silge and David Robinson Finish One Number Story (Assignment 14) due 11/15. Week 12 Date Activity Topic & Assignments Optional Readings/Videos 11/14 Oral Communication Slides for Today 11/16 Present Data Vizualization & Critique Slides for Today 11/18 Present Data Vizualization & Critique Slides for Today Continue working on projects Week 13 Date Activity Topic & Assignments Optional Readings/Videos 11/21 Project Planning Slides for Today 11/23 Thanksgiving Break (NO CLASS) 11/25 Thanksgiving Break (NO CLASS) Continue working on projects. Week 14 Date Activity Topic & Assignments Optional Readings/Videos 11/28 Storyboarding Slides for Today 11/30 Project Work Day Slides for Today 12/2 Project Work Day Continue working on Final Projects Week 15 Date Activity Topic & Assignments Optional Readings/Videos 12/5 Project Progress Reports 12/7 Project Work Day 12/9 Last Day of Class Slides for Today Continue working on Final Projects "],["learning-goals.html", "Learning Goals General Skills Course Topics", " Learning Goals The goal of this course is for you to gain confidence in carrying out the entire data science pipeline, from research question formulation, to data collection/scraping, to wrangling, to modeling, to visualization, to presentation and communication Specific course topics and general skills are listed below. General Skills Data Communication In written and oral formats: Inform and justify data cleaning and analysis process and the resulting conclusions with clear, organized, logical, and compelling details that adapt to the background, values, and motivations of the audience and context in which communication occurs. Collaborative Learning Understand and demonstrate characteristics of effective collaboration (team roles, interpersonal communication, self-reflection, awareness of social dynamics, advocating for yourself and others). Develop a common purpose and agreement on goals. Be able to contribute questions or concerns in a respectful way. Share and contribute to the group’s learning in an equitable manner. Develop a familiarity and comfort in using collaboration tools such as Git and Github. Course Topics Specific learning objectives for our course topics are listed below. Use these to guide your synthesis of course material for specific topics. Note that the topics are covered in the order of the data science pipeline, not the order in which we will cover them in class. Foundation Intro to R, RStudio, and R Markdown Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Data Acquisition &amp; Cleaning Data Import and Basic Cleaning Be able to find an existing data set to import into R Be able to import data of a variety of file types into R Understand and implement the data cleaning process to make values consistent Understand the implications of different ways of dealing with missing values with replace_na and drop_na Wrangling Text using Regular Expression Be able to work with strings of text data Use regular expressions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the stringr package. Data Wrangling Six Main Wrangling Verbs Understand and be able to use the following verbs appropriate: select, mutate, filter, arrange, summarize, group_by Develop working knowledge of working with dates and lubridate functions Reshaping Data Understand the difference between wide and long data format and distinguish the case (unit of observation) for a given data set Be able to use pivot_wider and pivot_longer in the tidyr package Joining Data Understand the concept of keys and variables that uniquely identify rows or cases Understand the different types of joins, different ways of combining two data frames together Be able to use mutating joins: left_join, inner_join and full_join in the dplyr package Be able to use filtering joins: semi_join, anti_join in the dplyr package Categorical Variables as Factors Understand the difference between a variable stored as a character vs. a factor Be able to convert a character variable to a factor Be able to manipulate the order and values of a factor with the forcats package to improve summaries and visualizations. Mini-Project Apply data wrangling and visualization skills to a new data set Be able to tell a story about data through visualization Data Visualization The learning goals may be adjusted before we start the material of this section. Introduction to Data Visualization Understand the Grammar of Graphics Use ggplot2 functions to create basic layers of graphics Understand the different basic univariate visualizations for categorical and quantiative variables Effective Visualization Understand and apply the guiding principles of effective visualizations Bivariate Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative) Create basic bivariate visualizations based on real data with ggplot2 functions Multivariate Understand how we can use additional aesthetics such as color and size to incorporate a third (or more variables) to a bivariate plot with ggplot2 functions Be able to with creating and interpreting heat maps and star plots, which allow you to look for patterns in variation in many variables. Spatial Plot data points on top of a map using the ggmap() function along with ggplot2 functions Create choropleth maps using geom_map() Add points and other ggplot2 features to a map created from geom_map() Understand the basics of creating a map using leaflet, including adding points and choropleths to a base map Data Modeling The learning goals may be adjusted before we start the material of this section. EDA Understand the first steps that should be taken when you encounter a new data set Develop comfort in knowing how to explore data to understand it Develop comfort in formulating research questions "],["intro-to-r-rstudio-and-r-markdown.html", "Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Getting Started in RStudio R Markdown and Reproducible Research Practice Appendix: R Functions", " Topic 1 Intro to R, RStudio, and R Markdown Learning Goals Download and install the necessary tools (R, RStudio) Develop comfort in navigating the tools in RStudio Develop comfort in writing and knitting a R Markdown file Identify the characteristics of tidy data Use R code: as a calculator and to explore tidy data Getting Started in RStudio As you might guess from the name, “Data Science” requires data. Working with modern (large, messy) data sets requires statistical software. We’ll exclusively use RStudio. Why? it’s free it’s open source (the code is free &amp; anybody can contribute to it) it has a huge online community (which is helpful for when you get stuck) it’s one of the industry standards it can be used to create reproducible and lovely documents (In fact, the course materials that you’re currently reading were constructed entirely within RStudio!) Download R &amp; RStudio To get started, take the following two steps in the given order. Even if you already have R/RStudio, make sure to update to the most recent versions. Download and install the R statistical software at https://mirror.las.iastate.edu/CRAN/ Download and install the FREE version of RStudio at https://www.rstudio.com/products/rstudio/download/#download If you are having issues with downloading, log on to https://rstudio.macalester.edu/ (use Mac credentials) to use the RStudio server. What’s the difference between R and RStudio? Mainly, RStudio requires R – thus it does everything R does and more. We will be using RStudio exclusively. A quick tour of RStudio Open RStudio! You should see four panes, each serving a different purpose: Figure 1.1: RStudio Interface This short video tour of RStudio summarizes some basic features of the console. Exercise 1.1 (Warm Up) Use RStudio as a simple calculator to do the following: Perform a simple calculation: calculate 90/3. RStudio has built-in functions to which we supply the necessary arguments: function(arguments). Use the built-in function sqrt to calculate the square root of 25. Use the built-in function rep to repeat the number “5” eight times. Use the seq function to create the vector (0, 3, 6, 9, 12). (The video doesnt cover this!) Create a new vector by concatenating three repetitions of the vector from the previous part. Solution 90/3 ## [1] 30 sqrt(25) ## [1] 5 rep(5, times = 8) ## [1] 5 5 5 5 5 5 5 5 seq(0, 12, by = 3) ## [1] 0 3 6 9 12 rep(seq(0, 12, by = 3), times = 3) ## [1] 0 3 6 9 12 0 3 6 9 12 0 3 ## [13] 6 9 12 rep(seq(0, 12, by = 3), each = 3) #notice the difference between times and each ## [1] 0 0 0 3 3 3 6 6 6 9 9 9 ## [13] 12 12 12 Exercise 1.2 (Assignment) We often want to store our output for later use (why?). The basic idea in RStudio: `name &lt;- output` Copy and paste the following code into the console, line by line. NOTE: RStudio ignores any content after the #. Thus we use this to ‘comment’ and organize our code. #type square_3 square_3 #calculate 3 squared 3^2 #store this as &quot;square_3&quot; square_3 &lt;- 3^2 #type square_3 again! square_3 #do some math with square_3 square_3 + 2 Data Not only does “Data Science” require statistical software, it requires DATA! Consider the Google definition: Figure 1.2: A datum. With this definition in mind, which of the following are examples of data? tables ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 photo video text / tweets We’ll mostly work with data that look like this: ## family father mother sex height nkids ## 1 1 78.5 67.0 M 73.2 4 ## 2 1 78.5 67.0 F 69.2 4 ## 3 1 78.5 67.0 F 69.0 4 ## 4 1 78.5 67.0 F 69.0 4 ## 5 2 75.5 66.5 M 73.5 4 ## 6 2 75.5 66.5 M 72.5 4 This isn’t as restrictive as it seems. We can convert the above signals: photos, videos, and text to a data table format! Tidy Data Example: After a scandal among FIFA officials, fivethirtyeight.com posted an analysis of FIFA viewership, “How to Break FIFA”. Here’s a snapshot of the data used in this article: country confederation population_share tv_audience_share gdp_weighted_share United States CONCACAF 4.5 4.3 11.3 Japan AFC 1.9 4.9 9.1 China AFC 19.5 14.8 7.3 Germany UEFA 1.2 2.9 6.3 Brazil CONMEBOL 2.8 7.1 5.4 United Kingdom UEFA 0.9 2.1 4.2 Italy UEFA 0.9 2.1 4.0 France UEFA 0.9 2.0 4.0 Russia UEFA 2.1 3.1 3.5 Spain UEFA 0.7 1.8 3.1 The data table above is in tidy format. Tidy data tables have three key features: Each row represents a unit of observation (also referred to as a case). Each column represents a variable (ie. an attribute of the cases that can vary from case to case). Each variable is one of two types: quantitative = numerical categorical = discrete possibilities/categories Each entry contains a single data value; no analysis, summaries, footnotes, comments, etc., and only one value per cell Tidy Data: Art by Allison Horst Exercise 1.3 (Units of Observation and Variables) Consider the following in a group: What are the units of observation in the FIFA data? What are the variables? Which are quantitative? Which are categorical? Are these tidy data? Solution A FIFA member country country name, soccer or football confederation, country’s share of global population (percentage), country’s share of global world cup TV Audience (percentage), country’s GDP-weighted audience share (percentage) Yes Exercise 1.4 (Tidy vs. Untidy) Check out the following data. Explain to each other why they are untidy and how we can tidy them. Data 1: FIFA country confederation population share tv_share United States CONCACAF i don’t know* 4.3% *look up later Japan AFC 1.9 4.9% China AFC 19.5 14.8% total=24% Data 2: Gapminder life expectancies by country country 1952 1957 1962 Asia Afghanistan 28.8 30.3 32.0 Bahrain 50.9 53.8 56.9 Africa Algeria 43.0 45.7 48.3 Solution There are notes such as “I don’t know” and “look up later” in columns with numeric values; the last row with the total is a summary. We could remove the text notes, replace it with the value if known, and remove the last row with the total summary. The first column does not have a row name. It should be continent. Additionally, Bahrain needs a value for the continent. Data Basics in RStudio For now, we’ll focus on tidy data. In a couple of weeks, you’ll learn how to turn untidy data into tidy data. Exercise 1.5 (Importing Package Data) The first step to working with data in RStudio is getting it in there! How we do this depends on its format (eg: Excel spreadsheet, csv file, txt file) and storage locations (eg: online, within Wiki, desktop). Luckily for us, the fifa_audience data are stored in the fivethirtyeight RStudio package. Copy and paste the following code into the Console and press Enter. #download the data and information in the fivethirtyeight package (we only need to do this once) install.packages(&#39;fivethirtyeight&#39;) #load the fivethirtyeight package library(fivethirtyeight) #load the fifa data data(&quot;fifa_audience&quot;) #store this under a shorter, easier name fifa &lt;- fifa_audience Exercise 1.6 (Examining Data Structures) Before we can analyze our data, we must understand its structure. Try out the following functions (copy and paste into the Console). For each, make a note that describes its action. #(what does View do?) View(fifa) #(what does head do?) head(fifa) #(what does dim do?) dim(fifa) #(what does names do?) names(fifa) Solution #View() opens up a new tab with a spreadsheet preview of the data to visually explore the data. It is commented out in the Rmarkdown file because this is an interactive feature #View(fifa) #head() gives the first 6 (default number) rows of a data set head(fifa) ## # A tibble: 6 × 5 ## country confe…¹ popul…² tv_au…³ ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United States CONCAC… 4.5 4.3 ## 2 Japan AFC 1.9 4.9 ## 3 China AFC 19.5 14.8 ## 4 Germany UEFA 1.2 2.9 ## 5 Brazil CONMEB… 2.8 7.1 ## 6 United Kingdom UEFA 0.9 2.1 ## # … with 1 more variable: ## # gdp_weighted_share &lt;dbl&gt;, and ## # abbreviated variable names ## # ¹​confederation, ²​population_share, ## # ³​tv_audience_share #dim() gives the number of rows and number of columns dim(fifa) ## [1] 191 5 #names() gives the names of the columns/variables names(fifa) ## [1] &quot;country&quot; ## [2] &quot;confederation&quot; ## [3] &quot;population_share&quot; ## [4] &quot;tv_audience_share&quot; ## [5] &quot;gdp_weighted_share&quot; Exercise 1.7 (Codebooks) Data are also only useful if we know what they measure! The fifa data table is tidy; it doesn’t have any helpful notes in the data itself. Rather, information about the data is stored in a separate codebook. Codebooks can be stored in many ways (eg: Google docs, word docs, etc). Here the authors have made their codebook available in RStudio (under the original fifa_audience name). Check it out (run the following code in the console): ?fifa_audience What does population_share measure? What are the units of population_share? Solution Country’s share of global population Percentage between 0 and 100   Exercise 1.8 (Examining a Single Variable) Consider the following: We might want to access and focus on a single variable. To this end, we can use the $ notation (see below). What are the values of tv_audience_share? Of confederation? Is it easy to figure out? fifa$tv_audience_share fifa$confederation It’s important to understand the format/class of each variable (quantitative, categorical, date, etc) in both its meaning and its structure within RStudio: class(fifa$tv_audience_share) class(fifa$confederation) If a variable is categorical (in factor format), we can determine its levels / category labels. What are the value of confederation? levels(fifa$confederation) #it is in character format levels(factor(fifa$confederation)) #we can convert to factor format R Markdown and Reproducible Research Reproducible research is the idea that data analyses, and more generally, scientific claims, are published with their data and software code so that others may verify the findings and build upon them. - Reproducible Research, Coursera Useful Resources: R Markdown Quick Tour R Markdown Cheatsheet R Markdown Reference Guide Research often makes claims that are difficult to verify. A recent study of published psychology articles found that less than half of published claims could be reproduced. One of the most common reasons claims cannot be reproduced is confusion about data analysis. It may be unclear exactly how data was prepared and analyzed, or there may be a mistake in the analysis. In this course we will use an innovative format called R Markdown that dramatically increases the transparency of data analysis. R Markdown interleaves data, R code, graphs, tables, and text, packaging them into an easily publishable format. To use R Markdown, you will write an R Markdown formatted file in RStudio and then ask RStudio to knit it into an HTML document (or occasionally a PDF or MS Word document). Exercise 1.9 (Deduce the R Markdown Format) Look at this Sample RMarkdown and the HTML webpage it creates. Consider the following and discuss: How are bullets, italics, and section headers represented in the R Markdown file? How does R code appear in the R Markdown file? In the HTML webpage, do you see the R code, the output of the R code, or both? Solution Bullets are represented with * and + Italics are represented with * before and after a word or phrase Section headers are represented with # R code chunks are between 3 tick marks at the beginning and end; it is R code if there is an r in curly braces If echo=FALSE in curly braces, the code is not shown. Otherwise, both code and output are shown by default.   Now take a look at the R Markdown cheatsheet. Look up the R Markdown features from the previous question on the cheatsheet. There’s a great deal more information there. Practice Complete the following. If you get stuck along the way, refer to the R Markdown cheatsheet linked above, search the web for answers, and/or ask for help! Exercise 1.10 (Your First R Markdown File) Create a new R Markdown about your favorite food. Create a new file in RStudio (File -&gt; New File -&gt; R Markdown) with a Title of First_Markdown. Save it to a new folder on your Desktop called COMP_STAT_112; within that new folder, create another new folder called Day_01. Make sure you can compile/render (Knit) the Markdown into a webpage (html file). Add a new line between title and output that reads: author: Your Name. Create a very brief essay about your favorite food. Make sure to include: A picture from the web A bullet list A numbered list Compile (Knit) the document into an html file. Exercise 1.11 (New Data!) There’s a data set named comic_characters in the fivethirtyeightdata package. Install the package by running the following in the Console: install.packages(&#39;fivethirtyeightdata&#39;, repos = &#39;https://fivethirtyeightdata.github.io/drat/&#39;, type = &#39;source&#39;) Check out the codebook (hint: use ?) to understand what these data measure. Then add a second section to your R Markdown file, and then use code chunks and R commands to perform/answer the following tasks/questions: Load the data. What are the units of observation? How many observations are there? In a new code chunk, print out the first 12 rows of the data set. Get a list of all variable names. What’s the class of the date variable? List all of the unique entries in the gsm variable (no need to include NA). Compile the document into an html file. Appendix: R Functions R as a calculator Function/Operator Action Example / Division 90/30 * Multiplication 2*5 + Addition 1+1 - Subtraction 1-1 ^ Exponent/Power to 3^2 sqrt(x) Square root sqrt(25) R Basics Function/Operator Action Example install.packages('packagename') Download a R package (function, data, etc.) from repository install.packages('fivethirtyeight') library(packagename) Access a downloaded R package library(fivethirtyeight) ?function_object_name Opens the help/documentation for the function or object ?seq rep(x, times, each) Repeat x a # times rep(5,8) seq(from,to,by) Sequence generation 2*5 name &lt;- value_output Assign value or output to a name squared_3 &lt;- 3^2 View(x) Open spreadsheet viewer of dataset View(fifa_audience) head(x) Print the first 6 rows of a dataset head(fifa_audience) dim(x) Print the dimensions (number of rows and columns) of a dataset dim(fifa_audience) names(x) Print the names of the variables in a dataset names(fifa_audience) $ Used to access one variable in a data set based on its name fifa_audience$confederation class(x) Print the class types argument or input class(fifa_audience$confederation) factor(x) Converts the argument or input to a factor class type (categorical variable) factor(fifa_audience$confederation) levels(x) Prints the unique categories of a factor levels(factor(fifa_audience$confederation)) "],["intro-to-data-visualization.html", "Topic 2 Intro to Data Visualization Learning Goals Benefits of Visualizations Glyphs Data Visualization Workflow + ggplot Additional exercises Appendix: R Functions", " Topic 2 Intro to Data Visualization Learning Goals Understand the Grammar of Graphics Use ggplot2 to create basic layers of graphics Understand the different basic univariate visualizations for categorical and quantitative variables You can download a template .Rmd of this activity here. Put this in a new folder called Day_02 in your folder for COMP_STAT_112. Benefits of Visualizations Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What method of analysis / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. Glyphs In its original sense, in archaeology, a glyph is a carved symbol. Heiroglyph Mayan glyph Data Glyph A data glyph is also a mark, e.g. The features of a data glyph encodes the value of variables. Some are very simple, e.g. a dot: Some combine different elements, e.g. a pointrange: Some are complicated, e.g. a dotplot: Components of Graphics Figure 2.1: Blood pressure readings from a random subset of the NHANES data set. frame: The position scale describing how data are mapped to x and y glyph: The basic graphical unit that represents one case. other terms used include mark and symbol. aesthetic: a visual property of a glyph such as position, size, shape, color, etc. may be mapped based on data values: smoker -&gt; color may be set to particular non-data related values: color is black facet: a subplot that shows one subset of the data rather than represent sex by shape, we could split into two subplots scale: A mapping that translates data values into aesthetics. example: never-&gt; pink; former-&gt; aqua; current-&gt; green guide: An indication for the human viewer of the scale. This allows the viewer to translate aesthetics back into data values. examples: x- and y-axes, various sorts of legends Eye Training for the Layered Grammar of Graphics Exercise 2.1 (Basic questions to ask of a data graphic) For your assigned graphic, discuss the following seven questions with your partner(s): What variables constitute the frame? What glyphs are used? What are the aesthetics for those glyphs? Which variable is mapped to each aesthetic? Which variable, if any, is used for faceting? Which scales are displayed with a guide? What raw data would be required for this plot, and what form should it be in? Here are the graphics examples, all taken from the New York Times website: Admissions gap Medicare hospital charges Football conferences Housing prices Baseball pitching Phillips curve School mathematics ratings Corporate taxes Glyph-Ready Data Note the mapping of data to aesthetics for Figure 2.1: sbp [Systolic Blood Pressure] -&gt; x dbp [Diastolic Blood Pressure] -&gt; y smoker -&gt; color sex -&gt; shape Glyph-ready data has this form: There is one row for each glyph to be drawn. The variables in that row are mapped to aesthetics of the glyph (including position). Table 2.1: A subset of the NHANES data set. sbp dbp sex smoker 112 55 male former 144 84 male never 143 84 female never 110 62 female never 121 72 female never 129 60 female never Data Visualization Workflow + ggplot Layers – Building up Complex Plots Using the ggplot2 package, we can create graphics by building up layers, each of which may have its own data, glyphs, aesthetic mapping, etc. As an example, let’s peel back the layers used to create Figure 2.1. The first layer just identifies the data set. It sets up a blank canvas, but does not actually plot anything: ggplot(data = Tmp) Next, we add a geometry layer to identify the mapping of data to aesthetics for each of the glyphs: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) Next, we can add some axes labels as guides: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) And, finally, we can change the scale of the color used for smoker status: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) + scale_color_manual(values = c(&quot;#F8766D&quot;, &quot;#00BFC4&quot;, &quot;#00BA38&quot;)) If instead we wanted to facet into columns based on smoker status, we could add another layer for that: ggplot(data = Tmp) + geom_point(mapping = aes(x = sbp, y = dbp, shape = sex, color = smoker), size = 5, alpha = .8) + xlab(&quot;Systolic BP&quot;) + ylab(&quot;Diastolic BP&quot;) + scale_color_manual(values = c(&quot;#F8766D&quot;, &quot;#00BFC4&quot;, &quot;#00BA38&quot;)) + facet_grid(. ~ smoker) For more information on all of the different types of layers we can add to graphics, see the ggplot2 reference page and the data visualization with ggplot2 cheat sheet. Getting Started There’s no end to the number and type of visualizations you could make. Thus the process can feel overwhelming. FlowingData makes good recommendations for data viz workflow: Ask the data questions. Simple research questions will guide the types of visualizations that you should construct. Start with the basics and work incrementally. Before constructing complicated or multivariate or interactive graphics, start with simple visualizations. An understanding of the simple patterns provides a foundation upon which to build more advanced analyses and visualizations. This incremental process works particularly well with the layered grammar of graphics in ggplot. Focus. Reporting a large number of visualizations can overwhelm the audience and obscure your conclusions. Instead, pick out a focused yet comprehensive set of visualizations. Here is an example of one dataset visualized 25 different ways, each with a different focus and interpretation, and what can happen if you let the data ramble on without a focus. In this course we’ll largely construct visualizations using the ggplot function in RStudio. Though the ggplot learning curve can be steep, its “grammar” is intuitive and generalizable once mastered. The ggplot plotting function is stored in the ggplot2 package: library(ggplot2) The best way to learn about ggplot is to just play around. Focus on the patterns and potential of their application. It will be helpful to have the RStudio Data Visualization cheat sheet handy as you complete this activity. An Example The “Bechdel test”, named after cartoonist Alison Bechdel, tests whether movies meet the following criteria: There are \\(\\ge\\) 2 (named) female characters; these women talk to each other… about something other than a man. In the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package: library(fivethirtyeight) data(bechdel) head(bechdel) year imdb title clean_test binary budget_2013 domgross_2013 intgross_2013 2013 tt1711425 21 &amp; Over notalk FAIL 13000000 25682380 42195766 2012 tt1343727 Dredd 3D ok PASS 45658735 13611086 41467257 2013 tt2024544 12 Years a Slave notalk FAIL 20000000 53107035 158607035 2013 tt1272878 2 Guns notalk FAIL 61000000 75612460 132493015 2013 tt0453562 42 men FAIL 40000000 95020213 95020213 2013 tt1335975 47 Ronin men FAIL 225000000 38362475 145803842 Exercise 2.2 Before diving into any visualizations of these data, we first must understand its structure and contents. Discuss the following: What are the units of observation and how many units are in this sample? What are the levels of the clean_test and binary categorical variables? Check out the codebook for bechdel (?bechdel). What’s the difference between domgross_2013 and domgross? Solution #units of observation are movies; there are 1794 movies in this sample dim(bechdel) ## [1] 1794 15 #clean_test has values of &quot;nowomen&quot;, &quot;notalk&quot;, &quot;men&quot;, &quot;dubious&quot;, &quot;ok&quot; #View(bchedel) and look at values or summarize like below table(bechdel$clean_test) ## ## nowomen notalk men dubious ok ## 141 514 194 142 803 levels(bechdel$clean_test) ## [1] &quot;nowomen&quot; &quot;notalk&quot; &quot;men&quot; &quot;dubious&quot; &quot;ok&quot; #binary has values of PASS or FAIL table(bechdel$binary) ## ## FAIL PASS ## 991 803 levels(factor(bechdel$binary)) ## [1] &quot;FAIL&quot; &quot;PASS&quot; # domgross_2013 is the domestic gross in US dollars but it is inflation adjusted with respect to 2013 #?bechdel Exercise 2.3 We’ll consider univariate visualizations of the clean_test and budget_2013 variables. Discuss the following: What features would we like a visualization of the categorical clean_test variable to capture? What features would we like a visualization of the quantitative budget_2013 variable to capture? Solution capture the frequency of each way a movie can fail or pass the Bechdel test capture the typical budget as well as how much variation there is across movies and if there are any outliers Categorical univariate visualization We begin by stating a clear research question: Among the movies in our sample, what fraction pass the Bechdel test? Among those that fail the test, in which way do they fail (e.g., there are no women, there are women but they only talk about men,…)? To answer the above research question, we can explore the categorical clean_test variable. A table provides a simple summary of the number of movies that fall into each clean_test category: table(bechdel$clean_test) ## ## nowomen notalk men dubious ok ## 141 514 194 142 803 Exercise 2.4 Examine the table of clean_test data, and try to interpret it. What insights does it provide about the original research question? Solution Among the categories, the “ok” category was most frequent, meaning that 803 of the 1794 movies in the sample passed the Bechdel Test. However, among those 991 movies that did not pass the test, most of them (514 of them) did not pass because the women did not talk. Because clean_test is a categorical variable, a bar chart provides an appropriate visualization of this table. In examining the bar chart, keep your eyes on the following. variability: Are cases evenly spread out among the categories or are some categories more common than others? contextual implications: In the context of your research, what do you learn from the bar chart? How would you describe your findings to a broad audience? Exercise 2.5 Try out the code below that builds up from a simple to a customized bar chart. At each step determine how each piece of code contributes to the plot. # plot 1: set up a plotting frame (a blank canvas) ggplot(bechdel, aes(x = clean_test)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar() + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar(color = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = clean_test)) + geom_bar(fill = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) Solution # plot 1: set up a plotting frame (a blank canvas) ggplot(bechdel, aes(x = clean_test)) # plot 2: Added bars that reflect the count or frequency of the movies within each category ggplot(bechdel, aes(x = clean_test)) + geom_bar() # plot 3: Added/changed the text labels for the x and y axes ggplot(bechdel, aes(x = clean_test)) + geom_bar() + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 4: Changed the outline color of the bars to purple ggplot(bechdel, aes(x = clean_test)) + geom_bar(color = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) # plot 5: Changed the fill color of the bars to purple ggplot(bechdel, aes(x = clean_test)) + geom_bar(fill = &quot;purple&quot;) + labs(x = &quot;Outcome of Bechdel Test&quot;, y = &quot;Number of movies&quot;) Exercise 2.6 Summarize the visualization: what did you learn about the distribution of the clean_test variable? Solution Among the categories, the “ok” category was most frequent. However, among those movies that did not pass the test, most of them did not pass because the women in the movie did not talk. Exercise 2.7 Let’s return to our research question: What percent of movies in the sample pass the Bechdel test? Among those that fail the test, in which way do they fail? Solution table(bechdel$binary) ## ## FAIL PASS ## 991 803 803/(991 + 803) ## [1] 0.4476031 table(bechdel$clean_test)[1:4]/991 ## ## nowomen notalk men dubious ## 0.1422805 0.5186680 0.1957619 0.1432896 Quantitative univariate visualization To motivate quantitative visualizations, consider a second research question Among the movies in our sample, what’s the range of budgets? What’s the typical budget? The largest/smallest? We can answer the above research question by exploring the quantitative budget_2013 variable. Quantitative variables require different summary tools than categorical variables. We’ll explore two methods for graphing quantitative variables: histograms and density plots. Both of these has strengths/weaknesses in helping us visualize the distribution of observed values. In their examination, keep your eyes on the following. center: Where’s the center of the distribution? What’s a typical value of the variable? variability: How spread out are the values? A lot or a little? shape: How are values distributed along the observed range? Is the distribution symmetric, right-skewed, left-skewed, bi-modal, or uniform (flat)? outliers: Are there any outliers, ie. values that are unusually large/small relative to the bulk of other values? contextual implications: Interpret these features in the context of your research. How would you describe your findings to a broad audience? Histograms Histograms are constructed by (1) dividing up the observed range of the variable into ‘bins’ of equal width; and (2) counting up the number of cases that fall into each bin. Exercise 2.8 Try out the code below. At each step determine how each piece of code contributes to the plot. # plot 1: set up a plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(fill = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 6: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 500000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 7: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 200000000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) Solution # plot 1: set up a plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: Added bars the represent the count of movies within budget intervals ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() # plot 3: Updated the text on the x and y axis labels ggplot(bechdel, aes(x = budget_2013)) + geom_histogram() + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 4: The outline of the bars is now white ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 5: The fill of the bars is now white ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(fill = &quot;white&quot;) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 6: The width of the interval or bin is decreased to $500,000 ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 500000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) # plot 7: The width of the interval or bin is increased to $200,000,000 ggplot(bechdel, aes(x = budget_2013)) + geom_histogram(color = &quot;white&quot;, binwidth = 200000000) + labs(x = &quot;Budget ($)&quot;, y = &quot;Number of movies&quot;) Exercise 2.9 Summarize the visualizations. Describe the problem in choosing a bin width that’s not too wide and not too narrow, but just right. What did you learn about the distribution of the budget_2013 variable? Why does adding color = \"white\" improve the visualization? Solution If the intervals (bars, bins) are too wide, then we lose information about the variation in the budget. Take it to the extreme with just 1 bar with the bar ranging from the minimum to the maximum. If the intervals are too small, then we have the frequency of the bars go up and down quite a bit. We might say that the shape of the bars isn’t very smooth. Most of the movies have small budgets; the majority less of budgets are less than $100,000,000 (in 2013 dollars) but there are some movies with upwards of $300,000,000 (in 2013 dollars). Adding the white outline to the bars adds contrast and helps the viewer see where each bar starts and ends. Density plots Density plots are essentially smooth versions of the histogram. Instead of sorting cases into discrete bins, the “density” of cases is calculated across the entire range of values. The greater the number of cases, the greater the density! The density is then scaled so that the area under the density curve always equals 1 and the area under any fraction of the curve represents the fraction of cases that lie in that range. Exercise 2.10 Try the following code and assess what each line does. # plot 1: set up the plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density() # plot 3: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density() + labs(x = &quot;Budget ($)&quot;) # plot 4: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density(color = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) # plot 5: what changed / how did we change it? ggplot(bechdel, aes(x = budget_2013)) + geom_density(fill = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) Solution # plot 1: set up the plotting frame ggplot(bechdel, aes(x = budget_2013)) # plot 2: add a smooth curve (shape of the histogram) ggplot(bechdel, aes(x = budget_2013)) + geom_density() # plot 3: updated the x axis label ggplot(bechdel, aes(x = budget_2013)) + geom_density() + labs(x = &quot;Budget ($)&quot;) # plot 4: changed the color of the curve to red ggplot(bechdel, aes(x = budget_2013)) + geom_density(color = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;) # plot 5: filled the area under the curve to be red ggplot(bechdel, aes(x = budget_2013)) + geom_density(fill = &quot;red&quot;) + labs(x = &quot;Budget ($)&quot;)   Exercise 2.11 The histogram and density plot both allow us to visualize the distribution of a quantitative variable. What are the pros/cons of each? Discuss. Additional exercises Exercise 2.12 In July 2016, fivethirtyeight.com published the article “Hip-Hop is Turning on Donald Trump””. You can find the supporting data table hiphop_cand_lyrics in the fivethirtyeight package: library(fivethirtyeight) data(hiphop_cand_lyrics) What are the cases in this data set? Use RStudio functions to: summarize the number of cases in hiphop_cand_lyrics examine the first cases of hiphop_cand_lyrics list out the names of all variables in hiphop_cand_lyrics Exercise 2.13 Let’s start our investigation of hip hop data by asking “Who?”; that is, let’s identify patterns in which 2016 presidential candidates popped up in hip hop lyrics. Use an RStudio function to determine the category labels used for the candidate variable. Use table to construct a table of the number of cases that fall into each candidate category. Construct a single plot that allows you to investigate the prevalence of each candidate in hip hop. Make the following modifications: - change the axis labels - change the fill colors Summarize your findings about the 2016 candidates in hip hop. Exercise 2.14 Next, consider the release dates of the hip hop songs. Construct a histogram of the release dates with the following modifications: - change the fill color of the bins - change the bin width to a meaningful size Construct a density plot of the release dates with the following modifications: - change the fill color Summarize your findings about release date Exercise 2.15 No class will teach you everything you need to know about RStudio or programming in general. Thus, being able to find help online is an important skill. To this end, make a single visualization that incorporates the following modifications to your density plot from above. This will require a little Googling and/or use of the visualization cheat sheet. Add a title or caption. Add transparency to the fill color. Calculate the mean (ie. average) release date and median release date: mean(hiphop_cand_lyrics$album_release_date) median(hiphop_cand_lyrics$album_release_date) Add two vertical lines to your plot: one representing the mean and the other representing the median. Use two different colors and/or line types. Change the limits of the x-axis to range from 1980-2020. Appendix: R Functions Basic R functions Function/Operator Action Example table(x) Frequency count of categories in x table(bechdel$clean_test) mean(x) Average or mean of numeric values in x mean(bechdel$budget_2013) median(x) Median of numeric values in x median(bechdel$budget_2013) ggplot2 foundation functions Function/Operator Action Example ggplot(data) Create a blank canvas that can create a visualization based on data ggplot(data = bechdel) ggplot(data,aes()) Create a blank canvas that can create a visualization based on data with aesthetic mapping ggplot(data = bechdel, aes(x = budget_2013)) + geom_bar(aes(x)) Add a bar plot geom_bar(aes(x = clean_test)) + geom_point(aes(x,y)) Add a scatterplot geom_bar(aes(x = year,y=budget_2013)) + geom_histogram(aes(x)) Add a histogram geom_histogram(aes(x = budget_2013)) + geom_density(aes(x)) Add a density plot geom_density(aes(x = budget_2013)) more ggplot2 functions Function/Operator Action Example + xlab() Add an label for the x-axis xlab('X axis') + ylab() Add an label for the y-axis ylab('Y axis') + labs(x,y) Add labels for the x and y-axis labs(y = 'Y axis', x = 'X axis') + scale_color_manual() Set a color palette for the color aesthetic scale_color_manual(values = c('blue','red')) + facet_grid() Create subplots based on categorical variables, groupvar_along_yaxis ~ groupvar_along_xaxis + facet_grid(. ~ smoker) ggplot2 aesthetic mapping options Function/Operator Action Example x variable for x-axis aes(x = clean_test) y variable for y-axis aes(y = budget_2013) color variable for colors of points or strokes/outline aes(color = clean_test) fill variable for fill of bars or shapes aes(fill = clean_test) size variable for size shapes aes(size = budget_2013) shape variable for shape type aes(shape = clean_test) "],["effective-visualizations.html", "Topic 3 Effective Visualizations Learning Goals Effective Visualizations Exercises", " Topic 3 Effective Visualizations Learning Goals Understand and apply the guiding principles of effective visualizations You can download a template .Rmd of this activity here. Put the file in a Day_03 folder within your COMP_STAT_112 folder. Effective Visualizations Benefits of Visualizations Visualizations help us understand what we’re working with: What are the scales of our variables? Are there any outliers, i.e. unusual cases? What are the patterns among our variables? This understanding will inform our next steps: What method of analysis / model is appropriate? Once our analysis is complete, visualizations are a powerful way to communicate our findings and tell a story. Analysis of Graphics There is not one right way to visualize a data set. However, there are guiding principles that distinguish between “good” and “bad” graphics. One of the best ways to learn is by reading graphics and determining which ways of arranging thing are better or worse. So before jumping directly into theoretical principles, let’s try some critical analysis on specific examples. Exercise 3.1 For your assigned graphics or sets of graphics, identify the following: the story the graphic is aiming to communicate to the audience effective features of the graphic areas for improvement Figure 3.1: Source: http://viz.wtf/ Figure 3.2: Source: N. Yau, Visualize This, 2011, p. 223-225. Figure 3.3: Source: N. Yau, Visualize This, 2011, p. 242. Figure 3.4: Gun deaths. Figure 3.5: Source: N. Yau, Visualize This, 2011, p. 150. Figure 3.6: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 142. Figure 3.7: Source: S. Few, Now You See It, 2009, p. 45. Figure 3.8: Climate change. Figure 3.9: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 48. Figure 3.10: Diamond data visualizations from R for Data Science, 2017 Figure 3.11: Source: S. Few, Now You See It, 2009, p. 37. Figure 3.12: Source: N. Yau, Visualize This, 2011, p. 249. Figure 3.13: Source: S. Few, Now You See It, 2009, p. 61. Figure 3.14: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 68. Figure 3.15: Source: C. N. Knaflic, Storytelling with Data, 2015, p. 81. Figure 3.16: Source: http://viz.wtf/ Figure 3.17: Source: A. Cairo, The Functional Art, 2013, p. 340. Figure 3.18: Source: N. Yau, Visualize This, 2011, p. 220. More examples: FlowingData: blog and Best visualizations of 2016 WTF Visualizations Properties of Effective Visualizations Storytelling / Context Remember … Graphics are designed by the human expert (you!) in order to reveal information that’s in the data. Your choices depend on what information you want to reveal and convey. So before you complete a graphic, you should clearly identify what story you want the graphic to tell to the audience, and double check that this story is being told.1 Here is a nice example from FiveThirtyEight where each chart tells a story in answer to a particular question about the [then] upcoming German election. Here is an interactive visualization that tells a story about gun violence. Another important contextual question to ask is whether the graphic is for an explanatory (explain why) or exploratory (discovering something new) analysis. Ethics Michael Correll of Tableau Research writes “Data visualizations have a potentially enormous influence on how data are used to make decisions across all areas of human endeavor.” in his article from 2018. Visualization operates at the intersection of science, communication, and data science &amp; statistics. There are professional standards of ethics in these fields of the power they hold over other people as it relates to making data-driven decisions. Correll describes three ethical challenges of visualization work: Visibility Make the invisible visible Visualize hidden labor Visualize hidden uncertainty Visualize hidden impacts Visualizations can be complex and one must consider the accessibility of the visualization to the audience. Managing complexity is, therefore, a virtue in design that can be in direct opposition with the desire to visualize the invisible. Privacy Collect data with empathy Encourage Small Data Anthropomorphize data Obfuscate data to protect privacy Restricting the type and amount of data that is collected has a direct impact on the quality and scope of the analyses hence obligation to provide context, and analytical power can, therefore, stand in direct opposition to the empathic collection of data. Power Challenge structures of power Support data due process. Act as data advocates. Pressure unethical analytical behavior. The goal of promoting truth and suppressing falsehood may require amplifying existing structures of expertise and power, and suppressing conflicts for the sake of rhetorical impact. At a minimum, you should always Present data in a way that avoids misleading the audience. Always include your data source. Doing so attributes credit for labor, provides credibility to your work, and provides context for your graphic. Design A basic principle is that a graphic is about comparison. Good graphics make it easy for people to perceive things that are similar and things that are different. Good graphics put the things to be compared “side-by-side,” that is, in perceptual proximity to one another. The following aesthetics are listed in roughly descending order of human ability to perceive and compare nearby objects:2 Position Length Angle Direction Shape (but only a very few different shapes) Area Volume Shade Color Color is the most difficult, because it is a 3-dimensional quantity. We are pretty good at color gradients, but discrete colors must be selected carefully. We need to be particularly aware of red/green color blindness issues. Visual perception and effective visualizations Here are some facts to keep in mind about visual perception from Now You See It: Visual perception is selective, and our attention is often drawn to constrasts from the norm. Figure 3.19: Our attention is drawn to contrasts to the norm. What stands out in this example image?, which is originally from C. Ware, Information Visualization: Perception for Design, 2004? Source: S. Few, Now You See It, 2009, p. 33. Implication: We should design visualizations so that the features we want to highlight stand out in contrast from those that are not worth the audience’s attention. Our eyes are drawn to familiar patterns. We see what we know and expect. Figure 3.20: Do you see anything embedded in this rose image from coolbubble.com? Source: S. Few, Now You See It, 2009, p. 34. Implication: Visualizations work best when they display information as patterns that familiar and easy to spot. Memory plays an important role in human cognition, but working memory is extremely limited. Implication: Visualizations must serve as external aids to augment working memory. If a visualization is unfamiliar, then it won’t be as effective. Gestalt principles The Gestalt principles (more info here or here) were developed by psychologists including Max Wertheimer in the early 1900s to explain how humans perceive organized patterns and objects. In a design setting, they help us understand how to incorporate preattentive features into visualizations. The figure below shows some preattentive features, all of which are processed prior to conscious attention (“at a glance”) and can help the reader focus on relevant information in a visualization. Figure 3.21: Preattentive features based on the Gestalt principles. Source: I. Meirelles, Design for Information, 2013, p. 23. Other design tips from Visualize This and Storytelling with Data: Put yourself in a reader’s shoes when you design data graphics. What parts of the data need explanation? We can minimize ambiguity by providing guides, label axes, etc. Data graphics are meant to shine a light on your data. Try to remove any elements that don’t help you do that. That is, eliminate “chart junk” (distracting and unnecessary adornments). Vary color and stroke styles to emphasize the parts in your graphic that are most important to the story you’re telling It is easier to judge length than it is to judge area or angles Be thoughtful about how your categories (levels) are ordered for categorical data. There may be a natural ordering Pie charts, donut charts, and 3D are evil Basic Rules for Constructing Graphics Instead of memorizing which plot is appropriate for which situation, it’s best to simply start to recognize patterns in constructing graphics: Each quantitative variable requires a new axis. Each categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping). For visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency. Still to Come While we will not cover all of visualization theory – you can take a whole course on that at Macalester and it is a proper field in its own right – we will touch on the following types of visualizations in the coming weeks: Univariate and bivariate visualizations Visualizations of higher dimensional data Temporal structures: timelines and flows Hierarchical structures: trees Relational structures: networks Spatial structures: maps Spatio-temporal structures Textual structures Interactive graphics (e.g., gganimate, shiny) Exercises Exercise 3.2 Consider one of the more complicated data graphics listed at (http://mdsr-book.github.io/exercises.html#exercise_25): What story does the data graphic tell? What is the main message that you take away from it? Can the data graphic be described in terms of the Grammar of Graphics (frame, glyphs, aesthetics, facet, scale, guide)? If so, please describe. Critique and/or praise the visualization choices made by the designer. Do they work? Are they misleading? Thought-provoking? Brilliant? Are there things that you would have done differently? Justify your response. A “negative” result (e.g., there is no correlation between two variables) is a perfectly fine story to tell.↩︎ This list is from B. S. Baumer, D. T. Kaplan, and N. J. Horton, Modern Data Science with R, 2017, p. 15. For more of the theory of perception, see also W.S. Cleveland and R. McGill, “Graphical perception: Theory, experimentation, and application to the development of graphical methods,” Journal of the American Statistical Association, 1984.↩︎ "],["bivariate-visualizations.html", "Topic 4 Bivariate Visualizations Learning Goals Bivariate Visualizations Appendix: R Functions", " Topic 4 Bivariate Visualizations Learning Goals Identify appropriate types of bivariate visualizations, depending on the type of variables (categorical, quantitative) Create basic bivariate visualizations based on real data You can download a template .Rmd of this activity here. Put the file in a Day_04 folder within your COMP_STAT_112 folder. Bivariate Visualizations The outcome of the 2016 presidential election surprised many people. In this activity we will analyze data from the 2016 presidential election. To better understand it ourselves, we’ll explore county-level election outcomes and demographics. The data set, prepared by Alicia Johnson, combines 2008/2012/2016 county-level election returns from Tony McGovern on github, county-level demographics from the df_county_demographics data set within the choroplethr R package, and red/purple/blue state designations from http://www.270towin.com/. Getting to know the dataset Exercise 4.1 Begin by loading the data from “https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv” and getting to know the data. Follow the prompts below to guide you. # Load data from &quot;https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv&quot; elect &lt;- read_csv(&quot;https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv&quot;) # Check out the first rows of elect. What are the units of observation? # How much data do we have? # What are the names of the variables? Solution # Load data from &quot;https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv&quot; elect &lt;- read_csv(&quot;https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv&quot;) # Check out the first rows of elect. # The units of observation are county election results # The variables are county name, vote counts for parties and total for presidential elections, and more head(elect) ## # A tibble: 6 × 34 ## county total…¹ dem_2…² gop_2…³ oth_2…⁴ total…⁵ dem_2…⁶ gop_2…⁷ oth_2…⁸ total…⁹ dem_2…˟ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Walker Cou… 28652 7420 20722 510 28497 6551 21633 313 29243 4486 ## 2 Bullock Co… 5415 4011 1391 13 5318 4058 1250 10 4701 3530 ## 3 Calhoun Co… 49242 16334 32348 560 46240 15500 30272 468 47376 13197 ## 4 Barbour Co… 11630 5697 5866 67 11459 5873 5539 47 10390 4848 ## 5 Fayette Co… 7957 1994 5883 80 7912 1803 6034 75 8196 1358 ## 6 Baldwin Co… 81413 19386 61271 756 84988 18329 65772 887 94090 18409 ## # … with 23 more variables: gop_2016 &lt;dbl&gt;, oth_2016 &lt;dbl&gt;, perdem_2016 &lt;dbl&gt;, ## # perrep_2016 &lt;dbl&gt;, winrep_2016 &lt;lgl&gt;, perdem_2012 &lt;dbl&gt;, perrep_2012 &lt;dbl&gt;, ## # winrep_2012 &lt;lgl&gt;, perdem_2008 &lt;dbl&gt;, perrep_2008 &lt;dbl&gt;, winrep_2008 &lt;lgl&gt;, ## # region &lt;dbl&gt;, total_population &lt;dbl&gt;, percent_white &lt;dbl&gt;, percent_black &lt;dbl&gt;, ## # percent_asian &lt;dbl&gt;, percent_hispanic &lt;dbl&gt;, per_capita_income &lt;dbl&gt;, median_rent &lt;dbl&gt;, ## # median_age &lt;dbl&gt;, polyname &lt;chr&gt;, abb &lt;chr&gt;, StateColor &lt;chr&gt;, and abbreviated variable ## # names ¹​total_2008, ²​dem_2008, ³​gop_2008, ⁴​oth_2008, ⁵​total_2012, ⁶​dem_2012, ⁷​gop_2012, … # There are 3,112 counties and 34 variables dim(elect) ## [1] 3112 34 # See the long list below names(elect) ## [1] &quot;county&quot; &quot;total_2008&quot; &quot;dem_2008&quot; &quot;gop_2008&quot; ## [5] &quot;oth_2008&quot; &quot;total_2012&quot; &quot;dem_2012&quot; &quot;gop_2012&quot; ## [9] &quot;oth_2012&quot; &quot;total_2016&quot; &quot;dem_2016&quot; &quot;gop_2016&quot; ## [13] &quot;oth_2016&quot; &quot;perdem_2016&quot; &quot;perrep_2016&quot; &quot;winrep_2016&quot; ## [17] &quot;perdem_2012&quot; &quot;perrep_2012&quot; &quot;winrep_2012&quot; &quot;perdem_2008&quot; ## [21] &quot;perrep_2008&quot; &quot;winrep_2008&quot; &quot;region&quot; &quot;total_population&quot; ## [25] &quot;percent_white&quot; &quot;percent_black&quot; &quot;percent_asian&quot; &quot;percent_hispanic&quot; ## [29] &quot;per_capita_income&quot; &quot;median_rent&quot; &quot;median_age&quot; &quot;polyname&quot; ## [33] &quot;abb&quot; &quot;StateColor&quot; Exercise 4.2 Explore the win column: The winrep_2016 variable indicates whether or not the Republican (Trump) won the county in 2016, thus is categorical. Let’s construct both numerical and visual summaries of Trump wins/losses. (Before you do, what do you anticipate?) # Construct a table (a numerical summary) of the number of counties that Trump won/lost table(xxx) # fill in the xxx # Attach a library needed for ggplots library(xxx) # Construct a bar chart (a visual summary) of this variable. ggplot(xxx, aes(xxx)) + geom_xxx() Solution # Construct a table (a numerical summary) of the number of counties that Trump won/lost table(elect$winrep_2016) ## ## FALSE TRUE ## 487 2625 # Attach a library needed for ggplots library(ggplot2) # Construct a bar chart (a visual summary) of this variable. ggplot(elect, aes(x = winrep_2016)) + geom_bar() Exercise 4.3 (Explore Vote Percentages) The perrep_2016 variable includes a bit more detail about Trump’s support in each county. Since it’s quantitative we need different tools to visually explore the variability in perrep_2016. To this end, construct &amp; interpret both a histogram and density plot of perrep_2016. (Before you do, what do you anticipate?) # histogram ggplot(elect, aes(xxx)) + geom_xxx(color = &quot;white&quot;) # density plot ggplot(elect, aes(xxx)) + geom_xxx() Solution # histogram ggplot(elect, aes(x = perrep_2016)) + geom_histogram(color = &quot;white&quot;) # density plot ggplot(elect, aes(x = perrep_2016)) + geom_density() The vast majority of counties in the U.S. had a Republican majority vote (&gt; 50%) within that county. Thus far, we have a good sense for how Trump’s support varied from county to county. We don’t yet have a good sense for why. What other variables (ie. county features) might explain some of the variability in Trump’s support from county to county? Which of these variables do you think will be the best predictors of support? The worst? Solution Maybe past election history and information about the people that live there and the social culture and values. Let’s see… Background on visualizing relationships We’ve come up with a list of variables that might explain some of the variability in Trump’s support from county to county. Thus we’re interested in the relationship between: response variable: the variable whose variability we would like to explain (Trump’s percent of the vote) predictors: variables that might explain some of the variability in the response (percent white, per capita income, state color, etc) Our goal is to construct visualizations that allow us to examine/identify the following features of the relationships among these variables: relationship trends (direction and form) relationship strength (degree of variability from the trend) outliers in the relationship Before constructing visualizations of the relationship among any set of these variables, we need to understand what features these should have. As with univariate plots, the appropriate visualization also depends upon whether the variables are quantitative or categorical. Recall some basic rules in constructing graphics: Each quantitative variable requires a new axis. (We’ll discuss later what to do when we run out of axes!) Each categorical variable requires a new way to “group” the graphic (eg: using colors, shapes, separate facets, etc to capture the grouping) For visualizations in which overlap in glyphs or plots obscures the patterns, try faceting or transparency. Exercise 4.4 (Mock-Ups) Consider a subset of the variables: county abb perrep_2016 perrep_2012 winrep_2016 StateColor Elbert County CO 73.53 72.52 TRUE blue Rockdale County GA 35.82 41.37 FALSE purple Clay County MN 46.55 44.91 TRUE blue McDonald County MO 80.15 72.84 TRUE purple Alcorn County MS 79.95 75.11 TRUE red Roger Mills County OK 87.94 83.75 TRUE red In groups, sketch on paper a mock-up of a visualization of the relationship between the given pair of variables (i.e., what type of chart is appropriate to demonstrate the relationship?): The relationship between perrep_2016 (the response) and perrep_2012 (the predictor). The relationship between perrep_2016 (the response) and StateColor (the predictor). Think: how might we modify the below density plot of perrep_2016 to distinguish between counties in red/purple/blue states? ggplot(elect, aes(x = perrep_2016)) + geom_density() The relationship between Trump’s county-levels wins/losses winrep_2016 (the response) and StateColor (the predictor). Think: how might we modify the below bar plot of winrep_2016 to distinguish between counties in red/purple/blue states? ggplot(elect, aes(x = winrep_2016)) + geom_bar() Visualizing quantitiative vs quantitative relationships Let’s start by exploring the relationship between Trump’s 2016 support (perrep_2016) and Romney’s 2012 support (perrep_2012), both quantitative variables. Exercise 4.5 (Scatterplots and Glyphs) Both perrep_2016 and perrep_2012 are quantitative, thus require their own axes. Traditionally, the response variable (what we are trying to predict or explain) is placed on the y-axis. Once the axes are set up, each case is represented by a “glyph” at the coordinates defined by these axes. Make a scatterplot of perrep_2016 vs perrep_2012 with different glyphs: points or text. # just a graphics frame ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) # add a layer with &quot;point&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() # add a layer with symbol glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point(shape = 3) # add a layer with &quot;text&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_text(aes(label = abb)) Solution # just a graphics frame ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) # add a layer with &quot;point&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() # add a layer with symbol glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point(shape = 3) # add a layer with &quot;text&quot; glyphs ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_text(aes(label = abb)) ## Warning: Removed 398 rows containing missing values (geom_text). Summarize the relationship between the Republican candidates’ support in 2016 and 2012. Be sure to comment on: - the strength of the relationship (weak/moderate/strong) - the direction of the relationship (positive/negative) - outliers (In what state do counties deviate from the national trend? Explain why this might be the case) Solution There is a strong positive relationship between the Republican support from 2012 to 2016, meaning that if a county highly favors a Republican candidate in 2012, they were likely to highly favor a Republican in 2016. Counties in Utah seems to not quite follow this pattern with lower support in 2016 than what you’d expect given the support in 2012. This is because the 2012 candidate was from Utah (data context!). Exercise 4.6 (Capture the Trend with 'smooths') The trend of the relationship between perrep_2016 and perrep_2012 is clearly positive and (mostly) linear. We can highlight this trend by adding a model “smooth” to the plot. Add a layer with a model smooth: ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth() Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth()   Construct a new plot that contains the model smooth but does not include the individual cases (eg: point glyphs). Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_smooth() Notice that there are gray bands surrounding the blue model smooth line. What do these gray bars illustrate/capture and why are they widest at the “ends” of the model? Solution There are fewer data points at the “ends” so there is more uncertainty about the relationship. By default, geom_smooth adds a smooth, localized model line. To examine the “best” linear model, we can specify method=\"lm\": ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth(method = &quot;lm&quot;) Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point() + geom_smooth(method = &quot;lm&quot;) Exercise 4.7 (Modify the Scatterplots) As with univariate plots, we can change the aesthetics of scatterplots. Add appropriate axis labels to your scatterplot. Label the y-axis “Trump 2016 support (%)” and label the x-axis “Romney 2012 support (%)”. Change the color of the points. Add some transparency to the points. NOTE: alpha can be between 0 (complete transparency) and 1 (no transparency). Why is transparency useful in this particular graphic? Solution ggplot(elect, aes(y = perrep_2016, x = perrep_2012)) + geom_point(color = &quot;red&quot;, alpha = 0.1) + labs(x = &quot;Romney 2012 support (%)&quot;, y = &quot;Trump 2016 support (%)&quot;) + theme_classic() Exercise 4.8 (More Scatterplots) 2012 results aren’t the only possible predictor of 2016 results. Consider two more possibilities. Construct a scatterplot of perrep_2016 and median_rent. Summarize the relationship between these two variables. Construct a scatterplot of perrep_2016 and percent_white. Summarize the relationship between these two variables. Among perrep_2012, median_rent and percent_white, which is the best predictor of perrep_2016? Why? Visualizing quantitative vs. categorical relationships Consider a univariate histogram and density plot of perrep_2016: To visualize the relationship between Trump’s 2016 support (perrep_2016) and the StateColor (categorical) we need to incorporate a grouping mechanism. Work through the several options below. Exercise 4.9 (Side-by-Side Density Plots) We can show density plots for each state color next to each other: Construct a density plot for each group. ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density() Notice that ggplot randomly assigns colors to group based on alphabetical order. In this example, the random color doesn’t match the group itself (red/purple/blue)! We can fix this: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density() + scale_fill_manual(values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;)) The overlap between the groups makes it difficult to explore the features of each. One option is to add transparency to the density plots: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;)) Yet another option is to separate the density plots into separate “facets” defined by group: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_density(alpha = 0.5) + scale_fill_manual(values = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;)) + facet_wrap(~ StateColor) Exercise 4.10 (Side-by-Side Histograms) Let’s try a similar strategy using histograms to illustrate the relationship between perrep_2016 and StateColor. Start with the default histogram: ggplot(elect, aes(x = perrep_2016, fill = StateColor)) + geom_histogram(color = &quot;white&quot;) That’s not very helpful! Separate the histograms into separate facets for each StateColor group. Exercise 4.11 (More Options!) Density plots and histograms aren’t the only type of viz we might use… Construct side-by-side violins and side-by-side boxplots (see description below). # violins instead ggplot(elect, aes(y = perrep_2016, x = StateColor)) + geom_violin() # boxes instead ggplot(elect, aes(y = perrep_2016, x = StateColor)) + geom_boxplot() Box plots are constructed from five numbers - the minimum, 25th percentile, median, 75th percentile, and maximum value of a quantitative variable: In the future, we’ll typically use density plots instead of histograms, violins, and boxes. Explain at least one pro and one con of the density plot. Exercise 4.12 Let’s not forget the most important purpose of these visualizations! Summarize the relationship between Trump’s 2016 county-level support among red/purple/blue states. Visualizing categorical vs categorical relationships Finally, suppose that instead of Trump’s percentage support, we simply want to explore his county-level wins/losses: Specifically, let’s explore the relationship between winrep_2016 and StateColor, another categorical variable. Exercise 4.13 (Side-by-side bar plots) We saw above that we can incorporate a new categorical variable into a visualization by using grouping features such as color or facets. Let’s add information about StateColor to our bar plot of winrep_2016. Construct the following 4 bar plot visualizations. # a stacked bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar() # a side-by-side bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar(position = &quot;dodge&quot;) # a proportional bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar(position = &quot;fill&quot;) # faceted bar plot ggplot(elect, aes(x = StateColor, fill = winrep_2016)) + geom_bar() + facet_wrap(~winrep_2016) Name one pro and one con of using the “proportional bar plot” instead of one of the other three options. What’s your favorite bar plot from part (a)? Why? Practice Hot Dogs In the annual Nathan’s hot dog eating contest, people compete to eat as many hot dogs as possible in ten minutes. Data on past competitions were compiled by Nathan Yau for “Visualize This: The FlowingData Guide to Design, Visualization, and Statistics”: hotdogs &lt;- read_csv(&quot;http://datasets.flowingdata.com/hot-dog-contest-winners.csv&quot;) Exercise 4.14 Address the following: Construct a visualization of the winning number of hot dogs by year. THINK: Which is the response variable? Temporal trends are often visualized using a line plot. Add a geom_line() layer to your plot from part (a). Summarize your observations about the temporal trends in the hot dog contest. Exercise 4.15 All but two of the past winners are from the U.S. or Japan: table(hotdogs$Country) ## ## Germany Japan Mexico United States ## 1 9 1 20 Use the following code to filter out just the winners from U.S. and Japan and name this hotdogsSub. (Don’t worry about the code itself - we’ll discuss similar syntax later in the semester!) library(dplyr) hotdogsSub &lt;- hotdogs %&gt;% filter(Country %in% c(&quot;Japan&quot;, &quot;United States&quot;)) Using a density plot approach without facets, construct a visualization of how the number of hot dogs eaten varies by country. Repeat part a using a density plot approach with facets. Repeat part a using something other than a density plot approach. (There are a few options!) Summarize your observations about the number of hot dogs eaten by country. The Bechdel Test Recall the “Bechdel test” data from the previous activity. As a reminder, the “Bechdel test” tests whether movies meet the following criteria: there are \\(\\ge\\) 2 female characters the female characters talk to each other at least 1 time, they talk about something other than a male character In the fivethirtyeight.com article “The Dollar-And-Cents Case Against Hollywood’s Exclusion of Women”, the authors analyze which Hollywood movies do/don’t pass the test. Their data are available in the fivethirtyeight package: library(fivethirtyeight) data(bechdel) In investigating budgets and profits, the authors “focus on films released from 1990 to 2013, since the data has significantly more depth since then.” Use the following code to filter out just the movies in these years and name the resulting data set Beyond1990 (don’t worry about the syntax): library(dplyr) Beyond1990 &lt;- bechdel %&gt;% filter(year &gt;= 1990) Exercise 4.16 Address the following: Construct a visualization that addresses the following research question: Do bigger budgets (budget_2013) pay off with greater box office returns (domgross_2013)? In constructing this visualization, add a smooth to highlight trends and pay attention to which of these variables is the response. Using your visualization as supporting evidence, answer the research question. Part of the fivethirtyeight article focuses on how budgets (budget_2013) differ among movies with different degrees of female character development (clean_test). Construct a visualization that highlights the relationship between these two variables. There are many options - some are better than others! Using your visualization as supporting evidence, address fivethirtyeight’s concerns. Exercise 4.17 NOTE: The following exercise is inspired by a similar exercise proposed by Albert Kim, one of the fivethirtyeight package authors. Return to the fivethirtyeight.com article and examine the plot titled “The Bechdel Test Over Time”. Summarize the trends captured by this plot. (How has the representation of women in movies evolved over time?) Recreate this plot from the article! To do so, you’ll need to create a new data set named newbechdel in which the order of the Bechdel categories (clean_test) and the year categories (yearCat) match those used by fivethirtyeight. Don’t worry about the syntax: library(dplyr) newbechdel &lt;- bechdel %&gt;% mutate(clean_test = factor(bechdel$clean_test, c(&quot;nowomen&quot;, &quot;notalk&quot;, &quot;men&quot;, &quot;dubious&quot;, &quot;ok&quot;))) %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5))) Further, you’ll need to add the following layer in order to get a color scheme that’s close to that in the article: scale_fill_manual(values = c(&quot;red&quot;, &quot;salmon&quot;, &quot;pink&quot;, &quot;steelblue1&quot;, &quot;steelblue4&quot;)) NOTE: that your plot won’t look exactly like the authors’, but should be close to this: Appendix: R Functions Data Wrangling R functions Function/Operator Action Example filter(data,condition) Provide rows of a data set that satisfy a condition bechdel %&gt;% filter(year &gt;= 1990) mutate(data,varname =) Create a new variable bechdel %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5))) cut(x,breaks) Cut a quantitative variable into categories by the break points bechdel %&gt;% mutate(yearCat = cut(year, breaks = seq(1969, 2014, by = 5))) ggplot2 foundation functions Function/Operator Action Example ggplot(data) Create a blank canvas that can create a visualization based on data ggplot(data = elect) + geom_bar(aes(x)) Add a bar plot geom_bar(aes(x = winrep_2016)) + geom_bar(aes(x,fill),position='fill') Add a propotional bar plot geom_bar(aes(x = winrep_2016,fill = StateColor),position='fill') + geom_bar(aes(x,fill),position='dodge') Add a side-by-side bar plot geom_bar(aes(x = winrep_2016,fill = StateColor),position='dodge') + geom_smooth(aes(x,y)) Add a smoothed average curve of scatterplot geom_smooth() + geom_smooth(aes(x,y),method='lm') Add a best fit line to a scatterplot geom_smooth(method='lm') + geom_point(aes(x,y)) Add a scatterplot geom_bar(aes(x = year,y=budget_2013)) + geom_text(aes(x,y,label)) Add a text to a plot geom_text(aes(label=abb)) + facet_wrap(~x) Facet a plot (break into subplots based on groups) facet_wrap(~StateColor) "],["multivariate-visualizations.html", "Topic 5 Multivariate Visualizations Learning Goals Adding More Aesthetic Attributes Other Multivariate Visualization Techniques", " Topic 5 Multivariate Visualizations Learning Goals Understand how we can use additional aesthetics such as color and size to incorporate a third (or more variables) to a bivariate plot Develop comfort with interpreting heat maps and star plots, which allow you to look for patterns in variation in many variables. You can download a template .Rmd of this activity here. Put this in a new folder called Day_05 in your folder for COMP_STAT_112. Adding More Aesthetic Attributes Exploring SAT Scores Though far from a perfect assessment of academic preparedness, SAT scores have historically been used as one measurement of a state’s education system. The education data stored at https://www.macalester.edu/~ajohns24/data/sat.csv contain various education variables for each state: education &lt;- read.csv(&quot;https://www.macalester.edu/~ajohns24/data/sat.csv&quot;) Table 5.1: The first few rows of the SAT data. State expend ratio salary frac verbal math sat fracCat Alabama 4.405 17.2 31.144 8 491 538 1029 (0,15] Alaska 8.963 17.6 47.951 47 445 489 934 (45,100] Arizona 4.778 19.3 32.175 27 448 496 944 (15,45] Arkansas 4.459 17.1 28.934 6 482 523 1005 (0,15] California 4.992 24.0 41.078 45 417 485 902 (15,45] Colorado 5.443 18.4 34.571 29 462 518 980 (15,45] A codebook is provided by Danny Kaplan who also made these data accessible: Figure 5.1: Codebook for SAT data. Source: https://www.macalester.edu/~kaplan/ISM/datasets/data-documentation.pdf To examine the variability in average SAT scores from state to state, let’s start with a univariate density plot: ggplot(education, aes(x = sat)) + geom_density(fill = &quot;blue&quot;, alpha = .5) The first question we’d like to answer is to what degree do per pupil spending (expend) and teacher salary explain this variability? We can start by plotting each against sat, along with a best fit linear regression model: ggplot(education, aes(y = sat, x = salary)) + geom_point() + geom_smooth(se = FALSE, method = &quot;lm&quot;) + theme_classic() ggplot(education, aes(y = sat, x = expend)) + geom_point() + geom_smooth(se = FALSE, method = &quot;lm&quot;) + theme_classic() Exercise 5.1 Is there anything that surprises you in the above plots? What are the relationship trends? Solution These seem to suggest that spending more money on students or teacher salaries correlates with lower SAT scores. Say it ain’t so! Exercise 5.2 Make a single scatterplot visualization that demonstrates the relationship between sat, salary, and expend. Summarize the trivariate relationship between sat, salary, and expend. Hints: 1. Try using the color or size aesthetics to incorporate the expenditure data. 2. Include some model smooths with geom_smooth() to help highlight the trends. Solution Below are four different plots. There seems to be a high correlation between expend and salary, and both seem to be negatively correlated with sat. #plot 1 g1 &lt;- ggplot(education, aes(y=sat, x=salary, color=expend)) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() #plot 2 g2 &lt;- ggplot(education, aes(y=sat, x=salary, size=expend)) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() #plot 3 g3 &lt;- ggplot(education, aes(y=sat, x=salary, color=cut(expend,2))) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() #plot 4 g4 &lt;- ggplot(education, aes(y=sat, x=salary, color=cut(expend,3))) + geom_point() + geom_smooth(se=FALSE, method=&quot;lm&quot;) + theme_classic() library(gridExtra) grid.arrange(g1, g2, g3, g4, ncol=2) Exercise 5.3 The fracCat variable in the education data categorizes the fraction of the state’s students that take the SAT into low (below 15%), medium (15-45%), and high (at least 45%). Make a univariate visualization of the fracCat variable to better understand how many states fall into each category. Make a bivariate visualization that demonstrates the relationship between fracCat and sat. What story does your graphic tell? Make a trivariate visualization that demonstrates the relationship between fracCat, sat, and expend. Incorporate fracCat as the color of each point, and use a single call to geom_smooth to add three trendlines (one for each fracCat). What story does your graphic tell? Putting all of this together, explain this example of Simpson’s Paradox. That is, why does it appear that SAT scores decrease as spending increases even though the opposite is true? Other Multivariate Visualization Techniques Heat maps Note that each variable (column) is scaled to indicate states (rows) with high values (yellow) to low values (purple/blue). With this in mind you can scan across rows &amp; across columns to visually assess which states &amp; variables are related, respectively. You can also play with the color scheme. Type ?cm.colors in the console to see various options. ed &lt;- as.data.frame(education) # convert from tibble to data frame # convert to a matrix with State names as the row names row.names(ed) &lt;- ed$State ed &lt;- ed[, 2:8] ed_mat &lt;- data.matrix(ed) heatmap.2(ed_mat, Rowv = NA, Colv = NA, scale = &quot;column&quot;, keysize = 0.7, density.info = &quot;none&quot;, col = hcl.colors(256), margins = c(10, 20), colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05), sepcolor = &quot;white&quot;, cexRow = 2, cexCol = 2, trace = &quot;none&quot;, dendrogram = &quot;none&quot; ) Exercise 5.4 What do you notice? What insight do you gain about the variation across U.S. states? Heat map with row clusters It can be tough to identify interesting patterns by visually comparing across rows and columns. Including dendrograms helps to identify interesting clusters. heatmap.2(ed_mat, Colv = NA, scale = &quot;column&quot;, keysize = .7, density.info = &quot;none&quot;, col = hcl.colors(256), margins = c(10, 20), colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05), sepcolor = &quot;white&quot;, cexRow = 2, cexCol = 2, trace = &quot;none&quot;, dendrogram = &quot;row&quot; ) Exercise 5.5 What do you notice? What new insight do you gain about the variation across U.S. states, now that states are grouped and ordered to represent similarity? Heat map with column clusters We can also construct a heat map which identifies interesting clusters of columns (variables). heatmap.2(ed_mat, Rowv = NA, scale = &quot;column&quot;, keysize = .7, density.info = &quot;none&quot;, col = hcl.colors(256), margins = c(10, 20), colsep = c(1:7), rowsep = (1:50), sepwidth = c(0.05, 0.05), sepcolor = &quot;white&quot;, cexRow = 2, cexCol = 2, trace = &quot;none&quot;, dendrogram = &quot;column&quot; ) Exercise 5.6 What do you notice? What new insight do you gain about the variation across U.S. states, now that variables are grouped and ordered to represent similarity? Star plots There’s more than one way to visualize multivariate patterns. Like heat maps, these star plot visualizations indicate the relative scale of each variable for each state. With this in mind, you can use the star maps to identify which state is the most “unusual.” You can also do a quick scan of the second image to try to cluster states. How does that clustering compare to the one generated in the heat map with row clusters above? stars(ed_mat, flip.labels = FALSE, key.loc = c(15, 1.5), cex = 1.5 ) stars(ed_mat, flip.labels = FALSE, key.loc = c(15, 1.5), cex = 1.5, draw.segments = TRUE ) Exercise 5.7 What do you notice? What new insight do you gain about the variation across U.S. states with the star plots? "],["spatial-visualization.html", "Topic 6 Spatial Visualization Learning Goals Motivation Plotting Points on a Map Contour Maps Choropleths Dynamnic Maps with leaflet Appendix: R Functions", " Topic 6 Spatial Visualization Learning Goals Plot data points on top of a map using the ggmap() function along with ggplot2 functions Create choropleth maps using geom_map() Add points and other ggplot2 features to a map created from geom_map() Understand the basics of creating a map using leaflet, including adding points and choropleths to a base map You can download a template .Rmd of this activity here. Put this in a new folder called Day_06 in your folder for COMP_STAT_112. Motivation Take a look at these to get motivated/inspired to make your own: NYT article on effects of redlining NY Times mayoral primaries Super zip shiny app Plotting Points on a Map There are many ways we could visually represent data on a map. The first we’ll talk about it in terms of points in a coordinate system (longitudinal, latitude). Starbucks Example The Starbucks data, compiled by Danny Kaplan, contains information about every Starbucks in the world at the time the data were collected. It includes the Latitude and Longitude of each location. Let’s start by using familiar ggplot plotting tools. # Starbucks locations Starbucks &lt;- read_csv(&quot;https://www.macalester.edu/~ajohns24/data/starbucks.csv&quot;) ggplot(data = Starbucks) + geom_point(aes(x = Longitude, y = Latitude), alpha = 0.2, size = 0.2 ) + theme_classic() The code for a point pattern probably looks familiar. To highlight the geographical nature of this scatterplot, we can superimpose the points on top of a background map, using the ggmap() function from the ggmap library. NOTE: We used to be able to easily bring in Google maps. As of mid-2018, in order to bring those in, you need to have a registered API key with Google. If you want to do that, see google_key in the help. Then, see the documentation for get_map(). We will bring in other types of maps since Google maps are harder to do now and require you to submit credit card information. We will use a stamen map as our background. You can also take a look at stamen maps on their website. First, let’s look at an example. # Get the map information world &lt;- get_stamenmap( bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = &quot;terrain&quot;, zoom = 2 ) # Plot the points on the map ggmap(world) + # creates the map &quot;background&quot; geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .3, size = 0.2 ) + theme_map() Next, we will walk through the get_stamenmap() function inputs or arguments. The code below is what was used to get the world map information. get_stamenmap( bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = &quot;terrain&quot;, zoom = 2 ) bbox get_stamenmap(&nbsp;&nbsp;bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),&nbsp;&nbsp;maptype = \"terrain\",&nbsp;&nbsp;zoom = 2) The bbox argument tells it the minimum and maximum latitude and longitude points. So, left is the minimum longitude, right is the maximum longitude, bottom is the minimum latitude, and top is the maximum latitude. One helpful trick is to go to openstreetmap: zoom in on the area of interest, click export, and you will see all the values you need. You may have to modify them slightly, which you can do after your initial plot. maptype get_stamenmap(&nbsp;&nbsp;bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),&nbsp;&nbsp;maptype = \"terrain\",&nbsp;&nbsp;zoom = 2) The maptype tells it the style of the map. Check out the different options by looking in the get_stamenmap help (type ?get_stamenmap in the console). zoom get_stamenmap(&nbsp;&nbsp;bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),&nbsp;&nbsp;maptype = \"terrain\",&nbsp;&nbsp;zoom = 2) When you make a large area, you need to decrease the zoom, otherwise it will take too long to load. So, it’s a good idea to start with a small zoom and you can always make it bigger if you want. This might seem counter-intuitive at first. Think of the zoom level as the level of detail. So, smaller numbers show less detail and larger numbers more detail. A good trick is to go to the stamanmaps webpage and search for the location you are mapping. Then, in the URL, you can see the zoom number. For example, this link is a map of St. Paul: http://maps.stamen.com/#terrain/12/44.9531/-93.0904. Notice the number 12 next to /#terrain/. That means it is zoomed in at 12. ggmap() We save the the map information from get_stamenmap() to a named value and then use it in ggmap(): # Get the map informationworld get_stamenmap(&nbsp;&nbsp;bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),&nbsp;&nbsp;maptype = \"terrain\",&nbsp;&nbsp;zoom = 2)# Plot the points on the mapggmap(world) + # creates the map \"background\"&nbsp;&nbsp;geom_point(&nbsp;&nbsp;&nbsp;&nbsp;data = Starbucks,&nbsp;&nbsp;&nbsp;&nbsp;aes(x = Longitude, y = Latitude),&nbsp;&nbsp;&nbsp;&nbsp;alpha = .3,&nbsp;&nbsp;&nbsp;&nbsp;size = 0.2&nbsp;&nbsp;) +&nbsp;&nbsp;theme_map() The ggmap() function will print the “background” map. Think of it as the providing the canvas on which we will plot. This takes the place of our usual ggplot(). ggmap(world) After that, we can use the geom_XXX() functions from ggplot2 that we are used to in order to put points, lines, etc. on top of the map. But, we need to remember to also provide the data we are using in the geom_XXX() function(s) we use since we do not have the ggplot() function in which to provide it. # Get the map informationworld &nbsp;&nbsp;bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),&nbsp;&nbsp;maptype = \"terrain\",&nbsp;&nbsp;zoom = 2)# Plot the points on the mapggmap(world) + # creates the map \"background\"&nbsp;&nbsp;geom_point(&nbsp;&nbsp;&nbsp;&nbsp;data = Starbucks,&nbsp;&nbsp;&nbsp;&nbsp;aes(x = Longitude, y = Latitude),&nbsp;&nbsp;&nbsp;&nbsp;alpha = .3,&nbsp;&nbsp;&nbsp;&nbsp;size = 0.2&nbsp;&nbsp;) +&nbsp;&nbsp;theme_map() theme_map() The last line of the code is theme_map(). This is optional, but it often makes it look nice. # Get the map informationworld &nbsp;&nbsp;bbox = c(left = -180, bottom = -57, right = 179, top = 82.1),&nbsp;&nbsp;maptype = \"terrain\",&nbsp;&nbsp;zoom = 2)# Plot the points on the mapggmap(world) + # creates the map \"background\"&nbsp;&nbsp;geom_point(&nbsp;&nbsp;&nbsp;&nbsp;data = Starbucks,&nbsp;&nbsp;&nbsp;&nbsp;aes(x = Longitude, y = Latitude),&nbsp;&nbsp;&nbsp;&nbsp;alpha = .3,&nbsp;&nbsp;&nbsp;&nbsp;size = 0.2&nbsp;&nbsp;) +&nbsp;&nbsp;theme_map() So, the final map as a world map as the background with points plotted on top that show the Starbucks locations. The points are 20 percent (0.2) of their usual size and have a transparency level of 0.3. Resources Prof. Lendway’s demo video ggmap examples from ggmap maintainer David Kahle ggmap cheatsheet Exercise: More with Starbucks Exercise 6.1 Now it is your turn to work with the Starbucks data. Add an aesthetic to the world map that sets the color of the points according to the ownership type. What, if anything, can you deduce from this visualization? Construct a new map of Starbucks locations in the Twin Cities metro area (approximately the five county metro area). In the Twin Cities plot, play with the zoom number. What does it do? (just describe what it does - don’t actually include more than one map). Try a couple different map types (see get_stamenmap() in help and look at maptype). Include a map with one of the other map types. Add a point to the map that indicates Macalester College and label it appropriately. There are many ways you can do this, but it may be easiest with the annotate() function (see ggplot2 cheatsheet). Solution # a) ggmap(world) + geom_point( data = Starbucks, aes( x = Longitude, y = Latitude, color = `Ownership Type` ), alpha = .5, size = .2 ) + scale_color_manual(values = c(&quot;blue&quot;, &quot;red&quot;, &quot;black&quot;, &quot;purple&quot;)) + theme_map() + theme(legend.background = element_blank()) It appears that most of the locations in the western hemisphere are company owned or licensed, while franchising is more common in western Europe and joint ventures are more common in eastern Asia. # b) TwinCities &lt;- get_stamenmap( bbox = c(left = -94, bottom = 44.5, right = -92.5, top = 45.5), maptype = &quot;toner&quot;, zoom = 10 ) ggmap(TwinCities) + geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .5, size = .7, color = &quot;green&quot; ) A higher zoom number leads to more detail. # d) TwinCities2 &lt;- get_stamenmap( bbox = c(left = -94.5, bottom = 44.3, right = -91.94, top = 45.5), maptype = &quot;watercolor&quot;, zoom = 10 ) ggmap(TwinCities2) + geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .7, size = 1, color = &quot;#00704A&quot; ) # e) ggmap(TwinCities) + geom_point( data = Starbucks, aes(x = Longitude, y = Latitude), alpha = .7, size = 1, color = &quot;#00704A&quot; ) + annotate( geom = &quot;point&quot;, x = -93.1712321, y = 44.9378965, color = &quot;orange&quot; ) + annotate( geom = &quot;text&quot;, x = -93.1712321, y = 44.91, color = &quot;darkorange&quot;, label = &quot;MAC&quot; ) + theme_map() + theme(legend.background = element_blank()) Contour Maps The geom_density_2d and stat_density_2d functions are great for plotting distributions over spatial regions. Here is an example that shows the densities of Starbucks in the North America. US_map2 &lt;- get_stamenmap( bbox = c(left = -132, bottom = 20, right = -65, top = 55), maptype = &quot;terrain&quot;, zoom = 4 ) ggmap(US_map2) + geom_density_2d(data = Starbucks, aes(x = Longitude, y = Latitude), size = 0.3) + stat_density_2d( data = Starbucks, aes(x = Longitude, y = Latitude, fill = stat(level)), size = 0.1, alpha = .2, bins = 20, geom = &quot;polygon&quot;, color = &#39;darkblue&#39; ) + scale_alpha(guide = &#39;none&#39;) + scale_fill_gradient( low = &quot;darkblue&quot;, high = &quot;red&quot;, guide = &#39;none&#39; ) Choropleths Geographical data needn’t be expressed by latitude and longitude. For choropleth maps, instead of visualizing our data as points with different aesthetics (size, color, transparency, etc.), we color different regions (or mathematically, polygons) on the maps based on data values. To do this we need to specify both the geometric regions on which the data resides (counties, states, zip codes, etc.), and then wrangle the data so that there is one value per region. Let’s return to the Starbucks data. First, we will create a new dataset, starbucks_us_by_state that limits the data to the US, finds the number of Starbucks in each state, and creates a state name that is in all lowercase letters that matches the state name in the region variable of the states_map dataset. The states_map dataset gives information about creating the borders of the US states. The data is retrieved using the map_data() function. Run ?map_data in the console to see more information about what other maps are available. There are also other packages that provide different types of maps. Then, we can use geom_map() to create a choropleth map. Let’s take a look at the map and we’ll go through the details after. # Create a new Starbucks dataset that # - filters to the US # - summarizes the number of Starbucks in each state # - has full names of states in lowercase letters (to match to states_map data created next) starbucks_us_by_state &lt;- Starbucks %&gt;% filter(Country == &quot;US&quot;) %&gt;% count(`State/Province`) %&gt;% mutate(state_name = str_to_lower(abbr2state(`State/Province`))) # US states map information - coordinates used to draw borders states_map &lt;- map_data(&quot;state&quot;) # map that colors state by number of Starbucks starbucks_us_by_state %&gt;% ggplot() + geom_map( map = states_map, aes( map_id = state_name, fill = n ) ) + # This assures the map looks decently nice: expand_limits(x = states_map$long, y = states_map$lat) + theme_map() Now, let’s look more closely at what each piece of the code below is doing. starbucks_us_by_state %&gt;% ggplot() + geom_map( map = states_map, aes( map_id = state_name, fill = n ) ) + expand_limits(x = states_map$long, y = states_map$lat) + theme_map() Choose a Map The map argument tells R at which level to create the map. Really, it tells it how to draw all the borders This is a very special data set. According to the geom_map() documentation, it is a “data frame that contains the map coordinates … It must contain columns x or long, y or lat, and region or id.” We are using the map_data() function to create the map file (see above for more details. You can open the map data, states_map, and see that it adheres to the rules. starbucks_us_by_state %>%&nbsp;&nbsp;ggplot() +&nbsp;&nbsp;geom_map(&nbsp;&nbsp;&nbsp;&nbsp;map = states_map,&nbsp;&nbsp;&nbsp;&nbsp;aes(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_id = state_name,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill = n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;) +&nbsp;&nbsp;expand_limits(x = states_map$long, y = states_map$lat) +&nbsp;&nbsp;theme_map() Connect Map ID/Region Variable to Data Being Plotted The map_id inside of aes() is a required aesthetic for the geom_map() geom. It tells R which variable is the region/id variable, in this case the state. It connects the region or id from the map (region variable in states_map dataset, in this example) to the dataset being plotted (state_name in starbucks_us_by_state, in this example). So state_name needs to have the same form as region, which is why we modified the state names in starbucks_us_by_state. starbucks_us_by_state %>%&nbsp;&nbsp;ggplot() +&nbsp;&nbsp;geom_map(&nbsp;&nbsp;&nbsp;&nbsp;map = states_map,&nbsp;&nbsp;&nbsp;&nbsp;aes(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_id = state_name,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill = n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;) +&nbsp;&nbsp;expand_limits(x = states_map$long, y = states_map$lat) +&nbsp;&nbsp;theme_map() Use ggplot2 Features We tell it to fill in the states by the variable n, the number of Starbucks in each state. With the geom_map() geom, it will fill in the borders of the regions we defined in the map argument. starbucks_us_by_state %>%&nbsp;&nbsp;ggplot() +&nbsp;&nbsp;geom_map(&nbsp;&nbsp;&nbsp;&nbsp;map = states_map,&nbsp;&nbsp;&nbsp;&nbsp;aes(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_id = state_name,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill = n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;) +&nbsp;&nbsp;expand_limits(x = states_map$long, y = states_map$lat) +&nbsp;&nbsp;theme_map() expand_limits() Use expand_limits() to assure that the map covers the entire area it’s supposed to. We put the longitude variable from states_map for the x argument and the latitude variable from states_map for the y argument to assure the map stretches across the entire range of longitudes and latitudes in the map. starbucks_us_by_state %>%&nbsp;&nbsp;ggplot() +&nbsp;&nbsp;geom_map(&nbsp;&nbsp;&nbsp;&nbsp;map = states_map,&nbsp;&nbsp;&nbsp;&nbsp;aes(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_id = state_name,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill = n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;) +&nbsp;&nbsp;expand_limits(x = states_map$long, y = states_map$lat) +&nbsp;&nbsp;theme_map() theme_map() This is a personal preference, but theme_map() often makes the map look nicer. starbucks_us_by_state %>%&nbsp;&nbsp;ggplot() +&nbsp;&nbsp;geom_map(&nbsp;&nbsp;&nbsp;&nbsp;map = states_map,&nbsp;&nbsp;&nbsp;&nbsp;aes(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map_id = state_name,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fill = n&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;&nbsp;) +&nbsp;&nbsp;expand_limits(x = states_map$long, y = states_map$lat) +&nbsp;&nbsp;theme_map() Add ggplot2 Layers You can add any of the ggplot2 layers on top of this map. In this example, we’ve added MN Starbucks as points, included a title, and changed the legend background (so it doesn’t have one). starbucks_us_by_state %&gt;% ggplot() + geom_map( map = states_map, aes( map_id = state_name, fill = n ) ) + geom_point( data = Starbucks %&gt;% filter(`State/Province` == &quot;MN&quot;), aes(x = Longitude, y = Latitude), size = 0.05, alpha = 0.2, color = &quot;goldenrod&quot; ) + expand_limits(x = states_map$long, y = states_map$lat) + labs(title = &quot;Starbucks in MN&quot;) + theme_map() + theme(legend.background = element_blank()) Resources Prof. Lendway’s demo video ggplot2 documentation Example by Arie Voorman (some things could be out of date since it’s from 2015) Alternative Methods There are plenty of other methods available to make choropleths in R. Let’s demonstrate just three additional methods with data on the 2016 U.S. presidential election results by county: elect &lt;- read_csv(&quot;https://www.macalester.edu/~ajohns24/data/electionDemographics16.csv&quot;) # reformat the FIPS region codes elect &lt;- elect %&gt;% mutate(fips = ifelse(region &lt; 10000, paste(&quot;0&quot;, as.character(region), sep = &quot;&quot;), as.character(region))) # define appropriate (&amp; nicely labeled) breaks elect$brk &lt;- cut(elect$perrep_2016, breaks = seq(0, 100, by = 10), labels = c( &quot;0-9&quot;, &quot;10-19&quot;, &quot;20-29&quot;, &quot;30-39&quot;, &quot;40-49&quot;, &quot;50-59&quot;, &quot;60-69&quot;, &quot;70-79&quot;, &quot;80-89&quot;, &quot;90-100&quot; ), include.lowest = TRUE ) First, we will load a map of the counties in the United States: county_map &lt;- socviz::county_map # from socviz library mapping_data &lt;- elect %&gt;% rename(id = fips) %&gt;% left_join(county_map, by = &quot;id&quot;) Now here is the map with the method from above, using ggplot + geom_map: ggplot(elect) + geom_map(data = elect, map = county_map, aes(map_id = fips, fill = brk)) + scale_fill_manual(values = rev(brewer.pal(10, &quot;RdBu&quot;)), name = &quot;Percent Republican&quot;) + expand_limits(x = county_map$long, y = county_map$lat) + theme_map() + theme(legend.position = &quot;right&quot;) Alternative 1: ggplot + geom_polygon ggplot(mapping_data, aes(x = long, y = lat, fill = perrep_2016, group = group)) + coord_equal() + geom_polygon(color = NA) + scale_fill_gradientn(name = &quot;Percent Republican&quot;, colours = c(&quot;blue&quot;, &quot;purple&quot;, &quot;red&quot;), values = scales::rescale(seq(0, 100, by = 10))) + theme_map() + theme(legend.position = &quot;right&quot;) Alternative 2: plot_usmap # This function is in the usmap package plot_usmap(data = elect, values = &quot;brk&quot;, color = NA, exclude = &quot;AK&quot;) + scale_fill_manual(values = rev(brewer.pal(10, &quot;RdBu&quot;)), name = &quot;Percent Republican&quot;) + theme(legend.position = &quot;right&quot;) Exercise: Even More with Starbucks The example above did not account for population of each state in the map. In the code below, a new variable is created, starbucks_per_10000, that gives the number of Starbucks per 10,000 people. It is in the starbucks_with_2018_pop_est dataset. Here is a link to the data census_pop_est_2018 &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/us_census_2018_state_pop_est.csv&quot;) %&gt;% separate(state, into = c(&quot;dot&quot;, &quot;state&quot;), extra = &quot;merge&quot;) %&gt;% select(-dot) %&gt;% mutate(state = str_to_lower(state)) starbucks_with_2018_pop_est &lt;- starbucks_us_by_state %&gt;% left_join(census_pop_est_2018, by = c(&quot;state_name&quot; = &quot;state&quot;) ) %&gt;% mutate(starbucks_per_10000 = (n / est_pop_2018) * 10000) Exercise 6.2 Create a choropleth state map that shows the number of Starbucks per 10,000 people on a map of the US. Use a new fill color, add points for all Starbucks in the contiguous US, add an informative title for the plot, and include a caption that says who created the plot (you!). Make a conclusion about what you observe. Dynamnic Maps with leaflet Leaflet is an open-source JavaScript library for creating maps. It can be used outside of R, but we will only discuss using the leaflet library in R. This library uses a different plotting framework from ggplot2 although it still has a tidyverse feel due to its use of the pipe, %&gt;% and the way it adds layers to the plot, just like in ggplot2. Steps to Create a Map Create a map widget by calling leaflet() and telling it the data to use. Add a base map using addTiles() (the default) or addProviderTiles(). Add layers to the map by using layer functions (e.g. , addMarkers(), addPolygons()) to modify the map widget. Repeat step 3 as desired. Print the map widget to display it. Creating a Map with Markers/Points Below, we create a basic map and add points of interest (the points are a layer on the map). The data are in favorite_stp, created below. The function we will use to create the maps will look for certain variable names for latitude (lat, latitude) and longitude (lng, long, or longitude). If you do not name them one of those things or if the data you are using doesn’t name them that, you need to call out the name explicitly (you’ll see that next). You can use a “two-finger scroll” to zoom in and out. # Brianna&#39;s favorite St. Paul places - Used Google Maps to get coordinates # https://support.google.com/maps/answer/18539?hl=en&amp;co=GENIE.Platform%3DDesktop favorite_stp &lt;- tibble( place = c( &quot;Macalester College&quot;, &quot;Groveland Recreation Center&quot;, &quot;Due Focacceria&quot;, &quot;Shadow Falls Park&quot;, &quot;Mattocks Park&quot;, &quot;Carondelet Fields&quot;, &quot;Pizza Luce&quot;, &quot;Cold Front Ice Cream&quot; ), long = c( -93.1712321, -93.1851310, -93.1775469, -93.1944518, -93.171057, -93.1582673, -93.1524256, -93.156652 ), lat = c( 44.9378965, 44.9351034, 44.9274973, 44.9433359, 44.9284142, 44.9251236, 44.9468848, 44.9266768 ) ) leaflet(data = favorite_stp) %&gt;% # base plot addTiles() %&gt;% # base map - default is openstreet map addMarkers() # Adds markers - knows lat and long from names in data The graph below is the same as above, but the code explicitly specifies latitude and longitude, which you would need to do if those variables had a name not recognized by the function, and adds labels. WARNING: DO NOT FORGET THE ~ BEFORE THE VARIABLE NAMES!!! leaflet(data = favorite_stp) %&gt;% addTiles() %&gt;% addMarkers( lng = ~long, lat = ~lat, label = ~place ) We can change just about everything about our map. The plot below is the same plot as above with some aesthetic changes: We changed the base map with addProviderTiles(). To see all available provider base maps, type providers in the console. To access those maps, use providers$PROVIDERNAME inside the addProviderTiles() function, where PROVIDERNAME is one of those listed providers. When you type provider$ a list should show up that you can click on. We changed the marker type by using addCircles() instead of addMarkers() - Search addControl in the Help or type ?addControl into the console to see what all the arguments mean and how you can change them. All variable arguments are preceded with a tilde, ~. The weight argument tells it how thick to make the lines or points, pixels. The opacity argument is the transparency, like the alpha argument in ggplot2. Colors need to be in “hex” form. We used the col2hex() function from the gplots library to do that. The colors also need to be valid R colors. leaflet(data = favorite_stp) %&gt;% addProviderTiles(providers$Stamen.Watercolor) %&gt;% addCircles( lng = ~long, lat = ~lat, label = ~place, weight = 10, opacity = 1, color = col2hex(&quot;darkblue&quot;) ) The map below is also the “same” as the ones above, but with a new base map and a line to trace a route, which was created with the addPolylines() layer. It traces the locations in the order they are entered in the dataset. leaflet(data = favorite_stp) %&gt;% addProviderTiles(providers$CartoDB.DarkMatter) %&gt;% addCircles( lng = ~long, lat = ~lat, label = ~place, weight = 10, opacity = 1, color = col2hex(&quot;darkred&quot;) ) %&gt;% addPolylines( lng = ~long, lat = ~lat, color = col2hex(&quot;darkred&quot;) ) Choropleth Layers with addPolygons() For making maps with borders (like choropleth maps), the functions can receive the base maps with spatial data a few different ways. In the example here, we use functions from the sf package to get the data in the right form. In the demo video listed under Resources below, a data.frame is translated to an sf object. Hopefully those two sets of instructions fit most of the cases you are interested in. In the code chunk below, the function st_read() downloads the shape file for the counties of North Carolina, which is included in the sf package. # North Carolina births and sids deaths nc &lt;- st_read(system.file(&quot;shape/nc.shp&quot;, package = &quot;sf&quot;), quiet = TRUE ) %&gt;% mutate(sid_per_1000birth_79 = SID79 / BIR79 * 1000) # Compute centroid (center) of each county county_centroid_lat_long &lt;- as_tibble(st_coordinates(st_centroid(nc))) %&gt;% rename( centr_long = X, centr_lat = Y ) # County names and sid_per_1000birth_79 nc_centroid_county &lt;- st_drop_geometry(nc) %&gt;% select(NAME, sid_per_1000birth_79) # All centroid level info nc_centroid &lt;- county_centroid_lat_long %&gt;% bind_cols(nc_centroid_county) The dataset has number of births and number of SIDS cases in each county of North Carolina from 1974-1979 and 1979-1984. We computed a variable called sid_per_1000birth_79 which is the number of SIDS cases per 1000 births in 1979. Below, the the NAMES and geometry variables from the first five rows of the data are printed out. The geometry variable contains information about how to plot the boundaries of the counties. Open the dataset and examine the geometry variable. The leaflet function knows that the geometry variable contains this special information. nc %&gt;% select(NAME, geometry) %&gt;% slice(1:5) ## Simple feature collection with 5 features and 1 field ## Geometry type: MULTIPOLYGON ## Dimension: XY ## Bounding box: xmin: -81.74107 ymin: 36.07282 xmax: -75.77316 ymax: 36.58965 ## Geodetic CRS: NAD27 ## NAME geometry ## 1 Ashe MULTIPOLYGON (((-81.47276 3... ## 2 Alleghany MULTIPOLYGON (((-81.23989 3... ## 3 Surry MULTIPOLYGON (((-80.45634 3... ## 4 Currituck MULTIPOLYGON (((-76.00897 3... ## 5 Northampton MULTIPOLYGON (((-77.21767 3... To learn more about the data type nc into the Help menu or ?nc into the console. This plot puts the map with North Carolina county borders on top of the Open Street Map. This map isn’t that interesting by itself. leaflet(nc) %&gt;% addTiles() %&gt;% addPolygons() Now, let’s use some of the data to enhance the graph by creating a choropleth map where we color the counties by sid_per_1000birth_79. In ggplot(), we can map a variable to color or fill inside the aesthetic, but in the leaflet functions we cannot do this. Instead, we need to create a variable of hex color names that tells it how to color or fill. Thankfully, there are functions that help us do that! Let’s walk through the detail of how we created the graph below. # creates a function that can be used to map a variable to # the color palette using viridis pal &lt;- colorNumeric(&quot;viridis&quot;, domain = nc$sid_per_1000birth_79 ) leaflet(nc) %&gt;% addTiles() %&gt;% addPolygons( fillColor = ~ pal(sid_per_1000birth_79), # fills according to that variable fillOpacity = 0.7 ) # like alpha in ggplot The colorNumeric() function returns a function that maps a variable’s values to colors in the given palette, in this case “viridis”. So, pal() is a function. We can then use that function inside addPolygons(). If we apply the function to the sid_per_1000birth_79 variable, it returns a variable of hex colors and the variable of colors is used to fill the counties. Below we print out what happens when pal() is applied to sid_per_1000birth_79. We can see that it returns hex colors. So, the variable in the fillColor argument inside addPolygons() above, is a variable of hex color names. head(pal(nc$sid_per_1000birth_79)) ## [1] &quot;#440154&quot; &quot;#C0DF25&quot; &quot;#38588C&quot; &quot;#2A778E&quot; &quot;#34618D&quot; &quot;#26828E&quot; Again, this is different from ggplot(), where we could map a variable to color or fill and it would do the translating of variable to color scale for us. In the leaflet functions, we have to explicitly provide the colors in a variable. The colorNumeric() command helps you do that. colorBin(), colorQuantile(), and colorFactor() are other functions you might need to use depending on the type of variable you are trying to map to colors. There are many customizeable options in leaflet, much like ggplot(). Here is a commented set of code to point out some useful functions and arguments: # creates a function that can be used to map a variable to # the color palette using viridis pal &lt;- colorNumeric(&quot;viridis&quot;, domain = nc$sid_per_1000birth_79 ) leaflet(nc) %&gt;% addTiles() %&gt;% addPolygons( # skips drawing the borders: stroke = FALSE, # fills according to variable of hex colors: fillColor = ~ pal(sid_per_1000birth_79), # changes transparency, like alpha in ggplot fillOpacity = 0.7, # how much to simplify the plot when zooming: smoothFactor = 0.5, # changes what happens to the shape when we mouse over it highlight = highlightOptions( weight = 5, color = &quot;black&quot;, fillOpacity = 0.9, bringToFront = FALSE ) ) %&gt;% addCircles( data = nc_centroid, lng = ~centr_long, lat = ~centr_lat, # label that appears when you click on the marker, # in this case county name and sid_per_1000birth_79 # rounded to the 2nd decimal popup = ~ paste(NAME, &quot;: &quot;, round(sid_per_1000birth_79, 2), sep = &quot;&quot; ), radius = 2 ) %&gt;% # Add a legend addLegend( pal = pal, values = ~sid_per_1000birth_79, opacity = 0.5, title = NULL, position = &quot;bottomright&quot; ) Resources Prof. Lendway’s introductory video Prof. Lendway’s demo video Detailed leaflet documenation (with examples) leaflet cheat sheet Provider map previews Tutorial by Andrew Ba Tran, investigative data reporter at Washington Post For more advanced work with spatial mapping, GIS in R, etc. see the sf package. Exercise: Favorite Places Exercise 6.3 In this exercise, you are going to create a single map of some of your favorite places! The end result will be one map. Create a data set using the tibble() function that has 10-15 rows of your favorite places. The columns will be the name of the location, the latitude, the longitude, and a column that indicates if it is in your top 3 favorite locations or not. For an example of how to use tibble(), look at the favorite_stp that is created manually above. Create a map that uses circles to indicate your favorite places. Label them with the name of the place. Choose the base map you like best. Color your 3 favorite places differently than the ones that are not in your top 3. Add a legend that explains what the colors mean. If there are other variables you want to add that could enhance your plot, do that now. You could also connect all your locations together with a line in a meaningful way (you may need to order them differently in the original data). Appendix: R Functions Mapping Points Functions Function/Operator Action Example ggmap() Create a plotting canvas with a map background ggmap(world) + geom_point(...) get_stamenmap(bbox,maptype,zoom) Fetches a stamen map as background get_stamenmap(bbox = c(left = -180, bottom = -57, right = 179, top = 82.1), maptype = \"terrain\", zoom = 2) ggthemes::theme_map() Clean plotting themes for maps ggmap(world) + geom_point(...) + theme_map() Contour/Density Mapping Functions Function/Operator Action Example geom_density_2d Plots contour maps (2d density) ggmap(world) + geom_density_2d(data,aes(x,y)) stat_density_2d Plots a filled in contour heat map ggmap(world) + state_density_2d(data,aes(x,y,fill = stat(level)),geom='polygon') scale_fill_gradient(low,high) Change fill gradient scale based on a low and high color ggmap(world) + geom_point(...) + scale_fill_gradient(low='darkblue',high='red') Choropleths Mapping Functions Function/Operator Action Example map_data() Get map region boundaries from maps package into a dataframe for plotting with ggplot2 state_map &lt;- map_data('state') geom_map() Links map regions with data set with info about regions and plots it ggplot(starbucks_us_by_state) + geom_map(map = states_map,aes(map_id = state_name,fill = n)) expand_limits(x,y) Ensure limits include data values in x and y + expand_limits(x = states_map$long, y = states_map$lat) Dynamic Mapping Functions Function/Operator Action Example leaflet(data) Create base dynamic plot leaflet(data = favorite_stp) addTiles() Adds the base map - default is openstreet map + addTiles() addProviderTiles() Adds the alternative base maps + addProviderTiles(providers$Stamen.Watercolor) addMarkers(lng,lat,label) Add marker glyphs to dynamic map + addMarkers(lng= ~long, lat= ~lat, label=~place) addCircles(lng,lat,label,weight,opactiy,color) Add circle glyphs to dynamic map + addCircles(lng= ~long, lat= ~lat, label=~place, weight=10,opacity=1,color = col2hex('darkblue')) addPolylines(lng,lat) Add lines that connect locations to dynamic map + addPolylines(lng= ~long, lat= ~lat, color = col2hex('darkred')) addPolygons(fillColor,fillOpacity) Add polygons to dynamic map (if data is sf class) + addPolygons() "],["six-main-verbs.html", "Topic 7 Six Main Verbs Learning Goals Data Wrangling Introduction Exercises Part 1: Baby Names Exercises Part 2: US Births Appendix: R Functions", " Topic 7 Six Main Verbs Learning Goals Understand and be able to use the following verbs appropriate: select, mutate, filter, arrange, summarize, group_by Develop working knowledge of working with dates and lubridate functions You can download a template .Rmd of this activity here. Add it to a folder called Day_07 in your COMP_STAT_112 folder. Data Wrangling Introduction Example: US Births The number of daily births in the US varies over the year and from day to day. What’s surprising to many people is that the variation from one day to the next can be huge: some days have only about 80% as many births as others. Why? In this activity we’ll use basic data wrangling skills to understand some drivers of daily births. The data table Birthdays in the mosaicData package gives the number of births recorded on each day of the year in each state from 1969 to 1988.3 Table 7.1: A subset of the initial birthday data. state date year births AK 1969-01-01 1969 14 AL 1969-01-01 1969 174 AR 1969-01-01 1969 78 AZ 1969-01-01 1969 84 CA 1969-01-01 1969 824 CO 1969-01-01 1969 100 Tidy Data Additional reading: Wickham, Tidy Data Wickham and Grolemund, Tidy Data Baumer, Kaplan, and Horton, Tidy Data There are different ways to store and represent the same data. In order to be consistent and to also take advantage of the vectorized nature of R, the tidyverse packages we’ll use provide a set of three interrelated rules/conventions for a dataset to be tidy: Each variable must have its own column. Each observation must have its own row. Each value must have its own cell. One of the first things we’ll often do when acquiring new data is to “tidy it” into this form. For now, we can already start thinking of a data frame (tibble) as a table whose rows are the individual cases and whose columns are the variables on which we have information for each individual case. The first figure from the tidyr cheat sheet summarizes this principle. Data Verbs Additional reading: Wickham and Grolemund, Data Transformation Baumer, Kaplan, and Horton, A Grammar for Data Wrangling There are six main data transformation verbs in the dplyr library. Each verb takes an input data frame along with additional arguments specifying the action, and returns a new data frame. We’ll examine them in three pairs. Verbs that change the variables (columns) but not the cases (rows) The first two verbs change which variables (columns) are included in the data frame, but preserve the same set of cases (rows). select() chooses which columns to keep, or put another way, deletes those colummns that are not selected. To specify the columns, we can either list them out, or use functions like starts_with(), ends_with(), or contains() to specify the titles of the variables we wish to keep. mutate() adds one or more columns to the data frame. Each column is a function of the other columns that is applied on a row by row basis. For example, we can use arithmetic operations like adding two other variables or logical operations like checking if two columns are equal, or equal to a target number. Exercise 7.1 (select and mutate) Consider the Birthdays data Add two new variables to the Birthdays data: one that has only the last two digits of the year, and one that states whether there were more than 100 births in the given state on the given date. Then form a new table that only has three columns: the state and your two new columns. What does the following operation return: select(Birthdays, ends_with(\"te\"))? Solution The commands for the first two parts are BirthdaysExtra &lt;- mutate(Birthdays, year_short = year - 1900, busy_birthday = (births &gt; 100) ) BirthdaysExtraTable &lt;- select( BirthdaysExtra, state, year_short, busy_birthday ) select(Birthdays, ends_with(&quot;te&quot;)) %&gt;% head() ## state date ## 1 AK 1969-01-01 ## 2 AL 1969-01-01 ## 3 AR 1969-01-01 ## 4 AZ 1969-01-01 ## 5 CA 1969-01-01 ## 6 CO 1969-01-01 The operation in (c) selects only the first two columns state and date because they end in ‘te’. Verbs that change the cases (rows) but not the variables (columns) The next two verbs change which cases (rows) are included in the data frame, but preserve the same set of variables (columns). filter() deletes some of the rows by specifying which rows to keep. arrange() reorders the rows according to a specified criteria. To sort in reverse order based on the variable x, use arrange(desc(x)). Exercise 7.2 (filter and arrange) Create a table with only births in Massachusetts in 1979, and sort the days from those with the most births to those with the fewest. Solution We want to filter and then arrange: MABirths1979 &lt;- filter(Birthdays, state == &quot;MA&quot;, year == 1979) MABirths1979Sorted &lt;- arrange(MABirths1979, desc(births)) Table 7.2: Birthdays in Massachusetts in 1979, sorted from those dates with the most births to those dates with the fewest births. state date year births MA 1979-09-28 1979 262 MA 1979-09-11 1979 252 MA 1979-12-28 1979 249 MA 1979-09-26 1979 246 MA 1979-07-24 1979 245 MA 1979-04-27 1979 243 When filtering, we often use logical comparison operators like ==, &gt;, &lt;, &gt;= (greater than or equal to), &lt;= (less than or equal to), and %in%, which compares the value to a list of entries.4 For example, if we want all births in AK, CA, and MA, we can write filter(Birthdays, state %in% c(&quot;AK&quot;,&quot;CA&quot;,&quot;MA&quot;)) The c() here is for concatenate, which is how we form vectors in R. Grouped summaries summarise() (or equivalently summarize()) takes an entire data frame as input and outputs a single row with one or more summary statistics, such as mean, sum, sd, n_distinct(), or n() (which, like tally(), just counts the number of entries). summarise(Birthdays, total_births = sum(births), average_births = mean(births), nstates = n_distinct(state), ncases = n() ) ## total_births average_births nstates ncases ## 1 70486538 189.0409 51 372864 So summarise changes both the cases and the variables. Alone, summarise is not all that useful, because we can also access individual variables directly with the dollar sign. For example, to find the total and average births, we can write sum(Birthdays$births) ## [1] 70486538 mean(Birthdays$births) ## [1] 189.0409 Rather, we will mostly use it to create grouped summaries, which brings us to the last of the six main data verbs. group_by() groups the cases of a data frame by a specified set of variables. The size of the stored data frame does not actually change (neither the cases nor the variables change), but then other functions can be applied to the specified groups instead of the entire data set. We’ll often use group_by in conjunction with summarise to get a grouped summary. Exercise 7.3 (grouped summary) Consider the Birthdays data again. Find the average number of daily births (per state) in each year. Find the average number of daily births in each year, by state. Solution We have to first group by the desired grouping and then perform a summarise. BirthdaysYear &lt;- group_by(Birthdays, year) summarise(BirthdaysYear, average = mean(births)) ## # A tibble: 20 × 2 ## year average ## &lt;int&gt; &lt;dbl&gt; ## 1 1969 192. ## 2 1970 200. ## 3 1971 191. ## 4 1972 175. ## 5 1973 169. ## 6 1974 170. ## 7 1975 169. ## 8 1976 170. ## 9 1977 179. ## 10 1978 179. ## 11 1979 188. ## 12 1980 194. ## 13 1981 195. ## 14 1982 198. ## 15 1983 196. ## 16 1984 197. ## 17 1985 202. ## 18 1986 202. ## 19 1987 205. ## 20 1988 210. BirthdaysYearState &lt;- group_by(Birthdays, year, state) summarise(BirthdaysYearState, average = mean(births)) ## # A tibble: 1,020 × 3 ## # Groups: year [20] ## year state average ## &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 1969 AK 18.6 ## 2 1969 AL 174. ## 3 1969 AR 91.3 ## 4 1969 AZ 93.3 ## 5 1969 CA 954. ## 6 1969 CO 110. ## 7 1969 CT 134. ## 8 1969 DC 75.3 ## 9 1969 DE 27.6 ## 10 1969 FL 292. ## # … with 1,010 more rows Piping Additional reading: Wickham and Grolemund, Combining Multiple Operations with the Pipe Wickham and Grolemund, Pipes Pipes offer an efficient way to execute multiple operations at once. Here is a more efficient way to redo Exercise 7.2 with the pipe: QuickMABirths1979 &lt;- Birthdays %&gt;% filter(state == &quot;MA&quot;, year == 1979) %&gt;% arrange(desc(births)) With the pipe notation, x %&gt;% f(y) becomes f(x,y), where in the first line here, x is Birthdays, the function f is filter, and y is state == \"MA\", year == 1979. The really nice thing about piping is that you can chain together a bunch of different operations without having to save the intermediate results. This is what we have done above by chaining together a filter followed by an arrange. Manipulating Dates Additional reading: Wickham and Grolemund, Date and Times with lubridate The date variable in Birthdays prints out in the conventional, human-readable way. But it is actually in a format (called POSIX date format) that automatically respects the order of time. The lubridate package contains helpful functions that will extract various information about any date. Here are some you might find useful: year() month() week() yday() — gives the day of the year as a number 1-366. This is often called the “Julian day.” mday() — gives the day of the month as a number 1-31 wday() — gives the weekday (e.g. Monday, Tuesday, …). Use the optional argument label = TRUE to have the weekday spelled out rather than given as a number 1-7. Using these lubridate functions, you can easily look at the data in more detail. For example, we can add columns to the date table for month and day of the week:5 Birthdays &lt;- Birthdays %&gt;% mutate( month = month(date, label = TRUE), weekday = wday(date, label = TRUE) ) Here is what the data table looks like with our new columns: Table 7.3: A subset of the birthday data with additional variables. state date year births month weekday AK 1969-01-01 1969 14 Jan Wed AL 1969-01-01 1969 174 Jan Wed AR 1969-01-01 1969 78 Jan Wed AZ 1969-01-01 1969 84 Jan Wed CA 1969-01-01 1969 824 Jan Wed CO 1969-01-01 1969 100 Jan Wed Exercise 7.4 Make a table showing the five states with the most births between September 9, 1979 and September 11, 1979, inclusive. Arrange the table in descending order of births. Solution The plan of attack is to first filter the dates, then group by state, then use a summarise to add up totals for each state, and finally arrange them in descending order to find the top 5.6 SepTable &lt;- Birthdays %&gt;% filter(date &gt;= ymd(&quot;1979-09-09&quot;), date &lt;= ymd(&quot;1979-09-11&quot;)) %&gt;% group_by(state) %&gt;% summarise(total = sum(births)) %&gt;% arrange(desc(total)) %&gt;% head(n = 5) knitr::kable( SepTable[, ], caption = &quot;States with the most births between September 9, 1979 and September 11, 1979, inclusive.&quot; ) Table 7.4: States with the most births between September 9, 1979 and September 11, 1979, inclusive. state total CA 3246 TX 2347 NY 1943 IL 1673 OH 1408 Exercises Part 1: Baby Names We are going to practice the six data verbs on the babynames dataset: Table 7.5: A subset of the babynames data, which runs from 1880-2015 and is provided by the US Social Security Administration. year sex name n prop 1880 F Mary 7065 0.0723836 1880 F Anna 2604 0.0266790 1880 F Emma 2003 0.0205215 1880 F Elizabeth 1939 0.0198658 1880 F Minnie 1746 0.0178884 1880 F Margaret 1578 0.0161672 Exercise 7.5 Add a new boolean (true or false) variable called has2000 that indicates whether there were more than 2000 babies of that sex assigned at birth with that name in each year. Display the first six rows of your new table. Exercise 7.6 Find the number of total babies per year, sorted by most babies to least babies. Exercise 7.7 Find the twelve most popular names overall (i.e., totaled over all year and sexes), ordered by popularity. Exercise 7.8 Find the most popular names for males, over all years and ordered by popularity. Exercise 7.9 Find the most popular names for females, over all years and ordered by popularity. Exercise 7.10 Calculate the number of babies born each decade, and arrange them in descending order. Calculating the decade may be the trickiest part of this question! Exercise 7.11 Calculate the most popular name for each year. Print out the answer for the years 2006-2015. This is tricky, but try Googling for hints. Exercises Part 2: US Births Now we are ready to return to the Birthdays data set to investigate some drivers of daily births in the US. Seasonality For this activity, we need to work with data aggregated across the states. Exercise 7.12 (Total Across States) Create a new data table, DailyBirths, that adds up all the births for each day across all the states. Plot out daily births vs date. For all of the remaining exercises, start with your DailyBirths data frame. Exercise 7.13 (Examine Seasonality) To examine seasonality in birth rates, look at the number of births by week of the year (1-53) month of the year (January to December) Julian day (1-366) When are the most babies born? The fewest? Day of the Week Exercise 7.14 (Examine Patterns within the Week) To examine patterns within the week, make a box plot showing the number of births by day of the week. Interpret your results. Holidays Exercise 7.15 (Two Year Sample) Pick a two-year span of the Birthdays that falls in the 1980s, say, 1980/1981. Extract out the data just in this interval, calling it MyTwoYears. (Hint: filter(), year()). Plot out the births in this two-year span day by day. Color each date according to its day of the week. Make sure to choose your font size, line widths, and color scheme to make your figure legible. Explain the pattern that you see. The plot you generate for Exercise 7.15 should be generally consistent with the weekend effect and seasonal patterns we have already seen; however, a few days each year stand out as exceptions. We are going to examine the hypothesis that these are holidays. You can find a data set listing US federal holidays here. Read it in as follows:7 Holidays &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/US-Holidays.csv&quot;) %&gt;% mutate(date = as.POSIXct(lubridate::dmy(date))) Exercise 7.16 (Holidays) Now let’s update the plot from Exercise 7.15 to include the holidays. Add a variable to MyTwoYears called is_holiday. It should be TRUE when the day is a holiday, and FALSE otherwise. One way to do this is with the transformation verb %in%, for instance, is_holiday = date %in% Holidays$date. Add a geom_point layer to your plot that sets the color of the points based on the day of the week and the shape of the points based on whether or not the day is a holiday. Finally, some holidays seem to have more of an effect than others. It would be helpful to label them. Use geom_text with the holiday data to add labels to each of the holidays. Hints: 1. Start by making a new data table called MyHolidays that just contains the holidays in your selected two year window. 2. Start your geometry line with geom_text(data=MyHolidays). 3. You’ll have to make up a y-coordinate for each label. 4. You can set the orientation of each label with the angle argument; e.g., geom_text(data=MyHolidays, angle=40, ...). Geography Exercise 7.17 (Examine the Effect of Geography) In any way you choose, explore the effect of geography on birth patterns. For example, do parents in Minnesota have fewer winter babies than in other states? Which states have the largest increases or decreases in their portion of US births over time? Is the weekend effect less strong for states with a higher percentage of their populations living in rural areas? Pick any issue (not all of these) that interests you, explore it, and create a graphic to illustrate your findings. Superstition This article from FiveThirtyEight demonstrates that fewer babies are born on the 13th of each month, and the effect is even stronger when the 13th falls on a Friday. If you have extra time or want some extra practice, you can try to recreate the first graphic in the article. Appendix: R Functions Six Main Verbs Function/Operator Action Example select() Provides a subset of variables select(Birthdays, state, date, year, births) mutate() Creates a new variable mutate(Birthdays, year_short = year - 1900) filter() Provides a subset of rows filter(Birthdays, state %in% c(\"AK\",\"CA\",\"MA\")) arrange() Sorts the rows of a dataset arrange(Birthdays, desc(births)) summarize() Collapses rows into summaries of variables across rows summarise(Birthdays,total_births = sum(births), average_births = mean(births), nstates = n_distinct(state), ncases = n()) group_by() Collapses rows into summaries of variables across rows group_by(Birthdays, year, state) %&gt;% summarise(average = mean(births)) Logical/Boolean Operators Function/Operator Action Example == Checks whether two items are equal year == 2000 &gt; Checks whether left is greater than the right year &gt; 2000 &lt; Checks whether left is less than the right year &lt; 2000 &gt;= Checks whether left is greater than or equal to right year &gt;= 2000 &lt;= Checks whether left is less than or equal to right year &lt;= 2000 != Checks whether left is not equal to right year != 2000 %in% Checks whether left is in vector on right state %in% c(\"AK\",\"CA\",\"MA\") The fivethirtyeight package has more recent data.↩︎ Important note about = vs. ==: A single = is an assignment operator that assigns the value after the equal sign to the variable before the equal sign. We saw an example of this above with year_short = year - 1900. In order to compare whether two values are the same, we need to use the double equal == as in year == 1979.↩︎ The label = TRUE argument tells month to return a string abbreviation for the month instead of the month’s number.↩︎ The verbs head(n = 5), tail(n = 3) are often used just after an arrange to keep, e.g., only the first 5 entries or last 3 entries, where n specifies the number of entries to keep.↩︎ The point of the lubridate::dmy() function is to convert the character-string date stored in the CSV to a POSIX date-number.↩︎ "],["reshaping-data.html", "Topic 8 Reshaping Data Learning Goals Wide and Long Data Formats Example: The Daily Show Guests More Exercises: Practice Pivoting Longer Appendix: R Functions", " Topic 8 Reshaping Data Learning Goals Understand the difference between wide and long data format and distinguish the case (unit of observation) for a given data set Develop comfort in using pivot_wider and pivot_longer in the tidyr package You can download a template .Rmd of this activity here. Put the file in a folder Day_08 in your COMP_STAT_112 folder. Wide and Long Data Formats Additional reading: Wickham and Grolemund on pivoting, or Baumer, Kaplan, and Horton on reshaping data As we are transforming data, it is important to keep in mind what constitutes each case (row) of the data. For example, in the initial BabyNames data below, each case is a single name-sex-year combination. So if we have the same name and sex assigned at birth but a different year, that would be a different case. Table 8.1: Each case is one name-sex-year combination. year sex name count prop 1880 F Mary 7065 0.0723836 1880 F Anna 2604 0.0266790 1880 F Emma 2003 0.0205215 1880 F Elizabeth 1939 0.0198658 1880 F Minnie 1746 0.0178884 1880 F Margaret 1578 0.0161672 It is often necessary to rearrange your data in order to create visualizations, run statistical analysis, etc. We have already seen some ways to rearrange the data to change the unit of observation (also known as case). For example, what is the case after performing the following command? BabyNamesTotal &lt;- BabyNames %&gt;% group_by(name, sex) %&gt;% summarise(total = sum(count)) Each case now represents one name-sex combination: Table 8.2: Long format where each case is one name-sex combination. name sex total Aaban M 107 Aabha F 35 Aabid M 10 Aabir M 5 Aabriella F 32 Aada F 5 In this activity, we are going to learn two new operations to reshape and reorganize the data: pivot_wider() and pivot_longer(). Wider Example 8.1 We want to find the common names that are the most gender neutral (used roughly equally for males and females). How should we rearrange the data? Well, one nice way would be to have a single row for each name, and then have separate variables for the number of times that name is used for males and females. Using these two columns, we can then compute a third column that gives the ratio between these two columns. That is, we’d like to transform the data into a wide format with each of the possible values of the sex variable becoming its own column. The operation we need to perform this transformation is pivot_wider(). The inputs for this function are: values_from (total in this case) representing the variable to be divided into multiple new variables, names_from (the original variable sex in this case) that identifies the variable in the initial long format data whose values should become the names of the new variables in the wide format data. values_fill = 0 specifies that if there are, e.g., no females named Aadam, we should include a zero in the corresponding entry of the wide format table names_sort = TRUE dictates that the variables are listed in alphabetical order; when it is FALSE, they are listed in order of first appearance. Figure 8.1: Illustration of pivot_wider from tidyr cheatsheet. BabyWide &lt;- BabyNamesTotal %&gt;% pivot_wider(names_from = sex, values_from = total, values_fill = 0, names_sort = TRUE) Table 8.3: A wide format with one case per name enables us to examine gender balance. name F M Aaban 0 107 Aabha 35 0 Aabid 0 10 Aabir 0 5 Aabriella 32 0 Aada 5 0 Now we can choose common names with frequency greater than 25,000 for both males and females, and sort by the ratio to identify gender-neutral names. Neutral &lt;- BabyWide %&gt;% filter(M &gt; 25000, F &gt; 25000) %&gt;% mutate(ratio = pmin(M / F, F / M)) %&gt;% #pmin() stands for parallel min, finds the min(M/F, F/M) for each row arrange(desc(ratio)) Table 8.4: The most gender-neutral common names, in wide format. name F M ratio Kerry 48534 49596 0.9785870 Riley 100881 92789 0.9197867 Quinn 28283 31230 0.9056356 Jackie 90604 78405 0.8653591 Frankie 33236 40552 0.8195897 Jaime 49673 67582 0.7350034 Casey 76020 110165 0.6900558 Peyton 69256 47682 0.6884891 Pat 40123 26731 0.6662264 Jessie 167010 110027 0.6588049 Kendall 58026 33821 0.5828594 Jody 55691 31206 0.5603419 Longer Next, let’s filter these names to keep only those with a ratio of 0.5 or greater (no more than 2 to 1), and then switch back to long format. We can do this with the following pivot_longer() operation. It gathers the columns listed c(F,M) under the cols argument into a single column whose name is given by the names_to argument (“sex”), and includes the values in a column called total, which is the input to the values_to argument. Figure 8.2: Illustration of pivot_longer from tidyr cheatsheet. NeutralLong &lt;- Neutral %&gt;% filter(ratio &gt;= .5) %&gt;% pivot_longer(cols = c(`F`, `M`), names_to = &quot;sex&quot;, values_to = &quot;total&quot;) %&gt;% select(name, sex, total) %&gt;% arrange(name) Table 8.5: Long format for the most gender-neutral common names. name sex total Casey F 76020 Casey M 110165 Frankie F 33236 Frankie M 40552 Jackie F 90604 Jackie M 78405 Jaime F 49673 Jaime M 67582 Jessie F 167010 Jessie M 110027 Jody F 55691 Jody M 31206 Kendall F 58026 Kendall M 33821 Kerry F 48534 Kerry M 49596 Pat F 40123 Pat M 26731 Peyton F 69256 Peyton M 47682 Quinn F 28283 Quinn M 31230 Riley F 100881 Riley M 92789 Example: The Daily Show Guests The data associated with this article is available in the fivethirtyeight package, and is loaded into Daily below. It includes a list of every guest to ever appear on Jon Stewart’s The Daily Show. Note that when multiple people appeared together, each person receives their own line. Daily &lt;- daily_show_guests year google_knowledge_occupation show group raw_guest_list 1999 singer 1999-07-26 Musician Donny Osmond 1999 actress 1999-07-27 Acting Wendie Malick 1999 vocalist 1999-07-28 Musician Vince Neil 1999 film actress 1999-07-29 Acting Janeane Garofalo 1999 comedian 1999-08-10 Comedy Dom Irrera 1999 actor 1999-08-11 Acting Pierce Brosnan 1999 director 1999-08-12 Media Eduardo Sanchez and Daniel Myrick 1999 film director 1999-08-12 Media Eduardo Sanchez and Daniel Myrick 1999 american television personality 1999-08-16 Media Carson Daly 1999 actress 1999-08-17 Acting Molly Ringwald 1999 actress 1999-08-18 Acting Sarah Jessica Parker Popular guests Exercise 8.1 Create the following table containing 19 columns. The first column should have the ten guests with the highest number of total apperances on the show, listed in descending order of number of appearances. The next 17 columns should show the number of appearances of the corresponding guest in each year from 1999 to 2015 (one per column). The final column should show the total number of appearances for the corresponding guest over the entire duration of the show (these entries should be in decreasing order). Hint: the function rowSums() adds up all of the entries in each row of a table. Try using it in a mutate. Recreating a graphic The original data has 18 different entries for the group variable: unique(Daily$group) ## [1] &quot;Acting&quot; &quot;Comedy&quot; &quot;Musician&quot; &quot;Media&quot; NA ## [6] &quot;Politician&quot; &quot;Athletics&quot; &quot;Business&quot; &quot;Advocacy&quot; &quot;Political Aide&quot; ## [11] &quot;Misc&quot; &quot;Academic&quot; &quot;Government&quot; &quot;media&quot; &quot;Clergy&quot; ## [16] &quot;Science&quot; &quot;Consultant&quot; &quot;Military&quot; In order to help you recreate the first figure from the article, I have added a new variable with three broader groups: (i) entertainment; (ii) politics, business, and government, and (iii) commentators. The data is available here. We will learn in the next activity what the inner_join in this code chunk is doing. DailyGroups &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/daily-group-assignment.csv&quot;) Daily &lt;- Daily %&gt;% inner_join(DailyGroups, by = c(&quot;group&quot; = &quot;group&quot;)) year google_knowledge_occupation show group raw_guest_list broad_group 1999 actor 1999-01-11 Acting Michael J. Fox Entertainment 1999 comedian 1999-01-12 Comedy Sandra Bernhard Entertainment 1999 television actress 1999-01-13 Acting Tracey Ullman Entertainment 1999 film actress 1999-01-14 Acting Gillian Anderson Entertainment 1999 actor 1999-01-18 Acting David Alan Grier Entertainment 1999 actor 1999-01-19 Acting William Baldwin Entertainment Exercise 8.2 Using the group assignments contained in the broad_group variable, recreate the graphic from the article, with three different lines showing the fraction of guests in each group over time. Hint: first think about what your case should be for the glyph-ready form. More Exercises: Practice Pivoting Longer A typical situation that requires a pivot_longer command is when the columns represent the possible values of a variable. Table 8.6 shows example data set from opendataforafrica.org with different years in different columns. You can find the data here. Lesotho &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/Lesotho.csv&quot;) Table 8.6: Financial statistics about Lesotho. Category 2010 2011 2012 2013 2014 Total Population 2.01 2.03 2.05 2.07 2.10 Gross Domestic Product 2242.30 2560.99 2494.60 2267.96 1929.28 Average Interest Rate on Loans 11.22 10.43 10.12 9.92 10.34 Inflation Rate 3.60 4.98 6.10 5.03 4.94 Average Interest Rate on Deposits 3.68 2.69 2.85 2.85 2.72 Exercise 8.3 (Practice pivoting longer) Make a side-by-side bar chart with the year on the horizontal axis, and three side-by-side vertical columns for average interest rate on deposits, average interest rate on loans, and inflation rate for each year. In order to get the data into glyph-ready form, you’ll need to use pivot_longer. Hint: pivot_longer uses the dplyr::select() notation, so you can, e.g., list the columns you want to select, use colon notation, or use starts_with(a string). See Wickham and Grolemund for more information. Appendix: R Functions Reshaping Functions Function/Operator Action Example pivot_wider() Takes a long data set and spreads information in columns into many new variables (wider) BabyNamesTotal %&gt;% pivot_wider(names_from = sex, values_from = total, values_fill = 0, names_sort = TRUE) pivot_longer() Takes a wide data set and gathers information in columns into fewer variables (longer) Neutral %&gt;% pivot_longer(cols = c(F,M), names_to = \"sex\", values_to = \"total\") "],["joining-two-data-frames.html", "Topic 9 Joining Two Data Frames Learning Goals Joins Bicycle-Use Patterns Appendix: R Functions", " Topic 9 Joining Two Data Frames Learning Goals Understand the concept of keys and variables that uniquely identify rows or cases Understand the different types of joins, different ways of combining two data frames together Develop comfort in using mutating joins: left_join, inner_join and full_join in the dplyr package Develop comfort in using filtering joins: semi_join, anti_join in the dplyr package You can download a template .Rmd of this activity here. Put it in a folder Day_09 in COMP_STAT_112. Joins A join is a verb that means to combine two data tables. These tables are often called the left and the right tables. There are several kinds of join. All involve establishing a correspondence — a match — between each case in the left table and zero or more cases in the right table. The various joins differ in how they handle multiple matches or missing matches. Establishing a match between cases A match between a case in the left data table and a case in the right data table is made based on the values in keys, variables that uniquely define observations in a data table. As an example, we’ll examine the following two tables on grades and courses. The Grades file has one case for each class of each student, and includes variables describing the ID of the student (sid), the ID of the session (section/class), and the grade received. The Courses file has variables for the ID of the session (section/class), the department (coded), the level, the semester, the enrollment, and the ID of the instructor (iid). We show a few random rows of each table below. Table 9.1: Student grades. sid sessionID grade S31842 session2207 B+ S32436 session3172 S S31671 session3435 A- S31929 session3512 NC Table 9.2: Information about each course section. sessionID dept level sem enroll iid session2780 O 300 SP2003 21 inst298 session3520 k 300 FA2004 16 inst463 session1965 d 100 FA2001 25 inst414 session3257 o 200 SP2004 16 inst312 Keys There are two types of keys: A primary key uniquely identifies an observation in its own table. A foreign key uniquely identifies an observation in another table. Example 9.1 What variables are the primary keys for Grades? What variables are the primary keys for Courses? Solution sid (student ID) and sessionID (class ID) are the primary keys for Grades as they unique identify each case. # can check to make sure that there are no combinations of sid and session ID that have more than 1 row Grades %&gt;% count(sid, sessionID) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 3 ## # … with 3 variables: sid &lt;chr&gt;, sessionID &lt;chr&gt;, n &lt;int&gt; sessionID (class ID) and dept are the primary keys for Courses as they unique identify each case. You may have thought that sessionID alone was sufficient; however, if a course is cross-listed, then it may have multiple departments listed. # check to make sure that there are no combinations # of session ID and dept that have more than 1 row Courses %&gt;% count(sessionID, dept) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 3 ## # … with 3 variables: sessionID &lt;chr&gt;, dept &lt;chr&gt;, n &lt;int&gt; Example 9.2 What variables are the foreign keys in Grades for Courses? What variables are the foreign keys in Courses for Grades? Solution sessionID (class ID) is part of a foreign key in Grades for Courses. If we group_by and summarize first to deal with cross-listed courses, then sessionID is the foreign key in Grades for Courses. # can check to make sure that once we combine enrollment between cross-listed courses, each session ID only has 1 row Courses %&gt;% group_by(sessionID, level, sem, iid) %&gt;% summarize(total_enroll = sum(enroll)) %&gt;% count(sessionID) %&gt;% filter(n &gt; 1) ## # A tibble: 0 × 4 ## # Groups: sessionID, level, sem [0] ## # … with 4 variables: sessionID &lt;chr&gt;, level &lt;dbl&gt;, sem &lt;chr&gt;, n &lt;int&gt; sessionID in Courses is part of a foreign key that uniquely identify rows in Grades. Matching In order to establish a match between two data tables, You specify which variables (or keys) to use. Each variable is specify as a pair, where one variable from the left table corresponds to one variable from the right table. Cases must have exactly equal values in the left variable and right variable for a match to be made. Mutating joins The first class of joins are mutating joins, which add new variables (columns) to the left data table from matching observations in the right table.8 The main difference in the three mutating join options in this class is how they answer the following questions: What happens when a case in the right table has no matches in the left table? What happens when a case in the left table has no matches in the right table? Three mutating join functions: left_join(): the output has all cases from the left, regardless if there is a match in the right, but discards any cases in the right that do not have a match in the left. inner_join(): the output has only the cases from the left with a match in the right. full_join(): the output has all cases from the left and the right. This is less common than the first two join operators. When there are multiple matches in the right table for a particular case in the left table, all three of these mutating join operators produce a separate case in the new table for each of the matches from the right. Example 9.3 (Average class size: varying viewpoints) Determine the average class size from the viewpoint of a student and the viewpoint of the Provost / Admissions Office. Solution Provost Perspective: The Provost counts each section as one class and takes the average of all classes. We have to be a little careful and cannot simply do mean(Courses$enroll), because some sessionID appear twice on the course list. Why is that?9 We can still do this from the data we have in the Courses table, but we should aggregate by sessionID first: CourseSizes &lt;- Courses %&gt;% group_by(sessionID) %&gt;% summarise(total_enroll = sum(enroll)) mean(CourseSizes$total_enroll) ## [1] 21.45251 Student Perspective: To get the average class size from the student perspective, we can join the enrollment of the section onto each instance of a student section. Here, the left table is Grades, the right table is CourseSizes, we are going to match based on sessionID, and we want to add the variable total_enroll from CoursesSizes. We’ll use a left_join since we aren’t interested in any sections from the CourseSizes table that do not show up in the Grades table; their enrollments should be 0, and they are not actually seen by any students. Note, e.g., if there were 100 extra sections of zero enrollments on the Courses table, this would change the average from the Provost’s perspective, but not at all from the students’ perspective. If the by = is omitted from a join, then R will perform a natural join, which matches the two tables by all variables they have in common. In this case, the only variable in common is the sessionID, so we would get the same results by omitting the second argument. In general, this is not reliable unless we check ahead of time which variables the tables have in common. If two variables to match have different names in the two tables, we can write by = c(\"name1\" = \"name2\"). EnrollmentsWithClassSize &lt;- Grades %&gt;% left_join(CourseSizes, by = c(&quot;sessionID&quot; = &quot;sessionID&quot;) ) %&gt;% select(sid, sessionID, total_enroll) Table 9.3: Student enrollments with the section size. sid sessionID total_enroll S31842 session2207 11 S32436 session3172 51 S31671 session3435 15 S31929 session3512 13 AveClassEachStudent &lt;- EnrollmentsWithClassSize %&gt;% group_by(sid) %&gt;% summarise(ave_enroll = mean(total_enroll, na.rm = TRUE)) Table 9.4: Average class size seen by each individual student. sid ave_enroll S32169 34.25000 S32121 23.33333 S32472 24.53846 S31467 23.82353 The na.rm = TRUE here says that if the class size is not available for a given class, we do not count that class towards the student’s average class size. What is another way to capture the same objective? We could have used an inner_join instead of a left_join when we joined the tables to eliminate any entries from the left table that did not have a match in the right table. Now we can take the average of the AveClassEachStudent table, counting each student once, to find the average class size from the student perspective: mean(AveClassEachStudent$ave_enroll) ## [1] 24.41885 We see that the average size from the student perspective (24.4) is greater than the average size from the Provost’s perspective (21.5). Filtering joins The second class of joins are filtering joins, which select specific cases from the left table based on whether they match an observation in the right table. semi_join(): discards any cases in the left table that do not have a match in the right table. If there are multiple matches of right cases to a left case, it keeps just one copy of the left case. anti_join(): discards any cases in the left table that have a match in the right table. A particularly common employment of these joins is to use a filtered summary as a comparison to select a subset of the original cases, as follows. Example 9.4 (semi_join to compare to a filtered summary) Find a subset of the Grades data that only contains data on the four largest sections in the Courses data set. Solution LargeSections &lt;- Courses %&gt;% group_by(sessionID) %&gt;% summarise(total_enroll = sum(enroll)) %&gt;% arrange(desc(total_enroll)) %&gt;% head(4) GradesFromLargeSections &lt;- Grades %&gt;% semi_join(LargeSections) Example 9.5 (semi_join) Use semi_join() to create a table with a subset of the rows of Grades corresponding to all classes taken in department J. Solution There are multiple ways to do this. We could do a left join to the Grades table to add on the dept variable, and then filter by department, then select all variables except the additional dept variable we just added. Here is a more direct way with semi_join that does not involve adding and subtracting the extra variable: JCourses &lt;- Courses %&gt;% filter(dept == &quot;J&quot;) JGrades &lt;- Grades %&gt;% semi_join(JCourses) Let’s double check this worked. Here are the first few entries of our new table: Table 9.5: Student enrollments in Department J. sid sessionID grade S31185 session1791 A- S31185 session1792 B+ S31185 session1794 B- S31185 session1795 C+ The first entry is for session1791. Which department is that course in? What department should it be? (Courses %&gt;% filter(sessionID == &quot;session1791&quot;)) ## # A tibble: 1 × 6 ## sessionID dept level sem enroll iid ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 session1791 J 100 FA1993 22 inst223 Great, it worked! But that only checked the first one. What if we want to double check all of the courses included in Table 9.5? We can add on the department and do a group by to count the number from each department in our table. JGrades %&gt;% left_join(Courses) %&gt;% count(dept) ## # A tibble: 1 × 2 ## dept n ## &lt;chr&gt; &lt;int&gt; ## 1 J 148 More join practice Exercise 9.1 Use your wrangling skills to answer the following questions. Hint 1: start by thinking about what tables you might need to join (if any) and identifying the corresponding variables to match. Hint 2: you’ll need an extra table to convert grades to grade point averages. I’ve given you the code below. How many student enrollments in each department? What’s the grade-point average (GPA) for each student? The average student GPA? Hint: There are some “S” and “AU” grades that we want to exclude from GPA calculations. What is the correct variant of join to accomplish this? What fraction of grades are below B+? What’s the grade-point average for each instructor? We cannot actually compute the correct grade-point average for each department from the information we have. The reason why is due to cross-listed courses. Students for those courses could be enrolled under either department, and we do not know which department to assign the grade to. There are a number of possible workarounds to get an estimate. One would be to assign all grades in a section to the department of the instructor, which we’d have to infer from the data. Instead, start by creating a table with all cross-listed courses. Then use an anti_join to eliminate all cross-listed courses. Finally, use an inner_join to compute the grade-point average for each department. (GPAConversion &lt;- tibble(grade = c(&quot;A+&quot;, &quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;), gp = c(4.3, 4, 3.7, 3.3, 3, 2.7, 2.3, 2, 1.7, 1.3, 1, 0.7, 0))) ## # A tibble: 13 × 2 ## grade gp ## &lt;chr&gt; &lt;dbl&gt; ## 1 A+ 4.3 ## 2 A 4 ## 3 A- 3.7 ## 4 B+ 3.3 ## 5 B 3 ## 6 B- 2.7 ## 7 C+ 2.3 ## 8 C 2 ## 9 C- 1.7 ## 10 D+ 1.3 ## 11 D 1 ## 12 D- 0.7 ## 13 NC 0 Bicycle-Use Patterns In this activity, you’ll examine some factors that may influence the use of bicycles in a bike-renting program. The data come from Washington, DC and cover the last quarter of 2014. Figure 9.1: A typical Capital Bikeshare station. This one is at Florida and California, next to Pleasant Pops. Figure 9.2: One of the vans used to redistribute bicycles to different stations. Two data tables are available: Trips contains records of individual rentals here Stations gives the locations of the bike rental stations here Here is the code to read in the data:10 data_site &lt;- &quot;https://bcheggeseth.github.io/112_fall_2022/data/2014-Q4-Trips-History-Data-Small.rds&quot; Trips &lt;- readRDS(gzcon(url(data_site))) Stations &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/DC-Stations.csv&quot;) The Trips data table is a random subset of 10,000 trips from the full quarterly data. Start with this small data table to develop your analysis commands. When you have this working well, you can access the full data set of more than 600,000 events by removing -Small from the name of the data_site. The full data is available here. Warm-up: Temporal patterns It’s natural to expect that bikes are rented more at some times of day, some days of the week, some months of the year than others. The variable sdate gives the time (including the date) that the rental started. Exercise 9.2 (Warm-up: temporal patterns) Make the following plots and interpret them: A density plot of the events versus sdate. Use ggplot() and geom_density(). A density plot of the events versus time of day. You can use mutate with lubridate::hour(), and lubridate::minute() to extract the hour of the day and minute within the hour from sdate. Hint: A minute is 1/60 of an hour, so create a field where 3:30 is 3.5 and 3:45 is 3.75. A histogram of the events versus day of the week. Facet your graph from (b) by day of the week. Is there a pattern? The variable client describes whether the renter is a regular user (level Registered) or has not joined the bike-rental organization (Causal). Do you think these two different categories of users show different rental behavior? How might it interact with the patterns you found in Exercise 9.2? Exercise 9.3 (Customer segmentation) Repeat the graphic from Exercise 9.2 (d) with the following changes: Set the fill aesthetic for geom_density() to the client variable. You may also want to set the alpha for transparency and color=NA to suppress the outline of the density function. Now add the argument position = position_stack() to geom_density(). In your opinion, is this better or worse in terms of telling a story? What are the advantages/disadvantages of each? Rather than faceting on day of the week, create a new faceting variable like this: mutate(wday = ifelse(lubridate::wday(sdate) %in% c(1,7), \"weekend\", \"weekday\")). What does the variable wday represent? Try to understand the code. Is it better to facet on wday and fill with client, or vice versa? Of all of the graphics you created so far, which is most effective at telling an interesting story? Mutating join practice: Spatial patterns Exercise 9.4 (Visualization of bicycle departures by station) Use the latitude and longitude variables in Stations to make a visualization of the total number of departures from each station in the Trips data. To layer your data on top of a map, start your plotting code as follows: myMap&lt;-get_stamenmap(c(-77.1,38.87,-76.975,38.95),zoom=14,maptype=&quot;terrain&quot;) ggmap(myMap) + ... Note: If you want to use Google Maps instead, which do look a bit nicer, you’ll need to get a Google Maps API Key (free but requires credit card to sign up), and then you can use get_map instead of get_stamenmap. Exercise 9.5 Only 14.4% of the trips in our data are carried out by casual users.11 Create a map that shows which area(s) of the city have stations with a much higher percentage of departures by casual users. Interpret your map. Filtering join practice: Spatiotemporal patterns Exercise 9.6 (High traffic points) Consider the following: Make a table with the ten station-date combinations (e.g., 14th &amp; V St., 2014-10-14) with the highest number of departures, sorted from most departures to fewest. Hint: as_date(sdate) converts sdate from date-time format to date format. Use a join operation to make a table with only those trips whose departures match those top ten station-date combinations from part (a). Group the trips you filtered out in part (b) by client type and wday (weekend/weekday), and count the total number of trips in each of the four groups. Interpret your results. Appendix: R Functions Mutating Joins Function/Operator Action Example left_join() Joins two data sets together (adding variables from right to left data sets), keeping all rows of the left or 1st dataset Grades %&gt;% left_join(CourseSizes, by = c(\"sessionID\" = \"sessionID\")) inner_join() Joins two data sets together (adding variables from right to left data sets), keeping only rows in left that have a match in right Grades %&gt;% inner_join(GPAConversion) full_join() Joins two data sets together (adding variables from right to left data sets), keeping all rows of both left and right datasets Grades %&gt;% full_join(CourseSizes, by = c(\"sessionID\" = \"sessionID\")) Filtering Joins Function/Operator Action Example semi_join() Keep only rows in left that have a match in right Grades %&gt;% semi_join(LargeSections) anti_join() Keep only rows in left that don’t have a match in right Grades %&gt;% anti_join(CrossListedSections) There is also a right_join() that adds variables in the reverse direction from the left table to the right table, but we do not really need it as we can always switch the roles of the two tables.↩︎ They are courses that are cross-listed in multiple departments!↩︎ Important: To avoid repeatedly re-reading the files, start the data import chunk with {r cache = TRUE} rather than the usual {r}.↩︎ We can compute this statistic via mean(Trips$client==\"Casual\").↩︎ "],["categorical-variables-as-factors.html", "Topic 10 Categorical Variables as Factors Learning Goals Example: Grade Distribution Appendix: R Functions", " Topic 10 Categorical Variables as Factors Learning Goals Understand the difference between a variable stored as a character vs. a factor Be able to convert a character variable to a factor Develop comfort in manipulating the order and values of a factor with the forcats package to improve summaries and visualizations. You can download a template .Rmd of this activity here. Put this in a folder Day_10 in your COMP_STAT_112 folder. Example: Grade Distribution Grades &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/grades.csv&quot;) Grades &lt;- Grades %&gt;% select(sid, sessionID, grade) %&gt;% distinct(sid, sessionID, .keep_all = TRUE) We will continue with the grades data from the previous activity. Here is a sample to remember what it looks like: Table 10.1: Student grades. sid sessionID grade S31842 session2207 B+ S32436 session3172 S S31671 session3435 A- S31929 session3512 NC Here is a bar chart of the grade distribution: ggplot(Grades, aes(x = grade)) + geom_bar() We can also wrangle a table that just has each grade and the number of times it appears: GradeDistribution &lt;- Grades %&gt;% group_by(grade) %&gt;% summarize(count = n()) # Alternatively, we can use the count() function the creates a variable called n Grades %&gt;% count(grade) Table 10.2: Grade distribution. grade count A 1506 A- 1381 AU 27 B 804 B- 330 B+ 1003 C 137 C- 52 C+ 167 D 18 D- 6 D+ 8 NC 17 S 388 What could be improved about this graphic and table? The grades are listed alphabetically, which isn’t particularly meaningful. Why are they listed that way? Because the variable grade is a character string type: class(Grades$grade) ## [1] &quot;character&quot; When dealing with categorical variables that take a finite number of values (levels, formally), it is often useful to store the variable as a factor, and specify a meaningful order for the levels. For example, when the entries are stored as character strings, we cannot use the levels command to see the full list of values: levels(Grades$grade) ## NULL Converting to factor Let’s first convert the grade variable to a factor: Grades &lt;- Grades %&gt;% mutate(grade = factor(grade)) Now we can see the levels: levels(Grades$grade) ## [1] &quot;A&quot; &quot;A-&quot; &quot;AU&quot; &quot;B&quot; &quot;B-&quot; &quot;B+&quot; &quot;C&quot; &quot;C-&quot; &quot;C+&quot; &quot;D&quot; &quot;D-&quot; &quot;D+&quot; &quot;NC&quot; &quot;S&quot; Moreover, the forcats package (part of tidyverse) allows us to manipulate these factors. Its commands include the following. Changing the order of levels fct_relevel(): manually reorder levels fct_infreq(): order levels from highest to lowest frequency fct_reorder(): reorder levels by values of another variable fct_rev(): reverse the current order Changing the value of levels fct_recode(): manually change levels fct_lump(): group together least common levels More details on these and other commands can be found on the forcats cheat sheet or in Wickham &amp; Grolemund’s chapter on factors. Example 10.1 (Reorder factors) Let’s reorder the grades so that they are in a more meaningful order for the bar chart above. Here are three options: Option 1: From high grade to low grade, with “S” and “AU” at the end: Grades %&gt;% mutate(grade = fct_relevel(grade, c(&quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;, &quot;S&quot;, &quot;AU&quot;))) %&gt;% ggplot(aes(x = grade)) + geom_bar() Option 2: In terms of ascending frequency: ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count), y = count)) + labs(x = &quot;grade&quot;) Option 3: In terms of descending frequency: ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count, .desc = TRUE), y = count)) + labs(x = &quot;grade&quot;) Example 10.2 (Recode factors) Because it may not be clear what “AU” and “S” stand for, let’s rename them to “Audit” and “Satisfactory”. Grades %&gt;% mutate(grade = fct_relevel(grade, c(&quot;A&quot;, &quot;A-&quot;, &quot;B+&quot;, &quot;B&quot;, &quot;B-&quot;, &quot;C+&quot;, &quot;C&quot;, &quot;C-&quot;, &quot;D+&quot;, &quot;D&quot;, &quot;D-&quot;, &quot;NC&quot;, &quot;S&quot;, &quot;AU&quot;))) %&gt;% mutate(grade = fct_recode(grade, &quot;Satisfactory&quot; = &quot;S&quot;, &quot;Audit&quot; = &quot;AU&quot;)) %&gt;% ggplot(aes(x = grade)) + geom_bar() Exercise 10.1 Now that you’ve developed your data visualization and wrangling skills, develop a research question to address with the grades and courses data, create a high quality visualization that addresses your research question, write a brief description of the visualization and include the insight you gain about the research question. Courses &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/courses.csv&quot;) Appendix: R Functions Changing the order of levels Function/Operator Action Example fct_relevel() manually reorder levels of a factor Grades %&gt;% mutate(grade = fct_relevel(grade, c(\"A\", \"A-\", \"B+\", \"B\", \"B-\", \"C+\", \"C\", \"C-\", \"D+\", \"D\", \"D-\", \"NC\", \"S\", \"AU\"))) fct_infreq() order levels from highest to lowest frequency ggplot(Grades) + geom_bar(aes(x = fct_infreq(grade))) fct_reorder() reorder levels by values of another variable ggplot(GradeDistribution) + geom_col(aes(x = fct_reorder(grade, count), y = count)) fct_rev() reverse the current order ggplot(Grades) + geom_bar(aes(x = fct_rev(fct_infreq(grade)))) Changing the value of levels Function/Operator Action Example fct_recode() manually change levels Grades %&gt;% mutate(grade = fct_recode(grade, \"Satisfactory\" = \"S\", \"Audit\" = \"AU\")) fct_lump() group together least common levels Grades %&gt;% mutate(grade = fct_lump(grade, n = 5)) "],["mini-project.html", "Topic 11 Mini-Project Learning Goals Data: Kiva", " Topic 11 Mini-Project Learning Goals Apply data wrangling and visualization skills to a new data set You can download a template .Rmd of this activity here. Data: Kiva Kiva is a non-profit that allows people from around the world to lend small amounts to others to start or grow a business, go to school, access clean energy, etc. Since its founding in 2005, more than $1.2 billion in loans to over 3 million borrowers have been funded. In this activity, we’ll examine some lending data from 2005-2012. Investigate the partners Data Table Kiva has field partners who generally act as intermediaries between borrowers and Kiva (lenders). They evaluate borrower risk, post loan requests on Kiva, and process payments. The following command loads a table with data on Kiva’s field partners. partners &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/kiva_partners2.csv&quot;) Examine the codebook for the partners table. Exercise 11.1 (Regional distribution) Make a summary table with only five columns: region (countries.region), total number of partners, total number of loans posted, total amount raised, and average loan size per loan posted. The four columns after region should all be on a per region basis; for example, the row for Central America should include average loan size per loan posted in Central America. Sort your table by total amount raised. Exercise 11.2 (Partners in Africa) Draw a map of all of the partners in Africa, with the size of the dot corresponding to the amount raised. Investigate the loans Data Table The loans table below contains information about individual loans to borrowers. # a random sample of 10,000 loans &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/kiva_loans_small.csv&quot;) Examine the codebook for the loans table. View the loans table and browse through some of the data (e.g., different sectors, uses, countries) Exercise 11.3 (Preprocessing) Consider the loans data and perform the following preprocessing steps and save the new data as loans2. Remove all rows where the funded amount is 0. Note that the date information about when a loan request was posted is separated out into different fields for year, month, day, hour, etc. It would be more helpful to have a single field for the exact time at which each loan was posted. We’ll do this in three steps. First, create (mutate) a new column by pasting together the year, month, and date, separated by hyphens: post_dt=paste(posted_yr, posted_mo, posted_day, sep='-'). Second, create a new column with the time: post_time=paste(posted_hr,posted_min,posted_sec, sep=':'). Third, using the ymd_hms command from lubridate, add a new column with the full date (including time of day): post_date=ymd_hms(paste(post_dt,post_time,sep=' ')). Repeat the previous part to add a column funded_date with the exact time at which each loan was funded. Create a new table called loans2 that only contains the following columns from loans: loan_id,status,funded_amount,paid_amount,sector,location.country,lat,lon,partner_id,post_date,funded_date Exercise 11.4 (Loans by country) Consider the loans2 table. Find the top 5 countries by number of loans. Find the top 5 countries by total funded loan amount. Exercise 11.5 (Sector analysis) Make a scatterplot with the number of loans in each sector on the x-axis and the average loan size in each sector on the y-axis. Instead of using points, use text with each sector’s name as the glyph. Hint: start by wrangling the data into glyph-ready form, with one row corresponding to one glyph. Putting them together Exercise 11.6 (Join practice) Join the countries.region variable from the partners table onto the loans2 table, in order to have a region associated with each loan. Save the output table as loans3. Exercise 11.7 (Defaults) Consider the following: Starting with loans3, create a new table DefaultData that only includes those loans whose status is either “defaulted” or “paid”. Make a density plot of the funded amount, split by laon status (“defaulted” or “paid”). That is, your plot should have two separate density curves on top of each other. Interpret the plot. Make a bar chart with 10 bars, such that each bar is a $1000 range of funding amount; that is, the first bar should be for $0-$1000, the second for $1001-$2000, and so forth. The bars should all have height equal to 1, but be filled with two colors: one for the percentage of loans in that interval bin that defaulted and one for the percentage that were paid back in full. Interpret your graphic. Starting with the data in DefaultData from part (a), make a table with four columns: partner_id, number of defaulted loans through that partner, number of loans completely paid back through that partner, and percentage of loans defaulted (the second column divided by the sum of the second and third columns). Sort your table from highest default percentage to lowest, and print out only those with at least a 10% default percentage. Hint: start by filtering out partners that have not had any defaulted loans. Exercise 11.8 (Funding time) Consider the following: Use the command days_to_fund = difftime(funded_date, post_date, units=\"days\") within mutate() to add a column to the loans3 data that has the number of days between the time a loan was posted and the time it was funded. Save your new table as loans4. The days_to_fund should always be positive, but there are some negative values, most likely due to data entry errors. Filter these out of the data table loans4. Make a bar chart with days to fund by region. Reorder the x-axis so that the regions are in order of ascending days to fund. Make a bar chart with days to fund by sector. Reorder the x-axis so that the sectors are in order of ascending days to fund. Make a scatterplot with funded_amount on the x-axis and days_to_fund on the y-axis. Color the points by region and set the transparency to 0.2. Add linear trendlines for each region. What are the trends? Exercise 11.9 (Your Own Question) Now that you are more familiar with the data, investigate your own research question and address it with a summary table or a data visualization. "],["exploratory-data-analysis.html", "Topic 12 Exploratory Data Analysis Learning Goals First Steps of a Data Analysis Understand the Basic Data Visualize and Describe the Data Formulate a Research Question Examples Practice: Flight Data", " Topic 12 Exploratory Data Analysis Learning Goals Understand the first steps that should be taken when you encounter a new data set Develop comfort in knowing how to explore data to understand it Develop comfort in formulating research questions You can download a template .Rmd of this activity here. Put it in a folder called Day12 in your Comp_Stat_112 folder. First Steps of a Data Analysis What are the first steps to take when you start a project or get a hold of a new data set? In a data science project, you will typically have a question or idea brought to you: How are people interacting with the new version of my software? How is weather in St. Paul changing in the last decade? What type of people are most likely to enroll in Obamacare? You will sometimes be given a dataset when asked one of these questions, or more often, a general description of the data you could get if you talked to the right people or interacted with the right software systems. In this section, we will talk about Exploratory Data Analysis (EDA), a name given to the process of “getting to know” a dataset, and trying to identify any meaningful insights within it. Grolemund and Wickham visualize the place of this “Understand” process with a simple diagram: Figure 12.1: The process of EDA, as described by Grolemund and Wickham. We view the process similarly: Understand the basic data that is available to you. Visualize and describe the variables that seem most interesting or relevant. Formulate a research question. Analyze the data related to the research question, starting from simple analyses to more complex ones. Interpret your findings, refine your research question, and return to step 4. Understand the Basic Data Start by understanding the data that is available to you. If you have a codebook, you have struck gold! If not (the more common case), you’ll need to do some detective work that often involves talking to people. At this stage, ask yourself: Where does my data come from? How was it collected?12 Is there a codebook? If not, how can I learn about it? Are there people I can reach out to who have experience with this data? Next, you need to load the data and clean it. Once the data is loaded, ask yourself about each table: What is an observation? How many observations are there? What is the meaning of each variable? What is the type of each variable (date, location, string, factor, number, boolean, etc.)? Some great methods to start with are the functions str() to learn about the numbers of variables and observations as well as the classes of variables head() to view the top of the data table (can specify the number of rows with n= ) tail() to view the bottom of the data table Here is an example: crime &lt;- read_csv(&quot;http://datasets.flowingdata.com/crimeRatesByState2005.csv&quot;) str(crime) ## spec_tbl_df [52 × 9] (S3: spec_tbl_df/tbl_df/tbl/data.frame) ## $ state : chr [1:52] &quot;United States&quot; &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; ... ## $ murder : num [1:52] 5.6 8.2 4.8 7.5 6.7 6.9 3.7 2.9 4.4 35.4 ... ## $ forcible_rape : num [1:52] 31.7 34.3 81.1 33.8 42.9 26 43.4 20 44.7 30.2 ... ## $ robbery : num [1:52] 140.7 141.4 80.9 144.4 91.1 ... ## $ aggravated_assault : num [1:52] 291 248 465 327 387 ... ## $ burglary : num [1:52] 727 954 622 948 1085 ... ## $ larceny_theft : num [1:52] 2286 2650 2599 2965 2711 ... ## $ motor_vehicle_theft: num [1:52] 417 288 391 924 262 ... ## $ population : num [1:52] 2.96e+08 4.55e+06 6.69e+05 5.97e+06 2.78e+06 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. state = col_character(), ## .. murder = col_double(), ## .. forcible_rape = col_double(), ## .. robbery = col_double(), ## .. aggravated_assault = col_double(), ## .. burglary = col_double(), ## .. larceny_theft = col_double(), ## .. motor_vehicle_theft = col_double(), ## .. population = col_double() ## .. ) ## - attr(*, &quot;problems&quot;)=&lt;externalptr&gt; head(crime) ## # A tibble: 6 × 9 ## state murder forcible_rape robbery aggravated_ass…¹ burgl…² larce…³ motor…⁴ popul…⁵ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 United States 5.6 31.7 141. 291. 727. 2286. 417. 2.96e8 ## 2 Alabama 8.2 34.3 141. 248. 954. 2650 288. 4.55e6 ## 3 Alaska 4.8 81.1 80.9 465. 622. 2599. 391 6.69e5 ## 4 Arizona 7.5 33.8 144. 327. 948. 2965. 924. 5.97e6 ## 5 Arkansas 6.7 42.9 91.1 387. 1085. 2711. 262. 2.78e6 ## 6 California 6.9 26 176. 317. 693. 1916. 713. 3.58e7 ## # … with abbreviated variable names ¹​aggravated_assault, ²​burglary, ³​larceny_theft, ## # ⁴​motor_vehicle_theft, ⁵​population tail(crime) ## # A tibble: 6 × 9 ## state murder forcible_rape robbery aggravated_ass…¹ burgl…² larce…³ motor…⁴ popul…⁵ ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Vermont 1.3 23.3 11.7 83.5 492. 1686. 103. 618814 ## 2 Virginia 6.1 22.7 99.2 155. 392. 2035 211. 7563887 ## 3 Washington 3.3 44.7 92.1 206. 960. 3150. 784. 6261282 ## 4 West Virginia 4.4 17.7 44.6 206. 621. 1794 210 1803920 ## 5 Wisconsin 3.5 20.6 82.2 135. 441. 1993. 227. 5541443 ## 6 Wyoming 2.7 24 15.3 188. 476. 2534. 145. 506242 ## # … with abbreviated variable names ¹​aggravated_assault, ²​burglary, ³​larceny_theft, ## # ⁴​motor_vehicle_theft, ⁵​population Finally, ask yourself about the relationships between tables: What variables are keys and link the tables (i.e., which variables can you use in join commands)? Visualize and Describe the Data Once you have the data loaded and cleaned, it is usually helpful to do some univariate visualization; e.g., plotting histograms, densities, and box plots of different variables. You might ask questions such as: What do you see that is interesting? Which values are most common or unusual (outliers)? Is there a lot of missing data? What type of variation occurs within the individual variables? What might be causing the interesting findings? How could you figure out whether your ideas are correct? Once you have done some univariate visualization, you might examine the covariation between different variables. One convenient way to do this is with a pairs plot. Here are three different versions of such plots based on 2005 crime data (rates per 100,000 population) from Chapter 6 of Visualize This, by Nathan Yau. The main point of such plots is not necessarily to draw any conclusions, but help generate more specific research questions and hypotheses. crime2 &lt;- crime %&gt;% filter(state != &quot;District of Columbia&quot;, state != &quot;United States&quot;) pairs(crime2[, 2:9], panel = panel.smooth) ggpairs(crime2[, 2:9], aes(alpha = 0.4)) lowerFn &lt;- function(data, mapping, method = &quot;lm&quot;, ...) { p &lt;- ggplot(data = data, mapping = mapping) + geom_point(colour = &quot;blue&quot;) + geom_smooth(method = method, color = &quot;red&quot;, ...) p } ggpairs( crime2[, 2:9], lower = list(continuous = wrap(lowerFn, method = &quot;lm&quot;)), diag = list(continuous = wrap(&quot;barDiag&quot;, colour = &quot;blue&quot;)), upper = list(continuous = wrap(&quot;cor&quot;, size = 5)) ) Formulate a Research Question You will often end up with a lot of data, and it can be easy to be overwhelmed. How should you get started? One easy idea is to brainstorm ideas for research questions, and pick one that seems promising. This process is much easier with more than one brain! You will often be working off of a broad question posed by your business, organization, or supervisor, and be thinking about how to narrow it down. To do so, you can again revisit questions like “What patterns do you see?” or “Why might they be occurring?” Examples Here are some exploratory data analysis examples I like: Crime mapping Changes in fine particle air pollution in the US Married people have more sex13 Tropical storm analysis Practice: Flight Data Let’s practice these steps using data about flight delays from Kaggle. You have access to the data for airlines, airports, and flights. There are three tables of data: airlines &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/airlines.csv&quot;) airports &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/airports.csv&quot;) flights &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/flights_jan_jul_sample2.csv&quot;) Note that the full set of flight data has more than 5.8 million flights. To start, I have given you a subset that includes all flights in the first 15 days of January 2015 and in the first 15 days of July 2015. If at the end you wish to try your analysis on the whole data set, you can download the original .csv file from the Kaggle page and substitute a link to it in the code chunk above. There is a ton of data here, and it can be easy to be overwhelmed. We are going to focus our exploration a bit by considering the following broad research question: which flights are most likely to be delayed? Exercise 12.1 (Data source) Where does this data come from? Who collected it? Exercise 12.2 (Explore codebook) This data set comes with a codebook on the Kaggle site. Have a look at the codebook to understand which variables are contained in each of the three tables. For example, what are the levels of CANCELLATION_REASON and what do they mean? What is the unit of observation for each table? Exercise 12.3 (Possible joins) What variables link the three tables? How could you join data from one table to another? Exercise 12.4 (Visualize and describe the data) Use some univariate and bivariate visualizations to start to explore the questions mentioned above: What do you see that is interesting? Which values are most common or unusual (outliers)? Is there a lot of missing data? What type of variation occurs within the individual variables? What might be causing the interesting findings? How could you figure out whether your ideas are correct? Exercise 12.5 (Formulate a specific research question) Based on your preliminary visualizations and exploration of the date, formulate a more specific research question/hypothesis within this broad area of understanding the causes of flight delays. Exercise 12.6 (Share a visualization) Develop a single visualization to share with the class that tells a story about your more specific research question/hypothesis. Note: the story may very well be something along the lines of “we thought variable X would affect flight delays in way Y, but the evidence does not support that.” Particularly important questions about how it was collected include WHO (whether it is a sample of a larger data set, and, if so, how the sampling was done? Randomly? All cases during a specific time frame? All data for a selected set of users?), WHEN (is this current data or historical? what events may have had an impact?), WHAT (what variables were measured? how was it measured, self-reported through a questionnaire or measured directly?), WHY (who funded the data collection? for what purposes what the data collected? to whose benefit was the data collected?) Answers to such questions strongly impact the conclusions you will be able to draw from the data.↩︎ The graphics in this one are a bit more developed than you would really see in an exploratory analysis, but I think the progression of visualizations is interesting and follows an exploratory story.↩︎ "],["data-import.html", "Topic 13 Data Import Learning Goals Finding, Importing, and Cleaning Data Additional Practice", " Topic 13 Data Import Learning Goals Develop comfort in finding an existing data set to import into R Develop comfort in importing data of a variety of file types into R Understand and implement the data cleaning process to make values consistent Understand the implications of different ways of dealing with missing values with replace_na and drop_na You can download a template .Rmd of this activity here. Finding, Importing, and Cleaning Data Additional resources and readings: 1. Data Import Cheat Sheet 2. readr documentation 3. Data import from Wickham and Grolemund 4. Missing data from Wickham and Grolemund 5. Data intake from Baumer, Kaplan, and Horton 6. Using the import wizard from Prof. Lendway In practice, data science is not as glamorous as building fancy classifiers and creating visualizations all the time. Data scientists spend 80% of their time acquiring and cleaning data. While the skill of data acquisition is best learned through experience, this section of the course will outline the most common approaches to acquiring data. When importing and cleaning a dataset, take careful notes in your R Markdown. Explain where you found the dataset (the source). Record the steps you took to clean and import the data in case somebody else needs to replicate your analysis. You should also make sure to cite and credit the creator of the dataset. Finding Existing Data Sets Figure 13.1: An example Google search. The easiest way to get data is by finding an existing dataset that has been created by somebody else. Search engines such as Google can be excellent tools, especially when using file type filters. For example, if you are looking for a dataset about movie reviews, you might search for “movie reviews filetype:csv”. You could also try searching for other common filetypes that are compatible with R, such as .tsv, .xls, .xlsx, or .rds. Another good resource for datasets are compendiums of datasets such as the excellent and continuously-evolving awesome-public-datasets GitHub repo, Kaggle datasets or the data.world website website. You can find links to other similar compendiums at the end of the awesome-public-datasets page. Loading Datasets Once you have a dataset, it’s time to load it into R. Don’t be frustrated if this step takes some time. The table below lists some common data import functions and when you would use them. Function Use when read_csv() data are saved in .csv (comma delimited or comma separated values) format - you can save Excel files and Google Sheets in this format read_delim() data are saved in other delimited formats (tab, space, etc.) read_sheet() data are in a Google Sheet st_read() reading in a shapefile A few tips: When reading in data from a file, one tip is to initially use the Import Wizard to help write the code. DO NOT use it to import the data as you will need the code to read in the data in order to knit your document. Prof. Lendway has posted a video tutorial on the Import Wizard The import functions read_csv, read_csv2, and read_tsv from the readr package are faster than their counterparts read.csv, read.csv2, and read.tsv from the base package for large files. They also have more flexible parsers (e.g., for dates, times, percentages). We recommend you use these functions instead of the base functions like read.csv. The package fread has other import functions and is also faster for large datasets. For smaller data sets (say 1MB or less), there won’t be that much difference in time for the three different packages. read_csv2 is for semi-colon delimited files, whereas read_csv is for comma delimited files. The readr functions automatically guess the type of data in each column (e.g., character, double, integer). You will often see a message just after the import telling you what it chose for each column. If you think there is an issue, you can use the function problems() to detect problems, and/or specify how the columns should be imported. See the section on “column specification” in the Data Import Cheat Sheet for more info. If you have trouble importing a dataset, try to first import it into a different data such as Google Sheets or Excel tool and then export it as a TSV or CSV before reading it into R. For really messy data, OpenRefine is complicated but powerful (YouTube demo). When you are importing a large file, you might want to first try importing a subset of the data. For example, if you want to take the first 17 rows only, you can write read_csv(\"file.csv\",n_max=17) Similarly, you might want to skip the first \\(n\\) lines of the file when importing, select only certain columns to read in, or choose a random subset of the rows. See the cheat sheet for instructions on these tasks or just google! Checking the Imported Datasets After reading in new data, it is ALWAYS a good idea to do some quick checks of the data. Here are two first steps that are especially useful: Open the data in the spreadsheet-like viewer with View(dataset_name) and take a look at it. Sort it by different variables by clicking on the arrows next to the variable name. Make sure there isn’t anything unexpected. Do a quick summary of the data. The code below is one way to do this. For quantitative variables, it provides summary statistics and will let you know if there are missing values. For factors (they need to be factors, not just character variables - the mutate() changes them to factors), it shows you counts for the top categories and tells you if there are any missing values. dataset_name %&gt;% mutate(across(where(is.character), as.factor)) %&gt;% summary() Cleaning Datasets Cleaning Categorical Variables First we want to make sure the factors are “clean”, meaning consistent values in the correct format. For example, true and TRUE and T will be three different factors. The easiest way to manage this is to look at the levels for the factor and replace values with a messy factor to a clean one. For example, the following code cleans up values in true/false values in column X in a data set called df: df &lt;- df %&gt;% mutate(X = fct_recode(X, &quot;TRUE&quot; = &quot;T&quot;, &quot;TRUE&quot; = &quot;true&quot;, &quot;FALSE&quot; = &quot;f&quot;, &quot;FALSE&quot; = &quot;N&quot;, &quot;FALSE&quot; = &quot;No&quot;)) Example 13.1 (Clean up the levels on the Messy IMDB 5000 dataset) We will use a slightly “messied” version of the IMDB 5000 Dataset, collected by chuansun76 on Kaggle.14 Use read_csv to load the IMDB 5000 dataset from “https://bcheggeseth.github.io/112_fall_2022/data/imdb_5000_messy.csv”, and save it as imdbMessy. Solution imdbMessy &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/imdb_5000_messy.csv&quot;)   b. Print out the variable names. Solution names(imdbMessy) #order = order in dataset ## [1] &quot;...1&quot; &quot;color&quot; &quot;director_name&quot; ## [4] &quot;num_critic_for_reviews&quot; &quot;duration&quot; &quot;director_facebook_likes&quot; ## [7] &quot;actor_3_facebook_likes&quot; &quot;actor_2_name&quot; &quot;actor_1_facebook_likes&quot; ## [10] &quot;gross&quot; &quot;genres&quot; &quot;actor_1_name&quot; ## [13] &quot;movie_title&quot; &quot;num_voted_users&quot; &quot;cast_total_facebook_likes&quot; ## [16] &quot;actor_3_name&quot; &quot;facenumber_in_poster&quot; &quot;plot_keywords&quot; ## [19] &quot;movie_imdb_link&quot; &quot;num_user_for_reviews&quot; &quot;language&quot; ## [22] &quot;country&quot; &quot;content_rating&quot; &quot;budget&quot; ## [25] &quot;title_year&quot; &quot;actor_2_facebook_likes&quot; &quot;imdb_score&quot; ## [28] &quot;aspect_ratio&quot; &quot;movie_facebook_likes&quot; ls(imdbMessy) #order = alphabetical order ## [1] &quot;actor_1_facebook_likes&quot; &quot;actor_1_name&quot; &quot;actor_2_facebook_likes&quot; ## [4] &quot;actor_2_name&quot; &quot;actor_3_facebook_likes&quot; &quot;actor_3_name&quot; ## [7] &quot;aspect_ratio&quot; &quot;budget&quot; &quot;cast_total_facebook_likes&quot; ## [10] &quot;color&quot; &quot;content_rating&quot; &quot;country&quot; ## [13] &quot;director_facebook_likes&quot; &quot;director_name&quot; &quot;duration&quot; ## [16] &quot;facenumber_in_poster&quot; &quot;genres&quot; &quot;gross&quot; ## [19] &quot;imdb_score&quot; &quot;language&quot; &quot;movie_facebook_likes&quot; ## [22] &quot;movie_imdb_link&quot; &quot;movie_title&quot; &quot;num_critic_for_reviews&quot; ## [25] &quot;num_user_for_reviews&quot; &quot;num_voted_users&quot; &quot;plot_keywords&quot; ## [28] &quot;title_year&quot;   c. Examine the color variable. What are the existing values? Solution imdbMessy %&gt;% select(color) %&gt;% head() ## # A tibble: 6 × 1 ## color ## &lt;chr&gt; ## 1 Color ## 2 Color ## 3 Color ## 4 Color ## 5 &lt;NA&gt; ## 6 Color levels(factor(imdbMessy$color)) ## [1] &quot;B&amp;W&quot; &quot;Black and White&quot; &quot;color&quot; &quot;Color&quot; &quot;COLOR&quot; unique(imdbMessy$color) ## [1] &quot;Color&quot; NA &quot;Black and White&quot; &quot;COLOR&quot; &quot;color&quot; ## [6] &quot;B&amp;W&quot; How often does each color occur? Hint: table or count Solution imdbMessy %&gt;% count(color) ## # A tibble: 6 × 2 ## color n ## &lt;chr&gt; &lt;int&gt; ## 1 B&amp;W 10 ## 2 Black and White 199 ## 3 color 30 ## 4 Color 4755 ## 5 COLOR 30 ## 6 &lt;NA&gt; 19 table(imdbMessy$color) ## ## B&amp;W Black and White color Color COLOR ## 10 199 30 4755 30 The read_csv read in the color values as strings. For this exercise, let’s convert them to factor using the code: imdbMessy &lt;- imdbMessy %&gt;% mutate(color = factor(color)). Solution imdbMessy &lt;- imdbMessy %&gt;% mutate(color = factor(color)) Select what you think is the best value for each level and replace “messy” versions of the value with clean ones with the fct_recode function as shown above. How many entries are there for each level now? Solution imdbMessy &lt;- imdbMessy %&gt;% mutate(color = fct_recode(color, &quot;B&amp;W&quot; = &quot;Black and White&quot;, &quot;Color&quot; = &quot;color&quot;, &quot;Color&quot; = &quot;COLOR&quot;)) imdbMessy %&gt;% count(color) ## # A tibble: 3 × 2 ## color n ## &lt;fct&gt; &lt;int&gt; ## 1 B&amp;W 209 ## 2 Color 4815 ## 3 &lt;NA&gt; 19 Addressing Missing Data Finally, you should look for and address missing data, encoded as NA (not available) in R. There is no single formula for dealing with NAs. You should first look to see how many NAs appear in each column: colSums(is.na(imdbMessy)) Study the individual observations with NAs carefully. Why do you think they are missing? Are certain types of observations more likely to have NAs? You have several options for dealing with NAs (and they have different consequences): You can remove observations with one or more NAs (see drop_na). You can remove columns with many NA values. You can replace NAs with a reasonable value (called imputing values). This could be a default value (like zero), or the average for a column. (see replace_na) You can use packages such as missForest that fill in missing values with statistical predictions.15 There is no perfect approach to dealing with NAs, and you must think carefully about how removing or replacing missing data may affect your work. Example 13.2 (Address NA values in the Messy IMDB 5000 dataset) Consider imdbMessy. Print out the number of NAs in each of the columns. Solution colSums(is.na(imdbMessy)) ## ...1 color director_name ## 0 19 104 ## num_critic_for_reviews duration director_facebook_likes ## 50 15 104 ## actor_3_facebook_likes actor_2_name actor_1_facebook_likes ## 23 13 7 ## gross genres actor_1_name ## 884 0 7 ## movie_title num_voted_users cast_total_facebook_likes ## 0 0 0 ## actor_3_name facenumber_in_poster plot_keywords ## 23 13 153 ## movie_imdb_link num_user_for_reviews language ## 0 21 12 ## country content_rating budget ## 5 303 492 ## title_year actor_2_facebook_likes imdb_score ## 108 13 0 ## aspect_ratio movie_facebook_likes ## 329 0 Consider the actor_1_facebook_likes column. Take a look at a few of the records that have NA values. Why do you think there are NAs? Solution This variable is missing if actor_1_name is missing, which suggests that this movie doesn’t have an actor 1 listed. imdbMessy %&gt;% filter(is.na(actor_1_facebook_likes)) %&gt;% head() ## # A tibble: 6 × 29 ## ...1 color directo…¹ num_c…² durat…³ direc…⁴ actor…⁵ actor…⁶ actor…⁷ gross genres actor…⁸ ## &lt;dbl&gt; &lt;fct&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 4503 Color Léa Pool 23 97 4 NA &lt;NA&gt; NA 24784 Docum… &lt;NA&gt; ## 2 4520 Color Harry Ga… 12 105 0 NA &lt;NA&gt; NA 247740 Docum… &lt;NA&gt; ## 3 4721 Color U. Rober… 3 80 6 NA &lt;NA&gt; NA 2245 Docum… &lt;NA&gt; ## 4 4838 Color Pan Nalin 15 102 95 NA &lt;NA&gt; NA 16892 Docum… &lt;NA&gt; ## 5 4946 Color Amal Al-… NA 62 58 NA &lt;NA&gt; NA NA Docum… &lt;NA&gt; ## 6 4947 Color Andrew B… 12 90 0 NA &lt;NA&gt; NA NA Docum… &lt;NA&gt; ## # … with 17 more variables: movie_title &lt;chr&gt;, num_voted_users &lt;dbl&gt;, ## # cast_total_facebook_likes &lt;dbl&gt;, actor_3_name &lt;chr&gt;, facenumber_in_poster &lt;dbl&gt;, ## # plot_keywords &lt;chr&gt;, movie_imdb_link &lt;chr&gt;, num_user_for_reviews &lt;dbl&gt;, language &lt;chr&gt;, ## # country &lt;chr&gt;, content_rating &lt;chr&gt;, budget &lt;dbl&gt;, title_year &lt;dbl&gt;, ## # actor_2_facebook_likes &lt;dbl&gt;, imdb_score &lt;dbl&gt;, aspect_ratio &lt;dbl&gt;, ## # movie_facebook_likes &lt;dbl&gt;, and abbreviated variable names ¹​director_name, ## # ²​num_critic_for_reviews, ³​duration, ⁴​director_facebook_likes, ⁵​actor_3_facebook_likes, … Create a new dataframe that removes observations that have NAs for actor_1_facebook_likes. Solution imdbMessysub &lt;- imdbMessy %&gt;% filter(!is.na(actor_1_facebook_likes)) #Notice how I saved this new smaller dataset to a new name Create a second new dataframe that replaces NAs in actor_1_facebook_likes with 0. Solution imdbMessysub2 &lt;- imdbMessy %&gt;% mutate(actor_1_facebook_likes = replace_na(actor_1_facebook_likes,0)) Additional Practice Exercise 13.1 Find a dataset that is not built into R and is related to one of the following topics: Macalester College (On Moodle Assignment 12, there is a dataset available from Macalester College IR you could use) A personal hobby or passion Your hometown, or a place you have lived Load the data into R, make sure it is clean, and construct one interesting visualization of the data. Another option for part (e) would be to leave them as strings and then use string processing to define the levels. We’ll learn this technique soon.↩︎ This is dangerous unless you know what you are doing.↩︎ "],["regular-expressions.html", "Topic 14 Regular Expressions Learning Goals Regular Expressions and Character Strings Wrangling with Regular Expressions in R Practice: Fall 2021 Enrollment Exploration", " Topic 14 Regular Expressions Learning Goals Develop comfort in working with strings of text data Use regular expressions to search and replace, detect patterns, locate patterns, extract patterns, and separate text with the stringr package. You can download a template .Rmd of this activity here. Regular Expressions and Character Strings Regular expressions allow us to describe character patterns. Regular expressions allow us to:16 Search for particular items within a large body of text. For example, you may wish to identify and extract all email addresses. Replace particular items. For example, you may wish to clean up some poorly formatted HTML by replacing all uppercase tags with lowercase equivalents. Validate input. For example, you may want to check that a password meets certain criteria such as, a mix of uppercase and lowercase, digits and punctuation. Coordinate actions. For example, you may wish to process certain files in a directory, but only if they meet particular conditions. Reformat text. For example, you may want to split strings into different parts, each to form new variables. and more… Start by doing this interactive tutorial. Note that neither the tutorial nor regular expressions more generally are specific to R. Some of the syntax in the tutorial is slightly different from what we’ll use in R, but it will still help you get acclimated to the main ideas of regular expressions. Wrangling with Regular Expressions in R Now that we have some idea how regular expressions work, let’s examine how to use them to achieve various tasks in R. It will be helpful to have your cheat sheet handy. Many of these tasks can either be accomplished with functions from the base (built-in) package in R or from the stringr package, which is part of the Tidyverse. In general, the stringr functions are faster, which will be noticeable when processing a large amount of text data. example &lt;- &quot;The quick brown fox jumps over the lazy dog.&quot; example2 &lt;- &quot;Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could&quot; example3 &lt;- &quot;This is a test&quot; Search and replace patterns with str_replace or str_replace_all (stringr) To search for a pattern and replace it, we can use the function str_replace and str_replace_all in the stringr package. Note that str_replace only replaces the first matched pattern, while str_replace_all replaces all. Here are some examples: str_replace(example, &quot;quick&quot;, &quot;really quick&quot;) ## [1] &quot;The really quick brown fox jumps over the lazy dog.&quot; str_replace_all(example, &quot;(fox|dog)&quot;, &quot;****&quot;) ## [1] &quot;The quick brown **** jumps over the lazy ****.&quot; str_replace_all(example, &quot;(fox|dog).&quot;, &quot;****&quot;) # &quot;.&quot; for any character ## [1] &quot;The quick brown ****jumps over the lazy ****&quot; str_replace_all(example, &quot;(fox|dog)\\\\.$&quot;, &quot;****&quot;) # at end of sentence only, &quot;\\\\.&quot; only for a period ## [1] &quot;The quick brown fox jumps over the lazy ****&quot; str_replace_all(example, &quot;the&quot;, &quot;a&quot;) # case-sensitive only matches one ## [1] &quot;The quick brown fox jumps over a lazy dog.&quot; str_replace_all(example, &quot;[Tt]he&quot;, &quot;a&quot;) # # will match either t or T; could also make &quot;a&quot; conditional on capitalization of t ## [1] &quot;a quick brown fox jumps over a lazy dog.&quot; str_replace_all(example, &quot;[Tt]he&quot;, &quot;a&quot;) # first match only ## [1] &quot;a quick brown fox jumps over a lazy dog.&quot; Detect patterns with str_detect (stringr) example2 &lt;- &quot;Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could&quot; example3 &lt;- &quot;This is a test&quot; examples &lt;- c(example, example2, example3) pat &lt;- &quot;[^aeiouAEIOU ]{3}&quot; # Regular expression for three straight consonants. Note that I&#39;ve excluded spaces as well str_detect(examples, pat) # TRUE/FALSE if it detects pattern ## [1] TRUE TRUE FALSE str_subset(examples, pat) # Pulls out those that detects pattern ## [1] &quot;The quick brown fox jumps over the lazy dog.&quot; ## [2] &quot;Two roads diverged in a yellow wood, / And sorry I could not travel both / And be one traveler, long I stood / And looked down one as far as I could&quot; Locate patterns with str_locate str_locate(example, pat) # starting position and ending position of first match ## start end ## [1,] 23 25 Let’s check the answer: str_sub(example, 23, 25) ## [1] &quot;mps&quot; Extract patterns with str_extract and str_extract_all pat2 &lt;- &quot;[^aeiouAEIOU ][aeiouAEIOU]{2}[^aeiouAEIOU ]{1}&quot; # consonant followed by two vowels followed by a consonant str_extract(example2, pat2) # extract first match ## [1] &quot;road&quot; str_extract_all(example2, pat2, simplify = TRUE) # extract all matches ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] &quot;road&quot; &quot;wood&quot; &quot;coul&quot; &quot;tood&quot; &quot;look&quot; &quot;coul&quot; Count the number of characters with str_length str_length(example2) ## [1] 148 Convert a string to all lower case letters with str_to_lower str_to_lower(example2) ## [1] &quot;two roads diverged in a yellow wood, / and sorry i could not travel both / and be one traveler, long i stood / and looked down one as far as i could&quot; Split strings with separate df &lt;- tibble(ex = example2) df &lt;- separate(df, ex, c(&quot;line1&quot;, &quot;line2&quot;, &quot;line3&quot;, &quot;line4&quot;), sep = &quot; / &quot;) df$line1 ## [1] &quot;Two roads diverged in a yellow wood,&quot; df$line2 ## [1] &quot;And sorry I could not travel both&quot; df$line3 ## [1] &quot;And be one traveler, long I stood&quot; df$line4 ## [1] &quot;And looked down one as far as I could&quot; Note: The function separate is in the tidyr package. Practice: Fall 2021 Enrollment Exploration The tibble courses has the Fall 2021 enrollment information from the Macalester Registrar’s website, which we could gain with web scraping tools. fall2021 &lt;- read_html(&quot;https://www.macalester.edu/registrar/schedules/2021fall/class-schedule&quot;) # Retrieve and inspect course numbers course_nums &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-course-number&quot;) %&gt;% html_text() # Retrieve and inspect course names course_names &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-course-title&quot;) %&gt;% html_text() course_nums_clean &lt;- stringr::str_sub(course_nums, end = nchar(course_nums) - 6) crn &lt;- stringr::str_sub(course_nums, start = nchar(course_nums) - 4) course_instructors &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-label:nth-child(6)&quot;) %&gt;% html_text() course_instructors_short &lt;- stringr::str_sub(trimws(course_instructors), start = 13) course_days &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-label:nth-child(3)&quot;) %&gt;% html_text() course_days_short &lt;- stringr::str_sub(trimws(course_days), start = 7) course_times &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-label:nth-child(4)&quot;) %&gt;% html_text() course_times_short &lt;- stringr::str_sub(trimws(course_times), start = 7) course_rooms &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-label:nth-child(5)&quot;) %&gt;% html_text() course_rooms_short &lt;- stringr::str_sub(trimws(course_rooms), start = 7) course_avail &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-label:nth-child(7)&quot;) %&gt;% html_text() course_avail_short &lt;- stringr::str_sub(trimws(course_avail), start = 14) SITES &lt;- paste0(&quot;https://webapps.macalester.edu/registrardata/classdata/Fall2021/&quot;, crn) %&gt;% purrr::map(~ read_html(.x)) course_desc &lt;- SITES %&gt;% purrr::map_chr(~ html_nodes(.x, &quot;p:nth-child(1)&quot;) %&gt;% html_text() %&gt;% trimws()) gen_ed &lt;- SITES %&gt;% purrr::map_chr(~ html_nodes(.x, &quot;p:nth-child(2)&quot;) %&gt;% html_text() %&gt;% trimws() %&gt;% stringr::str_sub(start = 32) %&gt;% trimws()) courses &lt;- tibble( number = course_nums_clean, crn = crn, name = course_names, days = course_days_short, time = course_times_short, room = course_rooms_short, instructor = course_instructors_short, avail_max = course_avail_short, desc = course_desc, gen_ed = gen_ed ) write_csv(courses, file = &#39;Mac2021Courses.csv&#39;) Table 14.1: First six entries in the Fall 2021 Macalester course info data. number crn name days time room instructor avail_max AMST 194-01 10068 The Obama Presidency M W F 10:50 am-11:50 am THEATR 002 Duchess Harris 0 / 16 AMST 194-02 10069 Introduction to Asian American Studies M W F 01:10 pm-02:10 pm HUM 212 Jake Nagasawa Closed 7 / 18 AMST 209-01 10781 Civil Rights Movement T R 01:20 pm-02:50 pm MAIN 111 Walter Greason 4 / 26 AMST 219-01 10782 In Motion: African Americans in the US (African Americans in Digital Technologies) T R 03:00 pm-04:30 pm MAIN 111 Walter Greason 4 / 25 AMST 225-01 10420 Native History to 1871 T R 09:40 am-11:10 am THEATR 203 Katrina Phillips 1 / 25 AMST 240-01 10271 Race, Culture, and Ethnicity in Education T R 01:20 pm-02:50 pm THEATR 201 Jonathan Hamilton Closed 0 / 25 Exercise 14.1 (Rearrange data table) Make the following changes to the courses data table: Split number into three separate columns: dept, number, and section. Split the avail_max variable into two separate variables: avail and max. It might be helpful to first remove all appearances of “Closed”. Use avail and max to generate a new variable called enrollment. Split the time variable into two separate columns: start_time and end_time. Convert all of these times into continuous 24 hour times (e.g., 2:15 pm should become 14.25). Hint: check out the function parse_date_time. Exercise 14.2 (WA courses) Make a bar plot showing the number of Fall 2021 sections satisfying the Writing WA requirement, sorted by department code.17 In the next series of exercises, we are going to build up an analysis to examine the number of student enrollments for each faculty member. Exercise 14.3 (Filter cases) For this particular analysis, we do not want to consider certain types of sections. Remove all of the following from the data table: All sections in PE or INTD. All music ensembles and dance practicum sections (these are all of the MUSI and THDA classes with numbers less than 100). All lab sections. This is one is a bit tricky. You can search for “Lab” or “Laboratory”, but be careful not to eliminate courses with words such as “Labor”. Some of these have section numbers that end in “-L1”“, for example. Exercise 14.4 (Handle cross-listed courses) Some sections are listed under multiple different departments, and you will find the same instructor, time, enrollment data, etc. For this activity, we only want to include each actual section once and it doesn’t really matter which department code we associate with this section. Eliminate all duplicates, keeping each actual section just once. Hint: look into the R command distinct, and think carefully about how to find duplicates. Exercise 14.5 (Co-taught courses) Make a table with all Fall 2021 co-taught courses (i.e., more than one instructor). Exercise 14.6 (Faculty enrollments) Make a table where each row contains a faculty, the number of sections they are teaching in Fall 2021, and the total enrollments in those section. Sort the table from highest total enrollments to lowest.18 Exercise 14.7 (Evening courses) Create and display a new table with all night courses (i.e., a subset of the table you wrangled by the end of Exercise 14.4). Also make a bar plot showing the number of these courses by day of the week. Source: regular expression tutorial.↩︎ For this exercise, you can count cross-listed courses towards both departments’ WA counts.↩︎ For the purposes of this exercise, we are just going to leave co-taught courses as is so that you will have an extra row for each pair or triplet of instructors. Alternatives would be to allocate the enrollment number to each of the faculty members or to split it up between the members. The first option would usually be the most appropriate, although it might depend on the course.↩︎ "],["data-acquisition-scraping-the-web.html", "Data Acquisition: Scraping the Web Learning Goals Scraping Data Additional Practice: Analyze WNBA Players", " Data Acquisition: Scraping the Web Learning Goals Develop comfort in using CSS Selectors and the Selector Gadget to identify data of interest within a website Use html_nodes and html_text within rvest packages to scrape data from websites using CSS selectors Develop initial comfort in cleaning text data You can download a template .Rmd of this activity here. Scraping Data Additional readings: rvest CSS selectors While a great deal of data is available via Web APIs, data download link, and data warehouses, not all of it is. Programs can use a process called web scraping to collect data that is available to humans (via web browsers) but not computer programs. Finding CSS Selectors In order to gather information from a webpage, we must learn the language used to identify patterns of specific information. For example, on the Macalester Registrar’s Fall 2021 Class Schedule you can visually see that the data is represented in a table. The first column shows the course number, the second the title, etc. Figure 14.1: Subset of Macalester registration data for Fall 2021. We will identify data in a webpage using a pattern matching language called CSS Selectors that can refer to specific patterns in HTML, the language used to write web pages. For example, the CSS selector “a” selects all hyperlinks in a webpage (“a” represents “anchor” links in HTML), “table &gt; tr &gt; td:nth-child(2)” would find the second column of an HTML table. Warning: Websites change often! So if you are going to scrape a lot of data, it is probably worthwhile to save and date a copy of the website. Otherwise, you may return after some time and your scraping code will include all of the wrong CSS selectors. Although you can learn how to use CSS Selectors by hand, we will use a shortcut by installing the Selector Gadget for Chrome. Yes, you must have the Chrome web browser installed to do this! You “teach” the Selector Gadget which data you are interested in on a web page, and it will show you the CSS Selector for this data. We will eventually use this selector in R. First watch the Selector Gadget video and install the Chrome Extension. Head over to the Macalester Registrar’s Fall 2021 class schedule. Click the selector gadget icon in the top right corner of Chrome (you may need to click on the puzzle piece and then the pin icon next to the Selector). As you mouse over the webpage, different parts will be highlighted in orange. Click on the first course number, AMST 194-01. You’ll notice that the Selector Gadget information in the lower right describes what you clicked on: Figure 14.2: The Selector Gadget in action: Mousing over the course number (left), and the result pane after clicking on the course number (right). Scroll through the page to verify that only the information you intend (the course number) is selected. The selector panel shows the CSS selector (.class-schedule-course-number) and the number of matches for that CSS selector (763). Now that we have the selector for the course number, let’s find the selector for the days of the week. Clear the selector by clicking the “Clear” button on the result pane, and then click the MWF under days for AMST 194-01. You will notice that the selector was too broad and highlighted information we don’t want. You need to teach Selector Gadget a correct selector by clicking the information you don’t want to turn it red. Once this is done, you should have 763 matches and a CSS selector of .class-schedule-course-title+ .class-schedule-label. Figure 14.3: Results for the Selector Gadget after selecting the day field. Exercise 14.8 Repeat the process above to find the correct selectors for the following fields. Make sure that each matches 763 results: Course Number Course Name Day Time Room Instructor Avail. / Max Retrieving Data Using rvest and CSS Selector Now that we have identified CSS selectors for the information we need, let’s fetch the data in R. We will be using the rvest package, which retrieves information from a webpage and turns it into R data tables: fall2021 &lt;- read_html(&quot;https://www.macalester.edu/registrar/schedules/2021fall/class-schedule&quot;) Once the webpage is loaded, we can retrieve data using the CSS selectors we specified earlier. The following code retrieves the course numbers and names as a vector: # Retrieve and inspect course numbers course_nums &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-course-number&quot;) %&gt;% html_text() head(course_nums) ## [1] &quot;AMST 194-01 10068&quot; &quot;AMST 194-02 10069&quot; &quot;AMST 209-01 10781&quot; &quot;AMST 219-01 10782&quot; ## [5] &quot;AMST 225-01 10420&quot; &quot;AMST 240-01 10271&quot; # Retrieve and inspect course names course_names &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-course-title&quot;) %&gt;% html_text() head(course_names) ## [1] &quot;The Obama Presidency&quot; ## [2] &quot;Introduction to Asian American Studies&quot; ## [3] &quot;Civil Rights Movement&quot; ## [4] &quot;In Motion: African Americans in the US (African Americans in Digital Technologies)&quot; ## [5] &quot;Native History to 1871&quot; ## [6] &quot;Race, Culture, and Ethnicity in Education&quot; At the end of each course number entry is a 5 digit number, which is CRN number used internally for the registrar’s office. Let’s put that in its own variable. To clean up the course number data, we can chop off the last 6 characters of each entry using the command sub_str from the stringr package:19 course_nums_clean &lt;- stringr::str_sub(course_nums, end = nchar(course_nums) - 6) head(course_nums_clean) ## [1] &quot;AMST 194-01&quot; &quot;AMST 194-02&quot; &quot;AMST 209-01&quot; &quot;AMST 219-01&quot; &quot;AMST 225-01&quot; &quot;AMST 240-01&quot; crn &lt;- stringr::str_sub(course_nums, start = nchar(course_nums) - 4) head(crn) ## [1] &quot;10068&quot; &quot;10069&quot; &quot;10781&quot; &quot;10782&quot; &quot;10420&quot; &quot;10271&quot; course_df &lt;- tibble(number = course_nums_clean,crn = crn, name = course_names) head(course_df) ## # A tibble: 6 × 3 ## number crn name ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 AMST 194-01 10068 The Obama Presidency ## 2 AMST 194-02 10069 Introduction to Asian American Studies ## 3 AMST 209-01 10781 Civil Rights Movement ## 4 AMST 219-01 10782 In Motion: African Americans in the US (African Americans in Digital Tec… ## 5 AMST 225-01 10420 Native History to 1871 ## 6 AMST 240-01 10271 Race, Culture, and Ethnicity in Education What happens when we try to grab the instructors in the same manner? course_instructors &lt;- fall2021 %&gt;% html_nodes(&quot;.class-schedule-label:nth-child(6)&quot;) %&gt;% html_text() head(course_instructors) ## [1] &quot;\\n Instructor: Duchess Harris\\n &quot; ## [2] &quot;\\n Instructor: Jake Nagasawa\\n &quot; ## [3] &quot;\\n Instructor: Walter Greason\\n &quot; ## [4] &quot;\\n Instructor: Walter Greason\\n &quot; ## [5] &quot;\\n Instructor: Katrina Phillips\\n &quot; ## [6] &quot;\\n Instructor: Jonathan Hamilton\\n &quot; In front of each entry is a bunch of spaces and “Instructor:”, which we don’t really need stored in every entry of our data table. This is because the website is set up in a responsive manner to change when the browser window is narrowed or you are on a mobile device. Figure 14.4: View of the schedule when the browser window is narrower. To clean up the data, we can chop off the white space with trimws and then first 12 characters of each entry using the command sub_str from the stringr package:20 course_instructors_short &lt;- stringr::str_sub(trimws(course_instructors), start = 13) head(course_instructors_short) ## [1] &quot;Duchess Harris&quot; &quot;Jake Nagasawa&quot; &quot;Walter Greason&quot; &quot;Walter Greason&quot; ## [5] &quot;Katrina Phillips&quot; &quot;Jonathan Hamilton&quot; Exercise 14.9 Create a data table that contains all the information about courses you found selectors for earlier (7 columns). Do not include any extraneous information like “Instructor:”. Exercise 14.10 Create a chart that shows the number of sections offered per department. Hint: The department is a substring of the course number.21 Exercise 14.11 Analyze the typical length of course names by department. To do so, create a dplyr pipeline that creates a new data table based on your courses data table, with the following changes: New columns for the length of the title of a course. Hint: nchar. Remove departments that have fewer than 10 sections of courses. To do so, group by department, then remove observations in groups with fewer than 10 sections (Hint: use filter with n()). Then ungroup the data so it flattens it back into a regular data table. This is one of the rare cases when we will use group_by without summarize. Create a visualization of the differences across groups in lengths of course names. Think carefully about the visualization you should be using! Note: If you’d like to see the html code for a website, in Chrome go to View &gt; Developer &gt; Developer Tools. Through this, we can see that all of the details about the course such as gen. ed. requirements, distributional requirements, and course description are contained on external links the correspond to the CRN numbers (#####): https://webapps.macalester.edu/registrardata/classdata/Fall2021/##### If you’d like a challenge, use that CRN variable we created above to pull out the description and gen ed. requirements for each class and join that data with the course information data table. Web Scraping in Python If you prefer to use Python rather than R, there are also great web scraping tools in Python. The equivalent to rvest in Python is called BeautifulSoup. Here is a reference for learning web scraping in Python: Web Scraping with Python, by Ryan Mitchell, O’Reilly, 2015 (the second version is here) Additional Practice: Analyze WNBA Players Exercise 14.12 This is an open-ended activity that asks you to analyze data from Basketball-Reference.com. For this task, you will need to scrape at Women’s NBA players statistics from 2021. You are welcome to pursue an analysis that interests you about these players. Here are some examples you might choose: Which players are “the most valuable” players? How do teams compare in terms of their players? This is a simple example of text processing with regular expressions. We’ll learn how to deal with more complicated situations in the text processing unit.↩︎ This is a simple example of text processing with regular expressions. We’ll learn how to deal with more complicated situations in the text processing unit.↩︎ Yes, COMP, STAT, and MATH are the same department, but for this exercise you can just show the results by four letter department code, e.g., with COMP, STAT, and MATH separate.↩︎ "],["public-web-apis.html", "Public Web APIs Learning Goals APIs Wrapper Packages Accessing Web APIs Web API Responses Additional Practice", " Public Web APIs Learning Goals Understand the difference between acquiring data through web scraping vs. a web API Set up an API key for a public API Develop comfort in using a wrapper package or url-method of calling a web API Recognize the structure in a url for a web API and adjust for your purposes You can download a template .Rmd of this activity here. APIs In this lesson you’ll learn how to collect data from websites such as The New York Times, Zillow, and Google. While these sites are primarily known for the information they provide to humans browsing the web, they (along with most large websites) also provide information to computer programs. Humans use browsers such as Firefox or Chrome to navigate the web. Behind the scenes, our browsers communicate with web servers using a technology called HTTP or Hypertext Transfer Protocol. Programming languages such as R can also use HTTP to communicate with web servers. We have seen how it is possible for R to “scrape” data from almost any static web page. However, it’s easiest to interact with websites that are specifically designed to communicate with programs. These Web APIs, or Web Application Programming Interfaces, focus on transmitting data, rather than images, colors, or other appearance-related information. An large variety of web APIs provide data accessible to programs written in R (and almost any other programming language!). Almost all reasonably large commercial websites offer APIs. Todd Motto has compiled an excellent list of Public Web APIs on GitHub. Browse the list to see what kind of information is available. Wrapper Packages Possible readings: 1. NY Times API 2. NY Times Blog post announcing the API 3. Working with the NY Times API in R 4. nytimes pacakge for accessing the NY Times’ APIs from R 5. Video showing how to use the NY Times API 6. rOpenSci has a good collection of wrapper packages In R, it is easiest to use Web APIs through a wrapper package, an R package written specifically for a particular Web API. The R development community has already contributed wrapper packages for most large Web APIs. To find a wrapper package, search the web for “R Package” and the name of the website. For example, a search for “R Reddit Package” returns RedditExtractor and a search for “R Weather.com Package” surfaces weatherData. This activity will build on the New York Times Web API, which provides access to news articles, movie reviews, book reviews, and many other data. Our activity will specifically focus on the Article Search API, which finds information about news articles that contain a particular word or phrase. We will use the nytimes package that provides functions for some (but not all) of the NYTimes APIs. First, install the package by copying the following two lines into your console (you just need to run these once): install.packages(&quot;devtools&quot;) devtools::install_github(&quot;mkearney/nytimes&quot;) Next, take a look at the Article Search API example on the package website to get a sense of the syntax. Exercise 14.13 What do you think the nytimes function below does? How does it communicate with the NY Times? Where is the data about articles stored? res &lt;- nyt_search(q = &quot;gamergate&quot;, n = 20, end_date = &quot;20150101&quot;) To get started with the NY Times API, you must register and get an authentication key. Signup only takes a few seconds, and it lets the New York Times make sure nobody abuses their API for commercial purposes. It also rate limits their API and ensures programs don’t make too many requests per day. For the NY Times API, this limit is 1000 calls per day. Be aware that most APIs do have rate limits — especially for their free tiers. Once you have signed up, verified your email, log back in to https://developer.nytimes.com. Under your email address, click on Apps and Create a new App (call it First API) and enable Article Search API, then press Save. This creates an authentication key, which is a 32 digit string with numbers and the letters a-e. Store this in a variable as follows (this is just an example ID, not an actual one): times_key &lt;- &quot;c935b213b2dc1218050eec976283dbbd&quot; # Tell nytimes what our API key is Sys.setenv(NYTIMES_KEY = times_key) Now, let’s use the key to issue our first API call. We’ll adapt the code we see in the vignette to do what we need. library(nytimes) # Issue our first API call res &lt;- nyt_search(q = &quot;gamergate&quot;, n = 20, end_date = &quot;20150101&quot;) ## Error: couldn&#39;t find NYTIMES_KEY environment variable # Convert response object to data frame res &lt;- as.data.frame(res) ## Error in as.data.frame(res): object &#39;res&#39; not found Something magical just happened. Your computer sent a message to the New York Times and asked for information about 20 articles about Gamergate starting at January 1, 2015 and going backwards in time. Thousands of public Web APIs allow your computer to tap into almost any piece of public digital information on the web. Let’s take a peek at the structure of the results. You can also look at the data in the “Environment” tab in one of the windows of RStudio: colnames(res) ## Error in is.data.frame(x): object &#39;res&#39; not found head(res$web_url) ## Error in h(simpleError(msg, call)): error in evaluating the argument &#39;x&#39; in selecting a method for function &#39;head&#39;: object &#39;res&#39; not found head(res$headline) ## Error in h(simpleError(msg, call)): error in evaluating the argument &#39;x&#39; in selecting a method for function &#39;head&#39;: object &#39;res&#39; not found head(res$pub_date) ## Error in h(simpleError(msg, call)): error in evaluating the argument &#39;x&#39; in selecting a method for function &#39;head&#39;: object &#39;res&#39; not found Accessing Web APIs Wrapper packages such as nytimes provide a convenient way to interact with Web APIs. However, many Web APIs have incomplete wrapper packages, or no wrapper package at all. Fortunately, most Web APIs share a common structure that R can access relatively easily. There are two parts to each Web API: the request, which corresponds to a function call, and the response, which corresponds to the function’s return value.22 As mentioned earlier, a Web API call differs from a regular function call in that the request is sent over the Internet to a webserver, which performs the computation and calculates the return result, which is sent back over the Internet to the original computer. Web API Requests Possible readings: 1. Understanding URLs 2. urltools Vignette The request for a Web API call is usually encoded through the URL, the web address associated with the API’s webserver. Let’s look at the URL associated with the first nytimes nyt_search example we did. Open the following URL in your browser (you should replace MY_KEY with the api key you were given earlier). http://api.nytimes.com/svc/search/v2/articlesearch.json?q=gamergate&amp;api-key=MY_KEY The text you see in the browser is the response data. We’ll talk more about that in a bit. Right now, let’s focus on the structure of the URL. You can see that it has a few parts: http:// — The scheme, which tells your browser or program how to communicate with the webserver. This will typically be either http: or https:. api.nytimes.com — The hostname, which is a name that identifies the webserver that will process the request. /svc/search/v2/articlesearch.json — The path, which tells the webserver what function you would like to call. ?q=gamergate&amp;api-key=MY_KEY — The query parameters, which provide the parameters for the function you would like to call. Note that the query can be thought of as a table, where each row has a key and a value (known as a key-value pair). In this case, the first row has key q and value gamergate and the second row has value MY_KEY. The query parameters are preceded by a ?. Rows in the key-value table are separated by ‘&amp;’, and individual key-value pairs are separated by an =. Typically, each of these URL components will be specified in the API documentation. Sometimes, the scheme, hostname, and path (http://api.nytimes.com/svc/search/v2/articlesearch.json) will be referred to as the endpoint for the API call. We will use the urltools module to build up a full URL from its parts. We start by creating a string with the endpoint and then add the parameters one by one using param_set and url_encode: library(urltools) url &lt;- &quot;http://api.nytimes.com/svc/search/v2/articlesearch.json&quot; url &lt;- param_set(url, &quot;q&quot;, url_encode(&quot;marlon james&quot;)) url &lt;- param_set(url, &quot;api-key&quot;, url_encode(times_key)) url Copy and paste the resulting URL into your browser to see what the NY Times response looks like! Exercise 14.14 You may be wondering why we need to use param_set and url_encode instead of writing the full url by hand. This exercise will illustrate why we need to be careful. Repeat the above steps, but create a URL that finds articles related to Ferris Bueller's Day Off (note the apostrophe). What is interesting about how the title appears in the URL? Repeat the steps above for the phrase Nico &amp; Vinz (make sure you use the punctuation mark &amp;). What do you notice? Take a look at the Wikipedia page describing percent encoding. Explain how the process works in your own words. Web API Responses Possible readings: 1. A Non-Programmer’s Introduction to JSON 2. Getting Started With JSON and jsonlite 3. Fetching JSON data from REST APIs We now discuss the structure of the web response, the return value of the Web API function. Web APIs generate string responses. If you visited the earlier New York Times API link in your browser, you would be shown the string response from the New York Times webserver: {&quot;status&quot;:&quot;OK&quot;,&quot;copyright&quot;:&quot;Copyright (c) 2021 The New York Times Company. All Rights Reserved.&quot;,&quot;response&quot;:{&quot;docs&quot;:[{&quot;abstract&quot;:&quot;Here’s what you need to know.&quot;,&quot;web_url&quot;:&quot;https://www.nytimes.com/2019/08/16/briefing/rashida-tlaib-gamergate-greenland.html&quot;,&quot;snippet&quot;:&quot;Here’s what you need to know.&quot;,&quot;lead_paragraph&quot;:&quot;(Want to get this briefing by email? Here’s the sign-up.)&quot;,&quot;source&quot;:&quot;The New York Times&quot;,&quot;multimedia&quot;:[{&quot;rank&quot;:0,&quot;subtype&quot;:&quot;xlarge&quot;,&quot;caption&quot;:null,&quot;credit&quot;:null,&quot;type&quot;:&quot;image&quot;,&quot;url&quot;:&quot;images/2019/08/16/world/16US-AMBRIEFING-TLAIB-amcore/merlin_158003643_c67928bc-e547-4a2e-9344-5f0209ca024d-articleLarge.jpg&quot;,&quot;height&quot;:400,&quot;width&quot;:600,&quot;legacy&quot;:{&quot;xlarge&quot;:&quot;images/2019/08/16/world/16US-AMBRIEFING-TLAIB-amcore/merlin_158003643_c67928bc-e547-4a2e-9344-5f0209ca024d-articleLarge.jpg&quot;,&quot;xlargewidth&quot;:600,&quot;xlargeheight&quot;:400},&quot;subType&quot;:&quot;xlarge&quot;,&quot;crop_name&quot;:&quot;articleLarge&quot;},... If you stared very hard at the above response, you may be able to interpret it. However, it would be much easier to interact with the response in some more structured, programmatic way. The vast majority of Web APIs, including the New York Times, use a standard called JSON (Javascript Object Notation) to take data and encode it as a string. To understand the structure of JSON, take the NY Times web response in your browser, and copy and paste it into an online JSON formatter. The formatter will add newlines and tabs to make the data more human interpretable. You’ll see the following: { &quot;status&quot;:&quot;OK&quot;, &quot;copyright&quot;:&quot;Copyright (c) 2021 The New York Times Company. All Rights Reserved.&quot;, &quot;response&quot;:{ &quot;docs&quot;:[ # A HUGE piece of data, with one object for each of the result articles ], &quot;meta&quot;:{ &quot;hits&quot;:128, &quot;offset&quot;:0, &quot;time&quot;:93 } } } You’ll notice a few things in the JSON above: Strings are enclosed in double quotes, for example \"status\" and \"OK\". Numbers are written plainly, like 2350 or 72. Some data is enclosed in square brackets [ and ]. These data containers can be thought of as R lists. Some data is enclosed in curly braces { and }. These data containers are called Objects. An object can be thought of as a single observation in a table. The columns or variables for the observation appear as keys on the left (hits, offset, etc.). The values appear after the specific key separated by a colon (2350, and 0, respectively). Thus, we can think of the meta object above as: hits offset time 128 0 93 Let’s repeat the NY Times search for gamergate, but this time we will peform the Web API call by hand instead of using the nytimes wrapper package. We will use the jsonlite package to retrieve the response from the webserver and turn the string response into an R object. The fromJson function sends our request out over and across the web to the NY Times webserver, retrieves it, and turns it from a JSON-formatted string into R data. library(jsonlite) # Rebuild the URL url &lt;- &quot;http://api.nytimes.com/svc/search/v2/articlesearch.json&quot; url &lt;- param_set(url, &quot;q&quot;, url_encode(&quot;gamergate&quot;)) url &lt;- param_set(url, &quot;api-key&quot;, url_encode(times_key)) ## Error in url_encode(times_key): object &#39;times_key&#39; not found # Send the request to the webserver over the Internet and # retrieve the JSON response. Turn the JSON response into an # R Object. response_js &lt;- fromJSON(url) ## Error in file(con, &quot;r&quot;): cannot open the connection to &#39;http://api.nytimes.com/svc/search/v2/articlesearch.json?q=gamergate&#39; The jsonlite makes the keys and values of an object available as attributes. For example, we can fetch the status: response_js$status ## Error in eval(expr, envir, enclos): object &#39;response_js&#39; not found While some keys in the object are associated with simple values, such as \"status\", others are associated with more complex data. For example, the key \"response\" is associated with an object that has two keys: \"docs\", and \"meta\". \"meta\" is another object: { \"hits\":128, \"offset\":0, \"time\":19 }. We can retrieve these nested attributes by sequentially accessing the object keys from the outside in. For example, the inner \"hits\" attribute would be accessed as follows: response_js$response$meta$hits ## Error in eval(expr, envir, enclos): object &#39;response_js&#39; not found Exercise 14.15 Retrieve the data associated with the copyright key of the response_js object, and the time attribute nested within the meta object. The majority of the data is stored under response, in docs. Notice that docs is a list, where each element of the list is a JSON object that looks like the following: { &quot;web_url&quot;:&quot;https://www.nytimes.com/2017/06/27/arts/milkshake-duck-meme.html&quot;, &quot;snippet&quot;:&quot;Oxford Dictionaries is keeping a close eye on a term that describes someone who rapidly gains and inevitably loses the internet’s intense love.&quot;, &quot;blog&quot;:{ }, &quot;source&quot;:&quot;The New York Times&quot;, &quot;multimedia&quot;:[ ... A LIST OF OBJECTS ... ], &quot;headline&quot;:{ &quot;main&quot;:&quot;How a Joke Becomes a Meme: The Birth of ‘Milkshake Duck’&quot;, &quot;print_headline&quot;:&quot;How a Joke Becomes a Meme: The Birth of ‘Milkshake Duck’&quot; }, &quot;keywords&quot;:[ ... A LIST OF OBJECTS ... ], &quot;pub_date&quot;:&quot;2017-06-27T12:24:20+0000&quot;, &quot;document_type&quot;:&quot;article&quot;, &quot;new_desk&quot;:&quot;Culture&quot;, &quot;byline&quot;:{ &quot;original&quot;:&quot;By JONAH ENGEL BROMWICH&quot; }, &quot;type_of_material&quot;:&quot;News&quot;, &quot;_id&quot;:&quot;59524e7f7c459f257c1ac39f&quot;, &quot;word_count&quot;:1033, &quot;score&quot;:0.35532707, &quot;uri&quot;:&quot;nyt://article/a3e5bf4a-6216-5dba-9983-73bc45a98e69&quot; }, jsonlite makes lists of objects available as a data frame, where the columns are the keys in the object (web_url, snippet, etc.) docs_df &lt;- response_js$response$docs ## Error in eval(expr, envir, enclos): object &#39;response_js&#39; not found class(docs_df) ## Error in eval(expr, envir, enclos): object &#39;docs_df&#39; not found colnames(docs_df) ## Error in is.data.frame(x): object &#39;docs_df&#39; not found dim(docs_df) ## Error in eval(expr, envir, enclos): object &#39;docs_df&#39; not found Exercise 14.16 (Your own article search) Consider the following: Select your own article search query (any topic of interest to you). You may want to play with NY Times online search or the API web search console to find a query that is interesting, but not overly popular. You can change any part of the query you would like. Your query should have at least 30 matches. Retrieve data for the first three pages of search results from the article search API, and create a data frame that joins together the docs data frames for the three pages of results. Hint: The example in the section below shows how to get different pages of results and use `bind_rows to combine them. Visualize the number of search results per day or month in your result set. A Note on Nested Data Frames Here is some code to generate queries on NY Times articles about the Red Sox. It fetches the first thirty entries in batches of 10. url &lt;- &quot;http://api.nytimes.com/svc/search/v2/articlesearch.json&quot; url &lt;- param_set(url, &quot;q&quot;, url_encode(&quot;Red Sox&quot;)) url &lt;- param_set(url, &quot;api-key&quot;, url_encode(times_key)) ## Error in url_encode(times_key): object &#39;times_key&#39; not found url &lt;- param_set(url, &quot;page&quot;, 0) res1 &lt;- fromJSON(url) ## Error in file(con, &quot;r&quot;): cannot open the connection to &#39;http://api.nytimes.com/svc/search/v2/articlesearch.json?q=Red%20Sox&amp;page=0&#39; # This pauses for 1 second. # It is required when knitting to prevent R from issuing too many requests to # The NY Times API at a time. If you don&#39;t have it you will get an error that # says &quot;Too Many Requests (429)&quot; Sys.sleep(1) url &lt;- param_set(url, &quot;page&quot;, 1) res2 &lt;- fromJSON(url) ## Error in file(con, &quot;r&quot;): cannot open the connection to &#39;http://api.nytimes.com/svc/search/v2/articlesearch.json?q=Red%20Sox&amp;page=1&#39; Sys.sleep(1) url &lt;- param_set(url, &quot;page&quot;, 2) res3 &lt;- fromJSON(url) ## Error in file(con, &quot;r&quot;): cannot open the connection to &#39;http://api.nytimes.com/svc/search/v2/articlesearch.json?q=Red%20Sox&amp;page=2&#39; docs1 &lt;- res1$response$docs ## Error in eval(expr, envir, enclos): object &#39;res1&#39; not found docs2 &lt;- res2$response$docs ## Error in eval(expr, envir, enclos): object &#39;res2&#39; not found docs3 &lt;- res3$response$docs ## Error in eval(expr, envir, enclos): object &#39;res3&#39; not found Each of these docs variables is a table with ten entries (articles) and the same 18 variables: names(docs1) ## Error in eval(expr, envir, enclos): object &#39;docs1&#39; not found Now we want to stack the tables on top of each other to get a single table with 30 rows and 18 variables. If you try the following command: bind_rows(docs1,docs2,docs3) then you will get an error saying “Error in bind_rows_(x, .id) : Argument 4 can’t be a list containing data frames.” What is happening??? Let’s check out the first column of the docs1 table: docs1$web_url ## Error in eval(expr, envir, enclos): object &#39;docs1&#39; not found It lists the web addresses of the first ten sites returned in the search. It is a vector of ten character strings, which is just fine for one column of data in our table. Now let’s check out the headline variable: docs1$headline ## Error in eval(expr, envir, enclos): object &#39;docs1&#39; not found The headline variable is actually a data frame that contains three variables: main, kicker, and print_headline. That is, we have nested data frames. This is a common problem when scraping data from JSON files, and it is why we are not able to directly bind the rows of our three tables on top of each other. We can check out the type of variable in each column with the class function: sapply(docs1, class) ## Error in lapply(X = X, FUN = FUN, ...): object &#39;docs1&#39; not found We see that blog, headline, and byline are the three problem columns that each contain their own data frames. The solution is to flatten these variables, which generates a new column in the outer table for each of the columns in the inner tables. docs1_flat &lt;- jsonlite::flatten(docs1) ## Error in is.data.frame(x): object &#39;docs1&#39; not found names(docs1_flat) ## Error in eval(expr, envir, enclos): object &#39;docs1_flat&#39; not found sapply(docs1_flat, class) ## Error in lapply(X = X, FUN = FUN, ...): object &#39;docs1_flat&#39; not found The headline variable is now replaced with seven separate columns for headline.main, headline.kicker, headline.content_kicker, headline.print_headline, headline.name, headline.seo, and headline.sub. The byline variable is replaced with three separae columns. The blog variable contained an empty data frame, so it has been removed. The overall result is a new flat table with 25 columns, and no more nested data frames. Once the data is flattened, we can bind rows: all_docs &lt;- bind_rows(jsonlite::flatten(docs1), jsonlite::flatten(docs2), jsonlite::flatten(docs3)) ## Error in is.data.frame(x): object &#39;docs1&#39; not found dim(all_docs) ## Error in eval(expr, envir, enclos): object &#39;all_docs&#39; not found Additional Practice Exercise 14.17 (Choose-your-own public API visualization) Browse toddomotos’ list of Public APIS and abhishekbanthia’s list of Public APIs. Select one of the APIs from the list. Here are a few criteria you should consider: You must use the JSON approach we illustrated above; not all APIs support JSON.23 Stay away from APIs that require OAuth for Authorization unless you are prepared for extra work before you get data! Most of the large social APIs (Facebook, LinkedIn, Twitter, etc.) require OAuth. toddomoto’s page lists this explicitly, but you’ll need to dig a bit if the API is only on abhishekbanthia’s list. You will probably need to explore several different APIs before you find one that works well for your interests and this assignment. Beware of the rate limits associated with the API you choose. These determine the maximimum number of API calls you can make per second, hour or day. Though these are not always officially published, you can find them by Google (for example) GitHub API rate limit. If you need to slow your program down to meet the API insert calls to Sys.sleep(1) as is done in the example below. Sketch out one interesting visualization that relies on the public API you selected earlier. Make sure the exact data you need is available. If it’s not, try a new visualization or API. If a wrapper package is available, you may use it, but you should also try to create the request URL and retrieve the JSON data using the techniques we showed earlier, without the wrapper package. Visualize the data you collected and describe the results. Although we imply that a Web API call corresponds to a single function on the webserver, this is not necessarily the case. Still, we use this language because the analogy fits well.↩︎ If you want to use an API that does not support JSON, you can check if there is an R wrapper package.↩︎ "],["sql.html", "SQL Learning Goals Introduction to SQL Additional Exercises Accessing SQL Databases from RStudio", " SQL Learning Goals Develop comfort in composing SQL queries See the connections between tidyverse verbs and SQL commands You can download a template .Rmd of this activity here. Introduction to SQL Additional readings and video tutorial: 1. SQL Tutorial for Data Analysis 2. Data Explorer Tutorial 3. Database querying using SQL, Baumer, Kaplan, and Horton 4. More Fun Practice - Solve a Mystery If you find yourself analyzing data within a medium or large organization, you will probably draw on data stored within a centralized data warehouse. Data warehouses contain vast collections of information; far more than a desktop computer can easily analyze and they typically rely on structured data repositories called SQL databases. Data scientists interacting with data warehouses often follow a pattern that balances the scalability of SQL databases and the expressivity of data science langauges like R and Python. After finding and understanding data relevant to a project24, a data scientist writes SQL code that creates a filtered, simplified or aggregated version of the data within the warehouse. This smaller dataset is then exported as a CSV and analyzed in R.25 SQL databases can be conceptually thought of as a collection of data tables, where each table resembles a data frame. While there is a core subset of SQL supported by all databases, different databases (Hive, Postgres, MySQL, Oracle, RedShift, etc.) use slightly different variants of SQL. Even though SQL is a complex language, the basic data wrangling techniques we learned earlier (filtering, joining and summarizing) follow easily replicable patterns and cover the majority of needs. Stack Exchange Data Explorer Figure 14.5: Stack Exchange Explorer for up vs down votes for questions and answers by weekday We will experiment with the Stack Exchange Data Explorer, a website that provides a SQL interface for all the data in StackExchange. StackExchange powers the StackOverflow programming question and answer site, but it also powers question and answer sites related to 126 topics including English, Travel, Bicycles, and Parenting. StackExchange provides an in-depth Data Explorer Tutorial. We will take a quick walk through the basics of SQL using the data explorer. I chose to analyze the Travel Data Explorer, but you could perform the steps below on any one of StackExchange data explorer sites Head to the Stack Exchange Data Explorer for Travel. You see a list of queries other users have created in the past. These queries are for all Stack Exchange sites, so some may not be relevant. Queries about your activity (for example, “How many upvotes do I have for each tag?”) will not be useful either if you do not have activity for the particular site. Click on one of them and you see the SQL code for the query. Then click the “Run Query” button to get results. For example, you might look at the number of up vs down votes for questions and answers by weekday and notice that for questions, Tuesday has the highest up vs. down vote ratio and Saturday has the lowest. You can contemplate hypotheses for this difference! Basic Select Queries Let’s experiment with our own queries. Click on “Compose Query” in the upper right, and notice the tables are shown in the right. As a reminder, a table is similar to a data frame. Each table lists the columns stored within the table and the data types for the columns. Look through the tables for Posts, Users, and Comments. Do the columns generally make sense, and correspond to the StackOverflow website? There’s a description of the tables and columns (called a schema) available on StackExchange’s Meta Q&amp;A Site. Now enter your first query in the text box and click the “Run Query” button: SELECT TOP(100) Id, Title, Score, Body, Tags FROM Posts In this query we already see several important features of SQL: SELECT tells SQL that a query is coming. TOP(100) only returns the first 100 rows.26 Id, Title, Score, Body, Tags determines what columns are included in the result FROM Posts determines the source dataset. From glancing at the results, it appears that this table contains both questions and answers. Let’s try to focus on answers. Looking again at the Schema Description, notice that there is a PostTypeId column in Posts, and a value of 1 corresponds to questions. Let’s update our query to only include questions: SELECT TOP(100) Id, Title, Score, Body, Tags FROM Posts WHERE PostTypeId = 1 The SQL command WHERE is like the filter command we have been using in dplyr.27 Exercise 14.18 Find the title and score of Posts that have a score of at least 110. Hint: TOP is not necessary here because you want all result rows. Exercise 14.19 Find posts whose title contains some place you are interested in (you pick!). Hint: use SQL’s LIKE operator. Note that you can look up the actual webpage for any question using its Id. For example, if the Id is 19591, the webpage URL would be https://travel.stackexchange.com/questions/19591/. Look up a few of the questions by their Id. It’s unclear how the 100 questions we saw were selected from among the over 43,000 total questions.28 Let’s try to arrange the Posts by score. The following query surfaces the top scoring question: OK we’re all adults here, so really, how on earth should I use a squat toilet? SELECT TOP(100) Id, Title, Score, Body, Tags FROM Posts WHERE PostTypeId = 1 ORDER BY Score DESC The ORDER BY ??? DESC syntax is similar to R’s arrange(). You can leave off the DESC if you want the results ordered smallest to largest. We could also find the highest rated questions tagged “italy” (the top question is Does Venice Smell?): SELECT TOP(100) Id, Title, Score, Body, Tags FROM Posts WHERE PostTypeId = 1 AND Tags LIKE &#39;%italy%&#39; ORDER BY Score DESC Exercise 14.20 Pick two tags that interest you and you think will occur together and find the top voted posts that contain both. SQL Summarization So far, we have covered the equivalent of R’s selecting, filtering, and arranging. Let’s take a look at grouping and summarizing now, which has similar structures in both R and SQL. Imagine we want to see how many posts of each type there are. This query shows us that there are 44K questions and 71K answers. SELECT PostTypeId, COUNT(Id) numPosts FROM posts GROUP BY PostTypeId ORDER BY PostTypeId Note two characteristics of SQL summarization here: The GROUP BYclause indicates the table column for grouping, much like R’s group_by. There is no explicit summarize. Instead, all columns that appear in the SELECT except for those listed in GROUP BY must make use of an aggregate function. COUNT(*) is one of these, and is the equivalent of R’s n(). Many other aggregate functions exist, including MAX, SUM, AVG, and many others. Every aggregate function requires a column as an argument (even COUNT() which doesn’t logically need one). The aggregate column (in this case COUNT(Id)) must immediately be followed by a name that will be used for it in the results (in this case numPosts). This can be particularly useful if you want to order by the aggregated value. Exercise 14.21 Change the previous query so it orders the result rows by the number of posts of that type. Hint: Reuse the name you assigned to the aggregate function. Exercise 14.22 Find the most commonly used tagsets applied to posts. Note that I am not asking you to count the most common individual tags — this would be more complex because multiple tags are squashed into the Tags field. SQL Joins Finally, as with R, we often want to join data from two or more tables. The types of joins in SQL are the same as we saw with R (inner, outer, left, right). Most commonly we want to perform an INNER join, which is the default if you just say JOIN. Let’s say we wanted to enhance the earlier query to find the highest scoring answers with some information about each user. SELECT TOP(100) Title, Score, DisplayName, Reputation FROM posts p JOIN users u ON p.OwnerUserId = u.Id WHERE PostTypeId =1 ORDER BY Score Desc We see a few notable items here: The JOIN keyword must go in between the two tables we want to join. Each table must be named. In this case we named posts p and users u. We need to specify the relationship that joins the two tables. In this case, a posts OwnerUserId column refers to the Id column in the users table. Exercise 14.23 Create a query similar to the one above that identifies the authors of the top rated comments instead of posts. Additional Exercises The first few exercises will ask you to analyze Stack Exchange badges. Start at https://data.stackexchange.com/stackoverflow/query/new. For each exercise, record the query you used. Exercise 14.24 Count the number of total badges that have been given out. Hint: count the number of rows in the relevant table. Exercise 14.25 Find how many times each badge has been awarded, sorted from most awarded to least awarded. Exercise 14.26 Find a badge that looks interesting to you. Find all the user DisplayNames that have received the badge, along with the date at which they received it. Exercise 14.27 Show the users who have received the most badges, along with how many they have received. The next few activities analyze user activity. These activities mimic the common workflow of creating datasets in SQL that you analyze in R. Exercise 14.28 Export a CSV file containing information about each user: DisplayName, Id, Reputation, and CreationDate. Name your file users.csv Exercise 14.29 Make a table that has each user’s total number of posts and total number of upvotes, and export this file as a CSV named posts.csv. Hint: Start with the posts table, join information from users, and perform some grouped summaries. Exercise 14.30 Calculate the number of comments per user, and the total number of upvotes across all comments per user (this is the sum of the Score variable under the Comments table) and export this as a CSV file named comments.csv. Exercise 14.31 Import these three datasets into R. Visualize the relationship between the three datasets. Include at least one visualization comparing each of: information from the user CSV and the post CSV, and information from the user CSV and comment CSV To receive full credit your visualizations must tell a compelling story. Accessing SQL Databases from RStudio While we will not cover the details of how to do so, you can indeed access SQL databases directly from RStudio. Chapters 15 and 16 of Modern Data Science with R have detailed instructions and examples on how to do so. The basic gist is to first set up a connection with the database (slightly trickier part covered in Chapter 16) and then write queries, either in SQL or – even cooler – using the common dplyr data verbs we have already learned like select, group_by, filter and inner_join. R can then automatically translate a piping sequence with many of these data verbs into an SQL query and execute that query. The reason this method is so powerful is that the bulk of the data still lives in the original database (i.e., it is not on your computer). With each query, you can access a small and customized amount of data tailored to your specific analysis needs. A word of caution: It can be difficult to discover and understand information in a data warehouse that is relevant to a project. Data is often produced across different arms of a large organization, and documentation describing the data can be scattered, missing, or out-of-date. The best way to decode information is by talking to the people who produced it!↩︎ An alternative is to use an R package like DBI to generate the SQL calls directly in R (similar to what we did with API wrapper packages); however, this often results in more trouble than it is worth.↩︎ The StackExchange data explorer uses a variant of SQL called Transact SQL that is supported by Microsoft databases. TOP(100) is a non-standard SQL feature supported by T-SQL. For most databases you would accomplish the same goal by adding LIMIT 100 to the end of the query.↩︎ Note that whereas we used the double equals == for comparison in R, the SQL WHERE command takes just a single =.↩︎ To count the number of posts, run {SQL} SELECT COUNT(Id) FROM Posts Where PostTypeId = 1.↩︎ "],["text-analysis.html", "Text Analysis Learning Goals Introduction to Text Analysis in R", " Text Analysis Learning Goals Understand the analysis process of decomposing text into tokens and considering word/token frequency Develop comfort in comparing the text across multiple documents in terms of tf-idf and log odds ratio Develop comfort in using lexicons to perform sentiment analysis on a document of text Introduction to Text Analysis in R We have seen how to manipulate strings with regular expressions. Here, we examine how to analyze longer text documents. Text refers to information composed primarily of words: song lyrics, Tweets, news articles, novels, Wikipedia articles, online forums, and countless other resources. In R and most other programming languages, text is stored in strings of characters. There are a variety of common ways to get strings containing the text we want to analyze. Text Acquisition String Literals It may be natural to start by declaring an R variable that holds a string. Let’s consider the U.S. Declaration of Independence. Here’s an R variable that contains one of the most memorable sentences in the Declaration of Independence: us_dec_sentence &lt;- &quot;We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.&quot; # Show the number of characters in the sentence. nchar(us_dec_sentence) ## [1] 209 # Show the sentence itself. us_dec_sentence ## [1] &quot;We hold these truths to be self-evident, that all men are created equal, that they are endowed by their Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.&quot; Unfortunately, creating literal string variables like this can become unwieldy for larger texts, or collections of multiple texts. Using this technique, your R program would be narrowly written to analyze hard-coded string variables, and defining those string variables may take up the vast majority of our program’s source code, making it difficult to read. We will discuss two more flexible ways of getting textual data: reading a .TXT file and accessing a web API. Reading .txt Files The simplest file format for text is a .TXT (or .txt) file. A .txt file contains raw textual data. You can find .txt files by using Google’s filetype: search filter. Go to http://google.com and type filetype:txt declaration of independence in the search box. In the results you should see many .txt files containing the U.S. Declaration of Independence. For example, https://infamous.net/documents/declaration-of-independence.txt. We can read this .txt file into R as a string using the readr package.29 Because the text is so large, we use the strtrim function to only show the first 500 characters of the text. library(readr) us_dec &lt;- read_file(&quot;https://infamous.net/documents/declaration-of-independence.txt&quot;) nchar(us_dec) ## [1] 9841 strtrim(us_dec, 500) ## [1] &quot;\\n\\nTHE DECLARATION OF INDEPENDENCE:\\n\\n\\nIn Congress, July 4, 1776,\\nTHE UNANIMOUS DECLARATION OF THE THIRTEEN UNITED STATES OF AMERICA\\n\\nWhen in the Course of human events, it becomes necessary for one \\npeople to dissolve the political bands which have connected them \\nwith another, and to assume among the Powers of the earth, the \\nseparate and equal station to which the Laws of Nature and of \\nNature&#39;s God entitle them, a decent respect to the opinions of \\nmankind requires that they should declare the causes which&quot; Notice all those \\n sequences that appear in the string. These are newline characters that denote the end of a line. There are a few other special characters that you may see. For example, '\\t' is a tab. Using Web APIs When we want to analyze textual data created on websites or mobile apps such as Facebook and Twitter, we can use web APIs to gather the text. Here is one example from the largest single collection of written knowledge in human history: Wikipedia! The function below retrieves the text content of a Wikipedia article with a particular title. It uses Wikipedia’s Public API to do so, which enables any computer program to interact with Wikipedia. Wikipedia’s API is convenient for us because it is vast, open, and free. Don’t worry if you don’t follow the details of the code below. GetArticleText &lt;- function(langCode, titles) { # Returns the text of the specified article in the specified language # An accumulator variable that will hold the text of each article # Create texts &lt;- sapply(titles, function(t) { print(t) article_info &lt;- getForm( paste(&quot;https://&quot;, langCode, &quot;.wikipedia.org/w/api.php&quot;, sep = &quot;&quot;), action = &quot;query&quot;, prop = &quot;extracts&quot;, format = &quot;json&quot;, explaintext = &quot;&quot;, titles = t ) js &lt;- fromJSON(article_info) return(js$query$pages[[1]]$extract) }) return(texts) } # Get the text for https://en.wikipedia.org/wiki/Macalester_College, # https://en.wikipedia.org/wiki/Carleton_College, and https://en.wikipedia.org/wiki/University_of_Minnesota in English (&quot;en&quot;). # We could also get the text for the Spanish article (&quot;es&quot;), or German article (&quot;de&quot;) school_wiki_titles &lt;- c(&quot;Macalester College&quot;, &quot;Carleton College&quot;, &quot;University of Minnesota&quot;) school_wiki_text &lt;- GetArticleText(&quot;en&quot;, school_wiki_titles) ## [1] &quot;Macalester College&quot; ## [1] &quot;Carleton College&quot; ## [1] &quot;University of Minnesota&quot; # Print out the first 500 characters of the text strtrim(school_wiki_text, 500) ## Macalester College ## &quot;Macalester College () is a private liberal arts college in Saint Paul, Minnesota. Founded in 1874, Macalester is exclusively an undergraduate four-year institution and enrolled 2,174 students in the fall of 2018 from 50 U.S. states, four U.S territories, the District of Columbia and 97 countries. The college has Scottish roots and emphasizes internationalism and multiculturalism.\\n\\n\\n== History ==\\nMacalester College was founded by Rev. Dr. Edward Duffield Neill in 1874 with help from the Presbyterian &quot; ## Carleton College ## &quot;Carleton College ( KARL-tin) is a private liberal arts college in Northfield, Minnesota. Founded in 1866, it had 2,105 undergraduate students and 269 faculty members in fall 2016. The 200-acre main campus is between Northfield and the 800-acre Cowling Arboretum, which became part of the campus in the 1920s.Admissions is highly selective with an acceptance rate of 16.5% in 2022, and Carleton is annually ranked near the top in most rankings of liberal arts schools. Carleton is particularly renowne&quot; ## University of Minnesota ## &quot;The University of Minnesota, formally the University of Minnesota, Twin Cities, (UMN, the U of M, or Minnesota) is a public land-grant research university in the Twin Cities of Minneapolis and Saint Paul, Minnesota, United States. The Twin Cities campus comprises locations in Minneapolis and Falcon Heights, a suburb of St. Paul, approximately 3 miles (4.8 km) apart. The Twin Cities campus is the oldest and largest in the University of Minnesota system and has the ninth-largest main campus studen&quot; We’ll analyze these documents further below. Analyzing Single Documents If we tried to make a data frame directly out of the text, it would look odd. It contains the text as a single row in a column named “text.” This doesn’t seem any more useful than the original string itself. us_dec_df &lt;- tibble(title = &quot;Declaration of Independence&quot;, text = us_dec) us_dec_df ## # A tibble: 1 × 2 ## title text ## &lt;chr&gt; &lt;chr&gt; ## 1 Declaration of Independence &quot;\\n\\nTHE DECLARATION OF INDEPENDENCE:\\n\\n\\nIn Congress, July 4… Unnesting Tokens We need to restructure the text into components that can be easily analyzed. We will use two units of data: A token is the smallest textual information unit we wish to measure, typically a word. A document is a collection of tokens. For our example here, the Declaration of Independence is the document, and a word is the token. However, a document could be a tweet, a novel chapter, a Wikipedia article, or anything else that seems interesting. Other possibilities for tokens include sentences, lines, paragraphs, characters, ngrams, and more.30 Later on, we will also give an example of how to perform textual analyses comparing two or more documents. We will be using the tidy text format, which has one row for each unit of analysis. Our work will focus on word-level analysis within each document, so each row will contain a document and word. TidyText’s unnest_tokens function takes a data frame containing one row per document and breaks it into a data frame containing one row per token. tidy_us_dec &lt;- us_dec_df %&gt;% unnest_tokens(word, text) tidy_us_dec ## # A tibble: 1,539 × 2 ## title word ## &lt;chr&gt; &lt;chr&gt; ## 1 Declaration of Independence the ## 2 Declaration of Independence declaration ## 3 Declaration of Independence of ## 4 Declaration of Independence independence ## 5 Declaration of Independence in ## 6 Declaration of Independence congress ## 7 Declaration of Independence july ## 8 Declaration of Independence 4 ## 9 Declaration of Independence 1776 ## 10 Declaration of Independence the ## # … with 1,529 more rows Note that because we only have one document, the initial data frame (us_dec_df) is just one row and the tidy text data frame (tidy_us_dec) has the same title for each row. Later on we will analyze more than one document and these columns can change. We can now analyze this tidy text data frame. For example, we can determine the total number of words. nrow(tidy_us_dec) ## [1] 1539 We can also find the most frequently used words by using dplyr’s count function, which creates a frequency table for (in our case) words: # Create and display frequency count table all_us_dec_counts &lt;- tidy_us_dec %&gt;% count(word, sort = TRUE) all_us_dec_counts ## # A tibble: 674 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 the 84 ## 2 of 83 ## 3 to 67 ## 4 and 58 ## 5 for 28 ## 6 our 26 ## 7 has 20 ## 8 in 20 ## 9 their 20 ## 10 he 19 ## # … with 664 more rows We can count the rows in this data frame to determine how many different unique words appear in the document. nrow(all_us_dec_counts) ## [1] 674 Stop Words Notice that the most frequent words are common words that are present in any document and not particularly descriptive of the topic of the document. These common words are called stop words, and they are typically removed from textual analysis. TidyText provides a built in set of 1,149 different stop words. We can load the dataset and use anti_join to remove rows associated with words in the dataset. # Load stop words dataset and display it data(stop_words) stop_words ## # A tibble: 1,149 × 2 ## word lexicon ## &lt;chr&gt; &lt;chr&gt; ## 1 a SMART ## 2 a&#39;s SMART ## 3 able SMART ## 4 about SMART ## 5 above SMART ## 6 according SMART ## 7 accordingly SMART ## 8 across SMART ## 9 actually SMART ## 10 after SMART ## # … with 1,139 more rows # Create and display frequency count table after removing stop words from the dataset us_dec_counts &lt;- tidy_us_dec %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE) us_dec_counts ## # A tibble: 525 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 people 10 ## 2 laws 9 ## 3 government 6 ## 4 john 6 ## 5 thomas 6 ## 6 william 6 ## 7 free 5 ## 8 george 5 ## 9 powers 5 ## 10 time 5 ## # … with 515 more rows Word Clouds A word cloud is a visualization of the most frequent words in the dataset: library(wordcloud) # Show a word cloud with some customized options wordcloud(us_dec_counts$word, # column of words us_dec_counts$n, # column of frequencies scale = c(5, 0.2), # range of font sizes of words min.freq = 2, # minimum word frequency to show max.words = 200, # show the 200 most frequent words random.order = FALSE, # position the most popular words first colors = brewer.pal(8, &quot;Dark2&quot;) # color palette ) Comparing the text in two (or more) documents Let’s now create a TidyText data frame with the three Wikipedia documents we collected above via the API. Remember that the TidyText data frame has one row for each word. # Create the three-row original data frame text_df &lt;- tibble(article = school_wiki_titles, text = school_wiki_text) text_df ## # A tibble: 3 × 2 ## article text ## &lt;chr&gt; &lt;chr&gt; ## 1 Macalester College &quot;Macalester College () is a private liberal arts college in Saint … ## 2 Carleton College &quot;Carleton College ( KARL-tin) is a private liberal arts college in… ## 3 University of Minnesota &quot;The University of Minnesota, formally the University of Minnesota… # Unnest the data frame so each row corresponds to a single word in a single document. tidy_df &lt;- text_df %&gt;% unnest_tokens(word, text) tidy_df ## # A tibble: 15,516 × 2 ## article word ## &lt;chr&gt; &lt;chr&gt; ## 1 Macalester College macalester ## 2 Macalester College college ## 3 Macalester College is ## 4 Macalester College a ## 5 Macalester College private ## 6 Macalester College liberal ## 7 Macalester College arts ## 8 Macalester College college ## 9 Macalester College in ## 10 Macalester College saint ## # … with 15,506 more rows Side-by-Side Word Clouds macalester_counts &lt;- tidy_df %&gt;% filter(article == &quot;Macalester College&quot;) %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE) macalester_counts ## # A tibble: 1,200 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 macalester 82 ## 2 students 33 ## 3 college 28 ## 4 campus 24 ## 5 student 21 ## 6 minnesota 19 ## 7 house 16 ## 8 hall 14 ## 9 mac 14 ## 10 arts 13 ## # … with 1,190 more rows umn_counts &lt;- tidy_df %&gt;% filter(article == &quot;University of Minnesota&quot;) %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE) umn_counts ## # A tibble: 1,911 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 university 98 ## 2 minnesota 79 ## 3 campus 68 ## 4 hall 36 ## 5 school 35 ## 6 students 35 ## 7 student 33 ## 8 college 23 ## 9 bank 21 ## 10 center 21 ## # … with 1,901 more rows carleton_counts &lt;- tidy_df %&gt;% filter(article == &quot;Carleton College&quot;) %&gt;% anti_join(stop_words) %&gt;% count(word, sort = TRUE) carleton_counts ## # A tibble: 1,406 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 carleton 68 ## 2 college 42 ## 3 students 39 ## 4 hall 26 ## 5 campus 20 ## 6 national 17 ## 7 student 17 ## 8 arts 14 ## 9 built 13 ## 10 liberal 13 ## # … with 1,396 more rows wordcloud(macalester_counts$word, macalester_counts$n, max.words = 200, random.order = FALSE, colors = brewer.pal(8, &quot;Dark2&quot;) ) wordcloud(umn_counts$word, umn_counts$n, max.words = 200, random.order = FALSE, colors = brewer.pal(8, &quot;Dark2&quot;) ) wordcloud(carleton_counts$word, carleton_counts$n, max.words = 200, random.order = FALSE, colors = brewer.pal(8, &quot;Dark2&quot;) ) Brainstorm How do we compare multiple documents quantitatively? Exercise 14.32 Brainstorm a metric for comparing the relative frequency/importance of different words in two or more documents. What factors might you account for? Term Frequency - Inverse Document Frequency To compare the prevalence of certain words in one document relative to another document, we could just count the occurrences. However, the documents may be different lengths, meaning that many more words might occur more often in the longer document. There are different ways to account for this, but one of the most common is term frequency - inverse document frequency. The term frequency aims to capture how frequently a word appears in each document. There are different ways to measure this, including a raw count, logarithmically scaled (1 + log of the raw count), or Boolean (either 1 or 0 depending on whether the word occurs). The inverse document frequency aims to capture how common the word is across documents. It is \\[\\log\\left(\\frac{N}{|\\{doc: word \\in doc\\}|}\\right),\\] where \\(N\\) is the number of documents, and the denominator of the fraction is the number of documents in which the selected word appears. Thus, if the word appears in all documents under consideration, the idf score is equal to log(1)=0. The td-idf score is then the product of the term frequency and the inverse document frequency. We’ll use the bind_tf_idf command from the tidytext library. Its default measure for term frequency is the raw count of a given word divided by the total number of words in the document. Let’s start by computing the thirty-five document-word pairs with the highest tf-idf scores: tfidf_analysis &lt;- tidy_df %&gt;% count(article, word) %&gt;% bind_tf_idf(word, article, n) %&gt;% arrange(desc(tf_idf)) Table 14.2: The thirty-five document-word pairs with the highest tf-idf scores. article word n tf idf tf_idf Macalester College macalester 82 0.0226582 1.0986123 0.0248926 Carleton College carleton 68 0.0147698 1.0986123 0.0162262 Macalester College mac 14 0.0038685 1.0986123 0.0042500 University of Minnesota gophers 21 0.0028795 1.0986123 0.0031634 Carleton College bust 12 0.0026064 1.0986123 0.0028635 University of Minnesota golden 17 0.0023310 1.0986123 0.0025609 Carleton College cowling 10 0.0021720 1.0986123 0.0023862 Carleton College arboretum 9 0.0019548 1.0986123 0.0021476 Carleton College schiller 9 0.0019548 1.0986123 0.0021476 Macalester College engagement 7 0.0019342 1.0986123 0.0021250 Carleton College carleton’s 8 0.0017376 1.0986123 0.0019090 Carleton College goodsell 8 0.0017376 1.0986123 0.0019090 Carleton College northfield 8 0.0017376 1.0986123 0.0019090 Macalester College civic 6 0.0016579 1.0986123 0.0018214 Macalester College fossil 6 0.0016579 1.0986123 0.0018214 Macalester College scots 6 0.0016579 1.0986123 0.0018214 Macalester College house 16 0.0044211 0.4054651 0.0017926 Carleton College frisbee 7 0.0015204 1.0986123 0.0016703 Carleton College ultimate 7 0.0015204 1.0986123 0.0016703 University of Minnesota mall 11 0.0015083 1.0986123 0.0016570 Macalester College commitment 5 0.0013816 1.0986123 0.0015178 Macalester College friendly 5 0.0013816 1.0986123 0.0015178 Macalester College macalester’s 5 0.0013816 1.0986123 0.0015178 Macalester College summit 5 0.0013816 1.0986123 0.0015178 Macalester College wallace 5 0.0013816 1.0986123 0.0015178 University of Minnesota gopher 10 0.0013712 1.0986123 0.0015064 Macalester College sustainability 13 0.0035922 0.4054651 0.0014565 Carleton College acre 6 0.0013032 1.0986123 0.0014317 Carleton College watson 6 0.0013032 1.0986123 0.0014317 University of Minnesota big 9 0.0012341 1.0986123 0.0013558 University of Minnesota area 23 0.0031537 0.4054651 0.0012787 Macalester College environmental 4 0.0011053 1.0986123 0.0012143 Macalester College lgbtq 4 0.0011053 1.0986123 0.0012143 Macalester College presbyterian 4 0.0011053 1.0986123 0.0012143 Macalester College sophomores 4 0.0011053 1.0986123 0.0012143 Here is a graphic with the same data: tfidf_analysis %&gt;% mutate(word = factor(word, levels = rev(unique(word)))) %&gt;% top_n(35) %&gt;% ggplot(aes(word, tf_idf, fill = article)) + geom_col() + labs(x = NULL, y = &quot;tf-idf&quot;) + coord_flip() Next, let’s say we want to determine which school is the most relevant to the query “internationalism, multiculturalism, and service to society.” target_words &lt;- c(&quot;internationalism&quot;, &quot;multiculturalism&quot;, &quot;service&quot;, &quot;society&quot;) mission &lt;- tfidf_analysis %&gt;% filter(word %in% target_words) article word n tf idf tf_idf Macalester College society 3 0.0008290 0.4054651 0.0003361 Macalester College internationalism 1 0.0002763 1.0986123 0.0003036 Macalester College multiculturalism 1 0.0002763 1.0986123 0.0003036 Carleton College society 1 0.0002172 0.4054651 0.0000881 Carleton College service 4 0.0008688 0.0000000 0.0000000 Macalester College service 1 0.0002763 0.0000000 0.0000000 University of Minnesota service 9 0.0012341 0.0000000 0.0000000 Log Odds Ratio Another metric for comparing the frequency of different words in two documents is the log odds ratio: \\[\\log\\left(\\frac{\\left(\\frac{n+1}{total+1}\\right)_{\\hbox{doc1}}}{\\left(\\frac{n+1}{total+1}\\right)_{\\hbox{doc2}}} \\right),\\] where \\(n\\) is the number of times the word appears and \\(total\\) is the total number of words in the document. total.mac &lt;- nrow(filter(tidy_df, article == &quot;Macalester College&quot;)) total.carleton &lt;- nrow(filter(tidy_df, article == &quot;Carleton College&quot;)) logratios &lt;- macalester_counts %&gt;% full_join(carleton_counts, by = &quot;word&quot;, suffix = c(&quot;.mac&quot;, &quot;.carleton&quot;)) %&gt;% replace_na(list(n.mac = 0, n.carleton = 0)) %&gt;% mutate(n.total = n.mac + n.carleton) %&gt;% filter(n.total &gt;= 5) %&gt;% mutate(logodds.mac = log(((n.mac + 1) / (total.mac + 1)) / ((n.carleton + 1) / (total.carleton + 1)))) Which words appear at roughly equal frequencies? logratios %&gt;% arrange(abs(logodds.mac)) %&gt;% head(n = 20) ## # A tibble: 20 × 5 ## word n.mac n.carleton n.total logodds.mac ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 programs 6 8 14 -0.0106 ## 2 colleges 7 9 16 0.0175 ## 3 championship 3 4 7 0.0175 ## 4 president 5 7 12 -0.0470 ## 5 won 5 7 12 -0.0470 ## 6 1964 2 3 5 -0.0470 ## 7 2019 2 3 5 -0.0470 ## 8 department 2 3 5 -0.0470 ## 9 intercollegiate 2 3 5 -0.0470 ## 10 life 2 3 5 -0.0470 ## 11 local 2 3 5 -0.0470 ## 12 main 2 3 5 -0.0470 ## 13 official 2 3 5 -0.0470 ## 14 paul 2 3 5 -0.0470 ## 15 popular 2 3 5 -0.0470 ## 16 summer 2 3 5 -0.0470 ## 17 times 2 3 5 -0.0470 ## 18 universities 2 3 5 -0.0470 ## 19 2011 4 5 9 0.0583 ## 20 fall 4 5 9 0.0583 What are the most distinctive words? logratios %&gt;% group_by(logodds.mac &lt; 0) %&gt;% top_n(15, abs(logodds.mac)) %&gt;% ungroup() %&gt;% mutate(word = reorder(word, logodds.mac)) %&gt;% ggplot(aes(word, logodds.mac, fill = logodds.mac &lt; 0)) + geom_col() + coord_flip() + ylab(&quot;log odds ratio (Mac/Carleton)&quot;) + scale_fill_discrete(name = &quot;&quot;, labels = c(&quot;Macalester&quot;, &quot;Carleton&quot;)) Sentiment Analysis We often want to understand whether text conveys certain characteristics. For example, is Macalester’s mission statement more happy, sad, or angry than that of the University of Minnesota? A common way of doing this is by using a word dictionary that contains a list of words with the characteristics we are seeking (e.g., a list of words that are happy, sad, or angry). We can then measure how often words with each characteristic appear in the text. These word dictionaries are also called lexicons, and dictionaries related to emotive feelings are often called sentiment lexicons. Tidy Text’s sentiments dataset contains built-in sentiment lexicons. We can look at the structure of some of these: afinn &lt;- get_sentiments(&quot;afinn&quot;) nrc &lt;- get_sentiments(&quot;nrc&quot;) bing &lt;- get_sentiments(&quot;bing&quot;) word value abandon -2 abandoned -2 abandons -2 abducted -2 abduction -2 abductions -2 word sentiment abacus trust abandon fear abandon negative abandon sadness abandoned anger abandoned fear word sentiment 2-faces negative abnormal negative abolish negative abominable negative abominably negative abominate negative Let’s take a look at the sentiments described within each lexicon: # Show the number of words and unique sentiments in each lexicon afinn %&gt;% summarize(num_words = n(), values = paste(sort(unique(value)), collapse = &quot;, &quot;)) ## # A tibble: 1 × 2 ## num_words values ## &lt;int&gt; &lt;chr&gt; ## 1 2477 -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5 nrc %&gt;% summarize(num_words = n(), sentiments = paste(sort(unique(sentiment)), collapse = &quot;, &quot;)) ## # A tibble: 1 × 2 ## num_words sentiments ## &lt;int&gt; &lt;chr&gt; ## 1 13872 anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, … bing %&gt;% summarize(num_words = n(), sentiments = paste(sort(unique(sentiment)), collapse = &quot;, &quot;)) ## # A tibble: 1 × 2 ## num_words sentiments ## &lt;int&gt; &lt;chr&gt; ## 1 6786 negative, positive The Tidy Text book has some great background on these data sets: The three general-purpose lexicons are AFINN from Finn Årup Nielsen, bing from Bing Liu and collaborators, and nrc from Saif Mohammad and Peter Turney. All three of these lexicons are based on unigrams, i.e., single words. These lexicons contain many English words and the words are assigned scores for positive/negative sentiment, and also possibly emotions like joy, anger, sadness, and so forth. The nrc lexicon categorizes words in a binary fashion (“yes”/“no”) into categories of positive, negative, anger, anticipation, disgust, fear, joy, sadness, surprise, and trust. The bing lexicon categorizes words in a binary fashion into positive and negative categories. The AFINN lexicon assigns words with a score that runs between -5 and 5, with negative scores indicating negative sentiment and positive scores indicating positive sentiment. All of this information is tabulated in the sentiments dataset, and tidytext provides a function get_sentiments() to get specific sentiment lexicons without the columns that are not used in that lexicon. To apply these dictionaries, we need to create a Tidy Text data frame with words for each row and join it to the dictionary scores. Let’s give this a try using the Macalester Statement of Purpose and Belief. We start by creating the Tidy Text data frame: # Declare a string containing the Macalester Statement of Purpose &amp; Belief statement &lt;- &quot;At Macalester College we believe that education is a fundamentally transforming experience. As a community of learners, the possibilities for this personal, social, and intellectual transformation extend to us all. We affirm the importance of the intellectual growth of the students, staff and faculty through individual and collaborative endeavor. We believe that this can best be achieved through an environment that values the diverse cultures of our world and recognizes our responsibility to provide a supportive and respectful environment for students, staff and faculty of all cultures and backgrounds. We expect students to develop a broad understanding of the liberal arts while they are at Macalester. Students should follow a primary course of study in order to acquire an understanding of disciplinary theory and methodology; they should be able to apply their understanding of theories to address problems in the larger community. Students should develop the ability to use information and communication resources effectively, be adept at critical, analytical and logical thinking, and express themselves well in both oral and written forms. Finally, students should be prepared to take responsibility for their personal, social and intellectual choices. We believe that the benefit of the educational experience at Macalester is the development of individuals who make informed judgments and interpretations of the broader world around them and choose actions or beliefs for which they are willing to be held accountable. We expect them to develop the ability to seek and use knowledge and experience in contexts that challenge and inform their suppositions about the world. We are committed to helping students grow intellectually and personally within an environment that models and promotes academic excellence and ethical behavior. The education a student begins at Macalester provides the basis for continuous transformation through learning and service.&quot; # Expand this into a tidy data frame, with one row per word tidy_df &lt;- tibble(college = c(&quot;Macalester College&quot;), text = statement) %&gt;% unnest_tokens(word, text) # Display the data frame and the most popular words tidy_df ## # A tibble: 293 × 2 ## college word ## &lt;chr&gt; &lt;chr&gt; ## 1 Macalester College at ## 2 Macalester College macalester ## 3 Macalester College college ## 4 Macalester College we ## 5 Macalester College believe ## 6 Macalester College that ## 7 Macalester College education ## 8 Macalester College is ## 9 Macalester College a ## 10 Macalester College fundamentally ## # … with 283 more rows tidy_df %&gt;% anti_join(stop_words) %&gt;% count(word) ## # A tibble: 105 × 2 ## word n ## &lt;chr&gt; &lt;int&gt; ## 1 ability 2 ## 2 academic 1 ## 3 accountable 1 ## 4 achieved 1 ## 5 acquire 1 ## 6 actions 1 ## 7 address 1 ## 8 adept 1 ## 9 affirm 1 ## 10 analytical 1 ## # … with 95 more rows Next, we join this data frame with the lexicon. Let’s use nrc. Since we don’t care about words not in the lexicon, we will use an inner join. tidy_df %&gt;% inner_join(nrc) %&gt;% count(sentiment) ## # A tibble: 9 × 2 ## sentiment n ## &lt;chr&gt; &lt;int&gt; ## 1 anger 1 ## 2 anticipation 12 ## 3 disgust 3 ## 4 fear 1 ## 5 joy 4 ## 6 negative 3 ## 7 positive 45 ## 8 surprise 4 ## 9 trust 25 There are some odd sentiments for a mission statement (anger, disgust, fear, and negative). Let’s take a look at what words are contributing to them. tidy_df %&gt;% inner_join(nrc) %&gt;% filter(sentiment %in% c(&quot;anger&quot;, &quot;disgust&quot;, &quot;fear&quot;, &quot;negative&quot;)) %&gt;% select(word, sentiment) ## # A tibble: 8 × 2 ## word sentiment ## &lt;chr&gt; &lt;chr&gt; ## 1 diverse negative ## 2 liberal negative ## 3 larger disgust ## 4 finally disgust ## 5 challenge anger ## 6 challenge fear ## 7 challenge negative ## 8 excellence disgust As you can see, word dictionaries are not perfect tools. When using them, make sure you look at the individual words contributing to the overall patterns to ensure they make sense. Other Interesting Questions There are all sorts of other interesting questions we can ask when analyzing texts. These include: How do word frequencies change over time (e.g., Twitter) or over the course of a text? What is the correlation between different words (or names of characters in novels)? For example, how frequently do they appear in the same section of a text, or within \\(K\\) number of words of each other?31 How can we visualize such co-occurrences with networks? What “topics” are found in different documents? What word collections comprise these topics? This area is called topic modeling. Can you guess who wrote a document by analyzing its text? How does the structure of different languages (e.g., sentence structure, sentence length, parts-of-speech) compare? These and many other interesting questions are asked by computational linguists. Instead of reading the file directly from the internet, it is often a good idea to first save it to your working directory through your browser, and then read it locally. The benefits of this include having the data backed-up in case the website changes, and being able to run your code if you are offline. The drawback is that if the website is updated and you actually want those changes to be reflected in your text analysis, you’ll have to download new versions periodically.↩︎ See the help for unnest_tokens to learn more about options for the token.↩︎ Check out the widyr package and its pairwise_count() function if interested in these and similar questions.↩︎ "],["advanced-visualization.html", "Advanced Visualization Network Visualization Animations with gganimate Interactive Visualizations", " Advanced Visualization Network Visualization Read in the Capital Bikeshare data from the last quarter of 2014: data_site &lt;- &quot;https://bcheggeseth.github.io/112_fall_2022/data/2014-Q4-Trips-History-Data-Small.rds&quot; Trips &lt;- readRDS(gzcon(url(data_site))) Stations &lt;- read_csv(&quot;https://bcheggeseth.github.io/112_fall_2022/data/DC-Stations.csv&quot;) One way to plot networks is to just use the geom_segment function in ggplot. Here is an example where we compute the bike ride flows between each pair of stations, keeping the data faceted by client and is_weekend, and filtering out low traffic links: TrafficFlow &lt;- Trips %&gt;% mutate(is_weekend = ifelse(lubridate::wday(sdate) %in% c(1, 7), &quot;weekend&quot;, &quot;weekday&quot;)) %&gt;% group_by(sstation, estation, client, is_weekend) %&gt;% summarise(flow = n()) %&gt;% left_join(Stations %&gt;% select(name, lat, long), by = c(&quot;sstation&quot; = &quot;name&quot;)) %&gt;% rename(slat = lat) %&gt;% rename(slong = long) %&gt;% left_join(Stations %&gt;% select(name, lat, long), by = c(&quot;estation&quot; = &quot;name&quot;)) %&gt;% rename(elat = lat) %&gt;% rename(elong = long) %&gt;% filter(!is.na(slat) &amp; !is.na(slong) &amp; !is.na(elat) &amp; !is.na(elong)) sstation estation client is_weekend flow slat slong elat elong 10th &amp; E St NW 10th &amp; E St NW Casual weekday 12 38.89591 -77.02606 38.89591 -77.02606 10th &amp; E St NW 10th &amp; E St NW Casual weekend 36 38.89591 -77.02606 38.89591 -77.02606 10th &amp; E St NW 10th &amp; E St NW Registered weekday 24 38.89591 -77.02606 38.89591 -77.02606 10th &amp; E St NW 10th &amp; E St NW Registered weekend 15 38.89591 -77.02606 38.89591 -77.02606 10th &amp; E St NW 10th &amp; U St NW Registered weekday 4 38.89591 -77.02606 38.91720 -77.02590 10th &amp; E St NW 10th &amp; U St NW Registered weekend 1 38.89591 -77.02606 38.91720 -77.02590 10th &amp; E St NW 10th St &amp; Constitution Ave NW Casual weekday 4 38.89591 -77.02606 38.89303 -77.02601 10th &amp; E St NW 10th St &amp; Constitution Ave NW Casual weekend 19 38.89591 -77.02606 38.89303 -77.02601 10th &amp; E St NW 10th St &amp; Constitution Ave NW Registered weekday 4 38.89591 -77.02606 38.89303 -77.02601 10th &amp; E St NW 10th St &amp; Constitution Ave NW Registered weekend 4 38.89591 -77.02606 38.89303 -77.02601 myMap &lt;- get_stamenmap(c(-77.1, 38.87, -76.975, 38.95), zoom = 14, maptype = &quot;terrain&quot;) # centered at Logan Circle # myMap&lt;-get_map(location=&quot;Logan Circle&quot;,source=&quot;google&quot;,maptype=&quot;roadmap&quot;,zoom=13) Plot data on the whole network: thresh &lt;- .04 max_flow &lt;- max(TrafficFlow$flow) TrafficFlow &lt;- TrafficFlow %&gt;% mutate(weight = flow / max_flow) %&gt;% filter(weight &gt; thresh) ggmap(myMap) + geom_point(data = Stations, size = 2, color = &quot;red&quot;, aes(x = long, y = lat)) + geom_segment(data = TrafficFlow, aes(x = slong, xend = elong, y = slat, yend = elat, alpha = weight / 2), arrow = arrow(length = unit(0.03, &quot;npc&quot;)), color = &quot;red&quot;) + facet_grid(client ~ is_weekend) Animations with gganimate The gganimate package animates a series of plots. Here are some resources: gganimate intro slides by Katherine Good gganimate cheat sheet gganimate by Thomas Pedersen Pedersen introductory vignette gganimate wiki page ropensci examples Let’s do one example here. First we create a static plot of a single bike moving around town. Identify a busy bike: busyBikes &lt;- Trips %&gt;% group_by(bikeno) %&gt;% summarise(count = n()) %&gt;% arrange(desc(count)) %&gt;% head(3) Gather and tidy all data for that bike: singleBike &lt;- Trips %&gt;% filter(bikeno == busyBikes$bikeno[1]) %&gt;% arrange(sdate) %&gt;% select(sdate, sstation, edate, estation) singleTidy &lt;- bind_rows( singleBike %&gt;% select(date = sdate, station = sstation) %&gt;% mutate(key = &quot;start&quot;), singleBike %&gt;% select(date = edate, station = estation) %&gt;% mutate(key = &quot;end&quot;) ) %&gt;% arrange(date) %&gt;% left_join(Stations, by = c(&quot;station&quot; = &quot;name&quot;)) Plot the movements of the bike over the first week: stops &lt;- singleTidy %&gt;% select(station, lat, long, date) %&gt;% head(102) %&gt;% mutate(elapsed_hours = as.numeric(difftime(date, date[1], units = &quot;hours&quot;))) %&gt;% mutate(order = 1:102) ggmap(myMap) + geom_path(data = stops, aes(x = long, y = lat, color = elapsed_hours), size = 1.3) + scale_color_distiller(palette = &quot;Reds&quot;) + labs(color = &quot;Elapsed Hours&quot;) Now let’s animate the plot with gganimate: library(gganimate) library(av) pp_anim &lt;- ggmap(myMap) + geom_path(data = stops, aes(x = long, y = lat, color = elapsed_hours), size = 1.3) + scale_color_distiller(palette = &quot;Reds&quot;) + labs(color = &quot;Elapsed Hours&quot;, title = &quot;Date and Time: {frame_along}&quot;) + transition_reveal(date) animate(pp_anim, fps = 1, start_pause = 2, end_pause = 15, renderer = av_renderer()) The animations above do not allow for interactivity. We’ll explore different methods to include interactivity in the following sections. Interactive Visualizations Additional reading: Interactivity in R for Data Science by Grolemund and Wickham. http://www.htmlwidgets.org/ htmlwidgets Different htmlwidgets allow you to take advantage of the interactivity of html when generating graphics. Different types of widgets have been designed for different types of visualizations. In general, I found all of these easy to learn and use (i.e., I could get them up and running on an example I had in mind in under an hour). leaflet for interactive maps The leaflet htmlwidget allows you to easily create interactive maps. Just like ggplot, you add different layers to the visualiation (a “Tiles”” layer for a background map, different types of “Markers”, points lines, etc.). I found it super easy to learn and use. Here is an example: library(leaflet) pal &lt;- colorNumeric( palette = &quot;Greys&quot;, domain = stops$order, reverse = TRUE ) leaflet(stops) %&gt;% setView(-77.0296, 38.9096, zoom = 13) %&gt;% # Logan Circle coords addProviderTiles(&quot;OpenStreetMap.Mapnik&quot;) %&gt;% # this fixes a bug in addTiles() %&gt;% addCircleMarkers( lat = ~lat, lng = ~long, color = ~ pal(order), popup = ~ paste(as.character(order), &quot;: &quot;, station, sep = &quot;&quot;) ) %&gt;% addPolylines(lat = ~lat, lng = ~long) dygraphs The dygraph pacakge allows us to generate interactive time series charts. I am interested in how often the van needs to come by and pick up or drop off bicycles at different stations. So I want to look at the net daily departures at each station; that is, the number of departures minus the number of arrivals. num_daily_departures &lt;- Trips %&gt;% mutate(month = lubridate::month(sdate)) %&gt;% mutate(day = lubridate::day(sdate)) %&gt;% group_by(month, day, sstation) %&gt;% summarise(num_departures = n()) num_daily_arrivals &lt;- Trips %&gt;% mutate(month = lubridate::month(edate)) %&gt;% mutate(day = lubridate::day(edate)) %&gt;% group_by(month, day, estation) %&gt;% filter(month &gt; 9) %&gt;% summarise(num_arrivals = n()) NetTraffic &lt;- num_daily_departures %&gt;% full_join(num_daily_arrivals, by = c(&quot;sstation&quot; = &quot;estation&quot;, &quot;month&quot; = &quot;month&quot;, &quot;day&quot; = &quot;day&quot;)) NetTraffic[is.na(NetTraffic)] &lt;- 0 NetTraffic &lt;- NetTraffic %&gt;% mutate(total_events = num_departures + num_arrivals) %&gt;% mutate(net_departures = num_departures - num_arrivals) %&gt;% rename(station = sstation) %&gt;% group_by(station) %&gt;% mutate(tot = sum(total_events)) %&gt;% filter(tot &gt; 6000) %&gt;% ungroup() %&gt;% mutate(date = ymd(paste(&quot;2014&quot;, as.character(month), as.character(day), sep = &quot;&quot;))) %&gt;% mutate(wday = wday(date, label = TRUE)) Table 14.3: First ten rows of the NetTraffic table. date wday station num_departures num_arrivals total_events net_departures 2014-10-01 Wed 10th &amp; E St NW 42 37 79 5 2014-10-01 Wed 10th &amp; U St NW 46 27 73 19 2014-10-01 Wed 10th St &amp; Constitution Ave NW 43 40 83 3 2014-10-01 Wed 11th &amp; F St NW 49 42 91 7 2014-10-01 Wed 11th &amp; K St NW 72 61 133 11 2014-10-01 Wed 11th &amp; Kenyon St NW 57 53 110 4 2014-10-01 Wed 11th &amp; M St NW 117 105 222 12 2014-10-01 Wed 12th &amp; L St NW 52 54 106 -2 2014-10-01 Wed 12th &amp; U St NW 84 89 173 -5 2014-10-01 Wed 13th &amp; D St NE 45 53 98 -8 Let’s plot the net daily departures for four different stations. NetTrafficSelect &lt;- NetTraffic %&gt;% filter(station %in% c(&quot;Massachusetts Ave &amp; Dupont Circle NW&quot;, &quot;16th &amp; Harvard St NW&quot;, &quot;Lincoln Memorial&quot;, &quot;Columbus Circle / Union Station&quot;)) %&gt;% select(date, station, net_departures) Note that dygraphs wants each time series in a separate column, as opposed to the tidy format in which you would want it for ggplot. It also wants it in the xts format. We can fix this with a spread command: library(xts) NetTrafficSelectWide &lt;- NetTrafficSelect %&gt;% spread(key = station, value = net_departures) NetTrafficSelectXTS &lt;- xts(NetTrafficSelectWide[, 2:5], order.by = NetTrafficSelectWide$date) And now we are ready to create the visualization. Note how you can hover over points to see the values or use the range selector to adjust the domain on the x-axis. library(dygraphs) dygraph(NetTrafficSelectXTS, main = &quot;Daily Net Departures at Four Select Stations&quot;) %&gt;% dyRangeSelector() %&gt;% dyOptions( drawPoints = TRUE, pointSize = 5, strokeWidth = 3, colors = RColorBrewer::brewer.pal(4, &quot;Set2&quot;) ) %&gt;% dyLegend(width = 1200) plotly (d3) The plotly package is a super convenient way to incorporate many of the cool features of d3 into your graphics without having to learn anything about d3 programming. This might be my favorite widget so far, because all you have to do is make your regular graphic with ggplot and then pass it to the function ggplotly. library(plotly) p &lt;- ggplot( NetTrafficSelect, aes(x = date, y = net_departures, fill = station) ) + geom_col(position = &quot;dodge&quot;) ggplotly(p) Note all of the extra functionality we get: You can turn individual time series on and off. You can pan and zoom in and out on select areas. You can hover on specific points to see either individual values, or (really cool) compare all values at that date. Others Here is a list of other cool htmlwidgets, along with demos: http://www.htmlwidgets.org/. Dashboards With the flexdashboard package, you can create dashboards with different configurations to display information visually. Each of these panels can include standard ggplot figures, htmlwidgets, text, tables, etc. The resulting dashboard is output as an html file that can be opened in a browswer. You can check out the source code for each of these demo examples: htmlwidgets showcase storyboard highcharter dashboard This page gives detailed instructions on using this package. Shiny As opposed to htmlwidgets, which leverage JavaScript code to create the interactivity, Shiny Web Apps use R code to directly build the interactivity. This interactivity is built on the server side, so a Shiny App needs to be hosted on a server, as opposed to an htmlwidget, which can be embedded into the html page.32 While this can be more complicated, it also opens the door to more possibilities. For example, if data is continuously being collected by the server, users can access up to date information. Shiny can also be used in conjunction with dashboards. Here are a couple examples: Bus dashboard that is continuously updated CRAN downloads Diamond explorer The programming paradigm is slightly different than we are used to, because it is reactive. Here is another article on understanding reactivity. It points out that when the user changes the input in a Shiny app (e.g., checking a box, moving a slider, filtering out certain variables), “Shiny is re-running your R expressions in a carefully scheduled way.” Shiny still utilizes JavaScript libraries like d3 and Leaflet.↩︎ "],["shiny-1.html", "Shiny Learning Goals What is a Shiny App? Creating an app More Practice", " Shiny Learning Goals Create a shiny app that requires inputs. Publish a shiny app to shinyapps.io or the Macalester Shiny server (https://rstudio-connect.macalester.edu/). What is a Shiny App? In this section, we will learn how to create a Shiny App. Shiny Apps are applications that allow the user to interact or make changes to graphs or tables. You will learn how to create them in R and how to deploy them on your own shinyapps.io webpage or the Macalester Shiny server (https://rstudio-connect.macalester.edu/). See examples of some Shiny apps here. I recommend having the Shiny cheatsheet open while you are learning about Shiny. Also consider watching at least the first part of this tutorial by Garrett Grolemund. Structure of a Shiny App To see an example of a Shiny App, go to File &gt; New File &gt; Shiny Web App. Give it the title of First_Shiny_App and make sure the single file button is checked. Our application will be contained in an app.R file. The file contains two key components: ui: code for the user interface. The user interface is the webpage that your user will interact with. Don’t worry, you don’t need to know how to write html! The app will do that for you! (Although if you want to, there are opportunities to incorporate that knowledge into a Shiny app.) server: code for the computer part. What should the computer/server do with your inputs as the user changes them. This section will have R code in it, more like we’re used to … sort of. I always keep these names as the default. The last chunk of code at the bottom, shinyApp(ui = ui, server = server), will compile everything together to result in the interactive webpage. Press Run App at the top of RStudio and see what happens! Concept Map The concept map below illustrates the key components of a Shiny app and how they relate to one another. Figure 14.6: Concept Map of Shiny by Lisa Lendway Creating an app Creating a Shiny app is different from what we’ve done so far in this class. One of the biggest changes, is that we’ll be working from .R files, rather than .Rmd files. In .R files, everything is read as R code. So, it’s like one big R code chunk. If you want to make comments, you need to use the pound/hashtag symbol, #. Let’s start by downloading this blank app.R file and opening it in RStudio. Open the file and click Run App. This is a really boring app - there is nothing there! But, it is a great starting point because it gives you an outline of what you need in order to make your app work. Before getting into a lot of details, let’s add a little bit to the app. At the top of the file (before the ui), load the tidyverse and babynames libraries and add some text in quotes inside the fluidPage() function.Run the app. Now, let’s move on to creating a more interesting app. Your goal is to create a Shiny app for your friends to explore the babynames dataset! Requirements: Show the number of babies with a given name over time. Allow the user to type a single name. (Ideally, it should give a message if there are no records of the name that was typed, but we won’t worry about that now.) Allow the user to choose a range of years they would like to display. Allow the user to filter by sex. Details How do we do this? Save this app.R file in a folder with a descriptive name such as, Babynames_App Add ui components Add server components Deploy to a server to share with others! Let’s learn more about these! What is an app.R file? Like we’ve already seen in the sample app files, these contain two key components: ui and server. We will add different *Input() and *Output() functions to the ui. The *Input*() functions collect inputs from the user. The *Output() functions work with the render*() functions in the server portion to to add R output to the UI. *Input() functions The *Input() functions collect inputs from the user. The various types are listed on the right-hand side of the first page of the cheatsheet. You will list all the *Input() functions you want to use with their accompanying arguments inside the fluidPage() function in the ui portion. Separate the *Input() functions with commas. In all the *Input() functions, the first two arguments are the same: * inputId is how you will call this input in the server portion later, * label is how this will actually be labeled in your UI. Each function has some additional arguments depending what you want to do. Exercise In the app.R file you just created, add three inputs inside the fluidPage() function. Be sure to separate them with commas. sliderInput() to choose the start and end year for the eventual graph. textInput() to write a name. selectInput() to choose a binary sex assigned at birth. Once you complete all the necessary arguments, run your app. Make sure you can enter and move things around as expected. There won’t be a graph yet because we haven’t created it. *Output() functions *Output() functions in the ui portion work with the render*() functions in the server portion to to add R output to the UI. The *Output() functions are listed in the bottom center part of the first page of the cheatsheet. All the *Output() functions have the same first argument, outputId, which is used how you will call this output in the server portion later (like the inputId in the *Input() functions). Exercise Add a plotOutput() to the fluidPage() function. Run the app with the output. Notice that nothing really changes. Think of this output as a placeholder. So, it knows there is going to be a plot in the UI, but the details of what the plot will look like and the R code to create it will be in the server portion. Let’s talk about that! Using render*() functions In the server portion of the code, we will use render*() functions with R code to communicate how to use the input pieces along with the R code to create the desired output. The render*() function you use will depend on the desired output. The bottom center of the cheatsheet shows how *Output() and render*() functions connect. In general, the server section of code will look something like this: server &lt;- function(input, output) { output$outputId_of_interest &lt;- render*({ R code that creates the output and calls various input$InputId&#39;s }) } So, if inside the ui part, we did plotOutput(outputId = \"timeplot\"), then in the server part, we would use output$timeplot &lt;- renderPlot({...}) and put in detailed R code in place of the .... To reference the inputs we create in the ui, we use input$inputID_name. So, for example, if we had an *Input() with inputId = \"years\", we would use input$years in the server portion. Since we are interested in creating a plot, add the renderPlot() function inside the server portion of the code. Reference the inputs you’ve already created in previous parts and use filter() and ggplot() to render the desired interactive plot. Run the app and check your work by looking at the code chunk below (so don’t look ahead, if you want to try it out on your own!). I also added a submit button to the UI so everything is updated at the same time, only when the button is clicked. You should try adding that, too. Below, I have also included all the R code used to create the app. I have highlighted the inputId and outputId similarly in the ui and server portions to draw attention to where they are referenced. library(shiny)library(tidyverse)library(babynames)ui &nbsp;&nbsp;sliderInput(inputId = \"years\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;label = \"Year Range\",&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;min = 1880, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max = 2017, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = c(1880,2017),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sep = \"\"),&nbsp;&nbsp;textInput(\"name\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Baby Name\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = \"\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;placeholder = \"Brianna\"),&nbsp;&nbsp;selectInput(\"sex\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Sex Assigned at Birth\", &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;choices = list(Female = \"F\", Male = \"M\")),&nbsp;&nbsp;submitButton(text = \"Update Plot\"),&nbsp;&nbsp;plotOutput(outputId = \"timeplot\"))server &nbsp;&nbsp;output$timeplot &nbsp;&nbsp;&nbsp;&nbsp;babynames %>% &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filter(name == input$name, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sex == input$sex) %>% &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ggplot() +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;geom_line(aes(x = year, y = n)) +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scale_x_continuous(limits = input$years) +&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;labs(x = 'Year', y = 'Count', title = paste0('Count of Baby Names in the U.S. from ',input$years[1],' to ',input$years[2])) + &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theme_classic()&nbsp;&nbsp;})}shinyApp(ui = ui, server = server) Publishing your app The first step is to nstall and load the rsconnect library in your R Studio session. Option 1 (Macalester Shiny Server) This option allows you to share your applications with individuals on Macalester campus or who have VPN access to the Macalester network. Go to https://rstudio-connect.macalester.edu/ and click Sign In in the upper-right. Use your Macalester username (before @macalester.edu) and your existing Macalester password. Run the app in RStudio. In the upper right-hand corner, there is an option to publish the app (blue half circle icon with dot in the middle). Click on that and then click Add new account &gt; RStudio Connect. The public url is rstudio-connect.macalester.edu. It will open a webpage and ask you to authenticate your connect account. When you create an app, save it as app.R in a folder. It MUST be named app.R. In the app.R file, load all libraries you use in your code. Also try not to have extra libraries or it will take longer to get it on the website. Any data that your app uses needs to be read in within the app. If the data are local to your computer, you need to have the data in the same folder as the app. Run the app. In the upper right-hand corner, there is an option to publish the app. Click on that. It will take a bit of time to do it the first time. Once published, you can go to the app via the webpage provided. You should set permissions so that Anyone - no login required can view your application. The URL to share your application is under Content URL on the bottom right. Option 2 (Shinyapps.io) This option allows you to share your applications with any individual with internet access unless you make it password protected. Register at https://www.shinyapps.io/admin/#/signup. Once you are logged in to shinyapps.io, go to Account –&gt; Tokens and click the Show button. Copy and paste the code into the console in R. This will connect your account to R Studio. When you create an app, save it as app.R in a folder. It MUST be named app.R. In the app.R file, load all libraries you use in your code. Also try not to have extra libraries or it will take longer to get it on the website. Any data that your app uses needs to be read in within the app. If the data are local to your computer, you need to have the data in the same folder as the app. Run the app. In the upper right-hand corner, there is an option to publish the app. Click on that. It will take a bit of time to do it the first time. Once published, you can go to the app via the webpage provided. The instructions are set out in more detail here. You can see the example of my sample app before it was published in the shiny_app folder of all my files (note that the rsconnect folder is added after publishing the app). More Practice Try adding something more to the app. Here are a couple ideas. Return a message if the user enters a name that is not found in the data set. By the way, this will happen if someone enters a name with all lowercase letters, too. How could you solve that problem? Allow the user to enter more than one name and compare the graphs either by coloring different lines or using faceting. Allow the user to change something about the graph, like the color of the line or the type of line. "],["presentation-tools.html", "Presentation Tools Output Formats", " Presentation Tools Output Formats R Markdown can be used to output a wide range of formats. We have already seen a bunch of these including documents (html, pdf, word, handout), html files with built-in interactive widgets, Shiny apps, and dashboards. There is a nice gallery to showcase all of these formats, as well as a list. Note: The newest presentation tool available (as of 2022) is Quarto, which is a generalization of R Markdown format. It allows you to weave R, Python, Julia, and other code and output with marked up text. This is incredibly important as most organizations use a combination of computational tools. While we will still refer to R Markdown below, many of the same formats listed below are available in Quarto, which is probably the soon-to-be future standard. See https://quarto.org/ for more information. Slides There are many different ways to write slide packages in RStudio. Advantages of all of these methods are that (i) the output is an html or pdf, so it is easy to put on a website and access from anywhere, and (ii) you have already done all of your wrangling, graphics, etc. in R. So you do not need to cut and paste graphics or code clippings or anything else from RStudio into another software package like PowerPoint or Google Docs. The main disadvantage is that there is not a drag and drop way to arrange slides for these types of presentations. So if you want an image to be of a certain size at a certain location of the slide, you’ll have to input those specifications, as opposed to stretching and moving with a cursor. If you are interested in trying to write your presentation in R Markdown (or Quarto), my suggestion is to pick one of the formats below, download a template (I’ve linked to a bunch), make sure you can compile it from R Markdown, and then start editing. Slide presentation formats built in to R Markdown ioslides_presentation, an HTML presentation. Just need to include output: ioslides_presentation in the header of your Rmd file and then an option will appear to Knit to HTML (ioslides). Here is the documentation, an example, and the Rmd for the example. These files are from one of Garret Grolemund’s repositories here. slidy_presentation, an HTML presentation. Same thing as above. Just include output: slidy_presentation and an option will appear to Knit to HTML (Slidy). Here is the documentation. beamer_presentation, a PDF presentation with LaTeX Beamer. Same as above again. Just include output: beamer_presentation and then you can Knit to PDF (Beamer). Slide presentation formats available via other packages revealjs::revealjs_presentation, an HTML presentation that requires the revealjs package. Here is the documentation, an example, and the Rmd for the example. These files are from one of Garret Grolemund’s repositories here. rmdshower, an HTML presentation that requires the rmdshower package. Here is an example and the code to generate it can be found in this repository. Slidify is a wrapper package that enables you to use many different types of presentations. Here is a review and a pretty good tutorial, the code for which you can find here. Note: Within RStudio, you can also create a Quarto Presentation, which is very similar to Rmd revealjs slides. Brianna has been using Quarto Presentations this semester and finds that it works a bit easier than Rmd revealjs. Reports / Websites You have all used the standard output:html_document to knit your Rmd file into an html file. For your technical blog posts, you can stick to that, or try tweaking some options. Here are some examples: You can change the appearance and style of the output of the html_document by changing the theme and highlight options. I’ve changed these in one knitting option above with the lumen theme and espresso highlight. You can find the full list of options here. You can load the prettydoc package, and use one of its themes. You can find the full list in the documentation or this tutorial. Some alternative Markdown templates The bookdown package was designed to write books in R Markdown, but you can also use it write single html files or pdf handouts. I’ve been using it all semester. Here is the documentation, a tutorial video, and a bunch of books that were written with the package. Check out the list of contributors. Here a couple others you probably will not need for this project: The blogdown package helps you set up an actual blogs with multiple posts. Here is a tutorial (written in bookdown ofcourse) and an example blog. The rticles package helps you use R Markdown to write an article that conforms to a specific journal’s template. Test Below is some sample content to test out some of these output options. I’ve set everything up in the header of this Rmd file. All you have to do is knit it with different options and check out the output html file. A sample footnote33 How a code chunk is displayed: Trips &lt;- readRDS(&quot;data/2014-Q4-Trips-History-Data.rds&quot;) Stations &lt;- read.csv(&quot;data/DC-Stations.csv&quot;) Graphic from ggplot: Interactive map with the leaflet package: Number of daily net departures for four different stations: Table 14.4: First ten rows of the NetTraffic table. date wday station num_departures num_arrivals total_events net_departures 2014-10-01 Wed 10th &amp; E St NW 42 37 79 5 2014-10-01 Wed 10th &amp; U St NW 46 27 73 19 2014-10-01 Wed 10th St &amp; Constitution Ave NW 43 40 83 3 2014-10-01 Wed 11th &amp; F St NW 49 42 91 7 2014-10-01 Wed 11th &amp; K St NW 72 61 133 11 2014-10-01 Wed 11th &amp; Kenyon St NW 57 53 110 4 2014-10-01 Wed 11th &amp; M St NW 117 105 222 12 2014-10-01 Wed 12th &amp; L St NW 52 54 106 -2 2014-10-01 Wed 12th &amp; U St NW 84 89 173 -5 2014-10-01 Wed 13th &amp; D St NE 45 53 98 -8 Visualization with dygraphs: Alternative visualization with plotly: This is a footnote.↩︎ "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
